unit Domino_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 31.01.2018 10:33:00 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files (x86)\IBM\Notes\domobj.tlb (1)
// LIBID: {29131520-2EED-1069-BF5D-00DD011186B7}
// LCID: 0
// Helpfile: 
// HelpString: Lotus Domino Objects
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// Errors:
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'type' of IRegistration.RegisterNewUser changed to 'type_'
//   Hint: Member 'Class' of 'IEmbeddedObject' changed to 'Class_'
//   Hint: Member 'Object' of 'IEmbeddedObject' changed to 'Object_'
//   Hint: Member 'Label' of 'IOutlineEntry' changed to 'Label_'
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses Winapi.Windows, System.Classes, System.Variants, System.Win.StdVCL, Vcl.Graphics, Vcl.OleServer, Winapi.ActiveX;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  DominoMajorVersion = 1;
  DominoMinorVersion = 2;

  LIBID_Domino: TGUID = '{29131520-2EED-1069-BF5D-00DD011186B7}';

  IID_IACL: TGUID = '{29131560-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesACL: TGUID = '{29131521-2EED-1069-BF5D-00DD011186B7}';
  IID_IDatabase: TGUID = '{29131563-2EED-1069-BF5D-00DD011186B7}';
  IID_IDocumentCollection: TGUID = '{29131568-2EED-1069-BF5D-00DD011186B7}';
  IID_IDocument: TGUID = '{29131567-2EED-1069-BF5D-00DD011186B7}';
  IID_IView: TGUID = '{29131579-2EED-1069-BF5D-00DD011186B7}';
  IID_IViewEntryCollection: TGUID = '{2913157C-2EED-1069-BF5D-00DD011186B7}';
  IID_IViewEntry: TGUID = '{2913157B-2EED-1069-BF5D-00DD011186B7}';
  IID_IViewNavigator: TGUID = '{2913157D-2EED-1069-BF5D-00DD011186B7}';
  IID_IViewColumn: TGUID = '{2913157A-2EED-1069-BF5D-00DD011186B7}';
  IID_IItem: TGUID = '{2913156B-2EED-1069-BF5D-00DD011186B7}';
  IID_IItem2: TGUID = '{2913158A-2EED-1069-BF5D-00DD011186B7}';
  IID_IDateTime: TGUID = '{29131564-2EED-1069-BF5D-00DD011186B7}';
  IID_ISession: TGUID = '{29131578-2EED-1069-BF5D-00DD011186B7}';
  IID_IAgent: TGUID = '{29131562-2EED-1069-BF5D-00DD011186B7}';
  IID_IInternational: TGUID = '{2913156C-2EED-1069-BF5D-00DD011186B7}';
  IID_IName: TGUID = '{2913156E-2EED-1069-BF5D-00DD011186B7}';
  IID_IDateRange: TGUID = '{29131565-2EED-1069-BF5D-00DD011186B7}';
  IID_ILog: TGUID = '{2913156D-2EED-1069-BF5D-00DD011186B7}';
  IID_INewsletter: TGUID = '{2913156F-2EED-1069-BF5D-00DD011186B7}';
  IID_IRegistration: TGUID = '{29131572-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextParagraphStyle: TGUID = '{29131576-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextStyle: TGUID = '{29131575-2EED-1069-BF5D-00DD011186B7}';
  IID_IDbDirectory: TGUID = '{29131566-2EED-1069-BF5D-00DD011186B7}';
  IID_IAdministrationProcess: TGUID = '{29131581-2EED-1069-BF5D-00DD011186B7}';
  IID_INotesStream: TGUID = '{29131580-2EED-1069-BF5D-00DD011186B7}';
  IID_IColorObject: TGUID = '{29131583-2EED-1069-BF5D-00DD011186B7}';
  IID_IDXLExporter: TGUID = '{29131590-2EED-1069-BF5D-00DD011186B7}';
  IID_IDXLImporter: TGUID = '{29131591-2EED-1069-BF5D-00DD011186B7}';
  IID_IMIMEEntity: TGUID = '{2913157E-2EED-1069-BF5D-00DD011186B7}';
  IID_IMIMEHeader: TGUID = '{2913157F-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextItem: TGUID = '{29131574-2EED-1069-BF5D-00DD011186B7}';
  IID_IEmbeddedObject: TGUID = '{29131569-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextNavigator: TGUID = '{29131584-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextRange: TGUID = '{29131585-2EED-1069-BF5D-00DD011186B7}';
  IID_IReplication: TGUID = '{29131573-2EED-1069-BF5D-00DD011186B7}';
  IID_IReplicationEntry: TGUID = '{29131582-2EED-1069-BF5D-00DD011186B7}';
  IID_IOutline: TGUID = '{29131570-2EED-1069-BF5D-00DD011186B7}';
  IID_IOutlineEntry: TGUID = '{29131571-2EED-1069-BF5D-00DD011186B7}';
  IID_IForm: TGUID = '{2913156A-2EED-1069-BF5D-00DD011186B7}';
  IID_INoteCollection: TGUID = '{29131589-2EED-1069-BF5D-00DD011186B7}';
  IID_IACLEntry: TGUID = '{29131561-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesACLEntry: TGUID = '{29131522-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesAgent: TGUID = '{29131523-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDatabase: TGUID = '{29131524-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDateRange: TGUID = '{29131525-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDateTime: TGUID = '{29131526-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDbDirectory: TGUID = '{29131527-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDocument: TGUID = '{29131528-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDocumentCollection: TGUID = '{29131529-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesEmbeddedObject: TGUID = '{2913152A-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesForm: TGUID = '{2913152B-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesItem: TGUID = '{2913152C-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesInternational: TGUID = '{2913152D-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesLog: TGUID = '{2913152E-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesName: TGUID = '{2913152F-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesNewsletter: TGUID = '{29131530-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesOutline: TGUID = '{29131531-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesOutlineEntry: TGUID = '{29131532-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextItem: TGUID = '{29131533-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextStyle: TGUID = '{29131534-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextParagraphStyle: TGUID = '{29131535-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextTab: TGUID = '{29131577-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextTab: TGUID = '{29131536-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRegistration: TGUID = '{29131537-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesReplication: TGUID = '{29131538-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesSession: TGUID = '{29131539-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesView: TGUID = '{2913153A-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesViewColumn: TGUID = '{2913153B-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesViewEntry: TGUID = '{2913153C-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesViewEntryCollection: TGUID = '{2913153D-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesViewNavigator: TGUID = '{2913153E-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesMIMEEntity: TGUID = '{2913153F-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesMIMEHeader: TGUID = '{29131540-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesStream: TGUID = '{29131541-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesAdministrationProcess: TGUID = '{29131542-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesReplicationEntry: TGUID = '{29131543-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesColorObject: TGUID = '{29131544-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextNavigator: TGUID = '{29131545-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextRange: TGUID = '{29131546-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextDoclink: TGUID = '{29131586-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextDoclink: TGUID = '{29131547-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextSection: TGUID = '{29131587-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextSection: TGUID = '{29131548-2EED-1069-BF5D-00DD011186B7}';
  IID_IRichTextTable: TGUID = '{29131588-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesRichTextTable: TGUID = '{29131549-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesNoteCollection: TGUID = '{29131550-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDXLExporter: TGUID = '{29131551-2EED-1069-BF5D-00DD011186B7}';
  CLASS_NotesDXLImporter: TGUID = '{29131552-2EED-1069-BF5D-00DD011186B7}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum _ACLLEVEL
type
  _ACLLEVEL = TOleEnum;
const
  ACLLEVEL_NOACCESS = $00000000;
  ACLLEVEL_DEPOSITOR = $00000001;
  ACLLEVEL_READER = $00000002;
  ACLLEVEL_AUTHOR = $00000003;
  ACLLEVEL_EDITOR = $00000004;
  ACLLEVEL_DESIGNER = $00000005;
  ACLLEVEL_MANAGER = $00000006;

// Constants for enum _COLORS
type
  _COLORS = TOleEnum;
const
  COLOR_BLACK = $00000000;
  COLOR_WHITE = $00000001;
  COLOR_RED = $00000002;
  COLOR_GREEN = $00000003;
  COLOR_BLUE = $00000004;
  COLOR_MAGENTA = $00000005;
  COLOR_YELLOW = $00000006;
  COLOR_CYAN = $00000007;
  COLOR_DARK_RED = $00000008;
  COLOR_DARK_GREEN = $00000009;
  COLOR_DARK_BLUE = $0000000A;
  COLOR_DARK_MAGENTA = $0000000B;
  COLOR_DARK_YELLOW = $0000000C;
  COLOR_DARK_CYAN = $0000000D;
  COLOR_GRAY = $0000000E;
  COLOR_LIGHT_GRAY = $0000000F;

// Constants for enum _SPACING
type
  _SPACING = TOleEnum;
const
  SPACING_SINGLE = $00000000;
  SPACING_DOUBLE = $00000002;
  SPACING_ONE_POINT_25 = $00000003;
  SPACING_ONE_POINT_50 = $00000001;
  SPACING_ONE_POINT_75 = $00000004;
  VW_SPACING_SINGLE = $00000000;
  VW_SPACING_DOUBLE = $00000002;
  VW_SPACING_ONE_POINT_25 = $00000003;
  VW_SPACING_ONE_POINT_50 = $00000001;
  VW_SPACING_ONE_POINT_75 = $00000004;

// Constants for enum _VC_ALIGN
type
  _VC_ALIGN = TOleEnum;
const
  VC_ALIGN_LEFT = $00000000;
  VC_ALIGN_RIGHT = $00000001;
  VC_ALIGN_CENTER = $00000002;

// Constants for enum _VC_DATEFMT
type
  _VC_DATEFMT = TOleEnum;
const
  VC_FMT_YMD = $00000000;
  VC_FMT_MD = $00000002;
  VC_FMT_YM = $00000003;
  VC_FMT_Y4M = $00000006;

// Constants for enum _VC_FONTSTYLE
type
  _VC_FONTSTYLE = TOleEnum;
const
  VC_FONT_BOLD = $00000001;
  VC_FONT_ITALIC = $00000002;
  VC_FONT_UNDERLINE = $00000004;
  VC_FONT_STRIKEOUT = $00000008;
  VC_FONT_STRIKETHROUGH = $00000008;

// Constants for enum _VC_SEP
type
  _VC_SEP = TOleEnum;
const
  VC_SEP_SPACE = $00000001;
  VC_SEP_COMMA = $00000002;
  VC_SEP_SEMICOLON = $00000003;
  VC_SEP_NEWLINE = $00000004;

// Constants for enum _VC_NUMATTR
type
  _VC_NUMATTR = TOleEnum;
const
  VC_ATTR_PUNCTUATED = $00000001;
  VC_ATTR_PARENS = $00000002;
  VC_ATTR_PERCENT = $00000004;

// Constants for enum _VC_NUMFMT
type
  _VC_NUMFMT = TOleEnum;
const
  VC_FMT_GENERAL = $00000000;
  VC_FMT_FIXED = $00000001;
  VC_FMT_SCIENTIFIC = $00000002;
  VC_FMT_CURRENCY = $00000003;

// Constants for enum _VC_TDFMT
type
  _VC_TDFMT = TOleEnum;
const
  VC_FMT_DATE = $00000000;
  VC_FMT_TIME = $00000001;
  VC_FMT_DATETIME = $00000002;
  VC_FMT_TODAYTIME = $00000003;

// Constants for enum _VC_TIMEFMT
type
  _VC_TIMEFMT = TOleEnum;
const
  VC_FMT_HMS = $00000000;
  VC_FMT_HM = $00000001;
  VC_FMT_H = $00000002;
  VC_FMT_ALL = $00000003;

// Constants for enum _VC_TIMEZONEFMT
type
  _VC_TIMEZONEFMT = TOleEnum;
const
  VC_FMT_NEVER = $00000000;
  VC_FMT_SOMETIMES = $00000001;
  VC_FMT_ALWAYS = $00000002;

// Constants for enum _AG_TARGET
type
  _AG_TARGET = TOleEnum;
const
  TARGET_NONE = $00000000;
  TARGET_ALL_DOCS = $00000001;
  TARGET_NEW_DOCS = $00000002;
  TARGET_NEW_OR_MODIFIED_DOCS = $00000003;
  TARGET_SELECTED_DOCS = $00000004;
  TARGET_ALL_DOCS_IN_VIEW = $00000005;
  TARGET_UNREAD_DOCS_IN_VIEW = $00000006;

// Constants for enum _AG_TRIGGER
type
  _AG_TRIGGER = TOleEnum;
const
  TRIGGER_NONE = $00000000;
  TRIGGER_SCHEDULED = $00000001;
  TRIGGER_AFTER_MAIL_DELIVERY = $00000002;
  TRIGGER_DOC_PASTED = $00000003;
  TRIGGER_MANUAL = $00000004;
  TRIGGER_UPDATE = $00000005;
  TRIGGER_BEFORE_MAIL_DELIVERY = $00000006;

// Constants for enum _LOG_EVENTS
type
  _LOG_EVENTS = TOleEnum;
const
  EV_UNKNOWN = $00000000;
  EV_COMM = $00000001;
  EV_SECURITY = $00000002;
  EV_MAIL = $00000003;
  EV_REPLICA = $00000004;
  EV_RESOURCE = $00000005;
  EV_MISC = $00000006;
  EV_SERVER = $00000007;
  EV_ALARM = $00000008;
  EV_UPDATE = $00000009;

// Constants for enum _LOG_SEVERITY
type
  _LOG_SEVERITY = TOleEnum;
const
  SEV_UNKNOWN = $00000000;
  SEV_FATAL = $00000001;
  SEV_FAILURE = $00000002;
  SEV_WARNING1 = $00000003;
  SEV_WARNING2 = $00000004;
  SEV_NORMAL = $00000005;

// Constants for enum _REG_TYPE
type
  _REG_TYPE = TOleEnum;
const
  ID_FLAT = $000000AB;
  ID_HIERARCHICAL = $000000AC;
  ID_CERTIFIER = $000000AD;

// Constants for enum _USER_TYPE
type
  _USER_TYPE = TOleEnum;
const
  NOTES_LIMITED_CLIENT = $000000AE;
  NOTES_DESKTOP_CLIENT = $000000AF;
  NOTES_FULL_CLIENT = $000000B0;

// Constants for enum _REG_MAILOWNACL
type
  _REG_MAILOWNACL = TOleEnum;
const
  REG_MAIL_OWNER_ACL_MANAGER = $00000000;
  REG_MAIL_OWNER_ACL_DESIGNER = $00000001;
  REG_MAIL_OWNER_ACL_EDITOR = $00000002;

// Constants for enum _REG_MAILTYPE
type
  _REG_MAILTYPE = TOleEnum;
const
  REG_MAILSYSTEM_NOTES = $00000000;
  REG_MAILSYSTEM_POP = $00000001;
  REG_MAILSYSTEM_IMAP = $00000002;
  REG_MAILSYSTEM_INOTES = $00000003;
  REG_MAILSYSTEM_INTERNET = $00000004;
  REG_MAILSYSTEM_OTHER = $00000005;
  REG_MAILSYSTEM_NONE = $00000006;

// Constants for enum _REG_ROAMCLEANUP
type
  _REG_ROAMCLEANUP = TOleEnum;
const
  REG_ROAMING_CLEANUP_NEVER = $00000000;
  REG_ROAMING_CLEANUP_EVERY_NDAYS = $00000001;
  REG_ROAMING_CLEANUP_AT_SHUTDOWN = $00000002;
  REG_ROAMING_CLEANUP_PROMPT = $00000003;

// Constants for enum _RT_ALIGN
type
  _RT_ALIGN = TOleEnum;
const
  ALIGN_LEFT = $00000000;
  ALIGN_RIGHT = $00000001;
  ALIGN_CENTER = $00000003;
  ALIGN_FULL = $00000002;
  ALIGN_NOWRAP = $00000004;

// Constants for enum _RT_PAGINATE
type
  _RT_PAGINATE = TOleEnum;
const
  PAGINATE_DEFAULT = $00000000;
  PAGINATE_BEFORE = $00000001;
  PAGINATE_KEEP_WITH_NEXT = $00000002;
  PAGINATE_KEEP_TOGETHER = $00000004;

// Constants for enum _RT_TAB
type
  _RT_TAB = TOleEnum;
const
  TAB_LEFT = $00000000;
  TAB_RIGHT = $00000001;
  TAB_DECIMAL = $00000002;
  TAB_CENTER = $00000003;

// Constants for enum _RT_EFFECTS
type
  _RT_EFFECTS = TOleEnum;
const
  EFFECTS_NONE = $00000000;
  EFFECTS_SUPERSCRIPT = $00000001;
  EFFECTS_SUBSCRIPT = $00000002;
  EFFECTS_SHADOW = $00000003;
  EFFECTS_EMBOSS = $00000004;
  EFFECTS_EXTRUDE = $00000005;

// Constants for enum _RT_FONTS
type
  _RT_FONTS = TOleEnum;
const
  FONT_ROMAN = $00000000;
  FONT_HELV = $00000001;
  FONT_COURIER = $00000004;

// Constants for enum _DB_TYPES
type
  _DB_TYPES = TOleEnum;
const
  REPLICA_CANDIDATE = $000004DD;
  TEMPLATE_CANDIDATE = $000004DE;
  DATABASE = $000004DF;
  NOTES_DATABASE = $000004DF;
  TEMPLATE = $000004E0;

// Constants for enum _ADMP_MAILDEL
type
  _ADMP_MAILDEL = TOleEnum;
const
  MAILDELNONE = $00000000;
  MAILDELHOME = $00000001;
  MAILDELALL = $00000002;

// Constants for enum _ADMP_PWDCHK
type
  _ADMP_PWDCHK = TOleEnum;
const
  PWD_CHK_DONTCHECKPASSWORD = $00000000;
  PWD_CHK_CHECKPASSWORD = $00000001;
  PWD_CHK_LOCKOUT = $00000002;

// Constants for enum _STMREAD_LEN
type
  _STMREAD_LEN = TOleEnum;
const
  STMREAD_LINE = $00000000;

// Constants for enum _EOL_TYPE
type
  _EOL_TYPE = TOleEnum;
const
  EOL_CRLF = $00000000;
  EOL_LF = $00000001;
  EOL_CR = $00000002;
  EOL_PLATFORM = $00000003;
  EOL_ANY = $00000004;
  EOL_NONE = $00000005;

// Constants for enum _DXLIMPORTOPTION
type
  _DXLIMPORTOPTION = TOleEnum;
const
  DXLIMPORTOPTION_IGNORE = $00000001;
  DXLIMPORTOPTION_CREATE = $00000002;
  DXLIMPORTOPTION_REPLACE_ELSE_IGNORE = $00000005;
  DXLIMPORTOPTION_REPLACE_ELSE_CREATE = $00000006;
  DXLIMPORTOPTION_UPDATE_ELSE_IGNORE = $00000009;
  DXLIMPORTOPTION_UPDATE_ELSE_CREATE = $0000000A;

// Constants for enum _VALIDATIONOPTION
type
  _VALIDATIONOPTION = TOleEnum;
const
  VALIDATE_NEVER = $00000000;
  VALIDATE_ALWAYS = $00000001;
  VALIDATE_AUTO = $00000002;

// Constants for enum _DXLLOGOPTION
type
  _DXLLOGOPTION = TOleEnum;
const
  DXLLOGOPTION_IGNORE = $00000001;
  DXLLOGOPTION_WARNING = $00000002;
  DXLLOGOPTION_ERROR = $00000003;
  DXLLOGOPTION_FATALERROR = $00000004;

// Constants for enum _SESS_POLICY
type
  _SESS_POLICY = TOleEnum;
const
  POLICYSETTINGS_ARCHIVE = $00000002;
  POLICYSETTINGS_DESKTOP = $00000004;
  POLICYSETTINGS_REGISTRATION = $00000000;
  POLICYSETTINGS_SECURITY = $00000003;
  POLICYSETTINGS_SETUP = $00000001;
  POLICYSETTINGS_MAIL = $00000005;

// Constants for enum _IT_TYPE
type
  _IT_TYPE = TOleEnum;
const
  ERRORITEM = $00000100;
  UNAVAILABLE = $00000200;
  Text = $00000500;
  NUMBERS = $00000300;
  DATETIMES = $00000400;
  Names = $00000432;
  Readers = $00000433;
  Authors = $00000434;
  RICHTEXT = $00000001;
  USERID = $00000700;
  Formula = $00000600;
  COLLATION = $00000002;
  NOTEREFS = $00000004;
  NOTELINKS = $00000007;
  ATTACHMENT = $0000043C;
  OTHEROBJECT = $0000043D;
  UNKNOWN = $00000000;
  ICON = $00000006;
  SIGNATURE = $00000008;
  USERDATA = $0000000E;
  EMBEDDEDOBJECT = $00000442;
  QUERYCD = $0000000F;
  ACTIONCD = $00000010;
  ASSISTANTINFO = $00000011;
  VIEWMAPDATA = $00000012;
  VIEWMAPLAYOUT = $00000013;
  LSOBJECT = $00000014;
  HTML = $00000015;
  MIME_PART = $00000019;
  RFC822TEXT = $00000502;

// Constants for enum _MIME_ENCODING
type
  _MIME_ENCODING = TOleEnum;
const
  ENC_NONE = $000006BD;
  ENC_QUOTED_PRINTABLE = $000006BE;
  ENC_BASE64 = $000006BF;
  ENC_IDENTITY_7BIT = $000006C0;
  ENC_IDENTITY_8BIT = $000006C1;
  ENC_IDENTITY_BINARY = $000006C2;
  ENC_EXTENSION = $000006C3;

// Constants for enum _SEARCH_PATH
type
  _SEARCH_PATH = TOleEnum;
const
  SEARCH_DEPTH = $000006BB;
  SEARCH_BREADTH = $000006BC;

// Constants for enum _EMBED_TYPE
type
  _EMBED_TYPE = TOleEnum;
const
  EMBED_OBJECTLINK = $000005AC;
  EMBED_OBJECT = $000005AD;
  EMBED_ATTACHMENT = $000005AE;

// Constants for enum _RT_ELEM
type
  _RT_ELEM = TOleEnum;
const
  RTELEM_TYPE_TABLE = $00000001;
  RTELEM_TYPE_TEXTRUN = $00000003;
  RTELEM_TYPE_TEXTPARAGRAPH = $00000004;
  RTELEM_TYPE_DOCLINK = $00000005;
  RTELEM_TYPE_SECTION = $00000006;
  RTELEM_TYPE_TABLECELL = $00000007;
  RTELEM_TYPE_FILEATTACHMENT = $00000008;
  RTELEM_TYPE_OLE = $00000009;
  RTELEM_TYPE_TEXTPOSITION = $0000000A;
  RTELEM_TYPE_TEXTSTRING = $0000000B;

// Constants for enum _RP_PRIORITY
type
  _RP_PRIORITY = TOleEnum;
const
  DB_REPLICATION_PRIORITY_LOW = $0000060B;
  DB_REPLICATION_PRIORITY_MED = $0000060C;
  DB_REPLICATION_PRIORITY_HIGH = $0000060D;
  DB_REPLICATION_PRIORITY_NOTSET = $0000061D;

// Constants for enum _OE_CLASS
type
  _OE_CLASS = TOleEnum;
const
  OUTLINE_CLASS_UNKNOWN = $0000088D;
  OUTLINE_CLASS_DOCUMENT = $0000088E;
  OUTLINE_CLASS_VIEW = $0000088F;
  OUTLINE_CLASS_FORM = $00000890;
  OUTLINE_CLASS_NAVIGATOR = $00000891;
  OUTLINE_CLASS_DATABASE = $00000892;
  OUTLINE_CLASS_FRAMESET = $00000893;
  OUTLINE_CLASS_PAGE = $00000894;
  OUTLINE_CLASS_FOLDER = $00000895;

// Constants for enum _OE_TYPE
type
  _OE_TYPE = TOleEnum;
const
  OUTLINE_TYPE_URL = $00000889;
  OUTLINE_TYPE_NOTELINK = $0000088A;
  OUTLINE_TYPE_NAMEDELEMENT = $0000088B;
  OUTLINE_TYPE_ACTION = $0000088C;
  OUTLINE_OTHER_VIEWS_TYPE = $00000634;
  OUTLINE_OTHER_FOLDERS_TYPE = $00000635;
  OUTLINE_OTHER_UNKNOWN_TYPE = $00000637;

// Constants for enum _FT_TYPES
type
  _FT_TYPES = TOleEnum;
const
  FT_SCORES = $00000008;
  FT_DATE_DES = $00000020;
  FT_DATE_ASC = $00000040;
  FT_STEMS = $00000200;
  FT_THESAURUS = $00000400;
  FT_DATECREATED_DES = $00000606;
  FT_DATECREATED_ASC = $00000607;
  FT_FILESYSTEM = $00001000;
  FT_DATABASE = $00002000;
  FT_FUZZY = $00004000;

// Constants for enum _FIELD_TYPE
type
  _FIELD_TYPE = TOleEnum;
const
  FORM_OBJECTLINK = $000005AC;
  FORM_OBJECT = $000005AD;
  FORM_ATTACHMENT = $000005AE;
  FIELD_UNKNOWN = $00000000;
  FIELD_RICHTEXT = $00000001;
  FIELD_NUMBERS = $00000300;
  FIELD_DATETIMES = $00000400;
  FIELD_TEXT = $00000500;
  FIELD_TEXTMULTI = $00000501;
  FIELD_FORMULA = $00000600;
  FIELD_USERID = $00000700;

// Constants for enum _FTIDX_FREQ
type
  _FTIDX_FREQ = TOleEnum;
const
  FTINDEX_DAILY = $00000001;
  FTINDEX_SCHEDULED = $00000002;
  FTINDEX_HOURLY = $00000003;
  FTINDEX_IMMEDIATE = $00000004;

// Constants for enum _DATABASE_TYPES
type
  _DATABASE_TYPES = TOleEnum;
const
  DBTYPE_WEB_APP = $00000001;
  DBTYPE_MAILFILE = $00000002;
  DBTYPE_MAILBOX = $00000003;
  DBTYPE_SUBSCRIPTIONS = $00000004;
  DBTYPE_NEWS_SVR_PROXY = $00000005;
  DBTYPE_IMAP_SVR_PROXY = $00000006;
  DBTYPE_PORTFOLIO = $00000007;
  DBTYPE_MULTIDB_SRCH = $00000008;
  DBTYPE_LIGHT_ADDR_BOOK = $00000009;
  DBTYPE_ADDR_BOOK = $0000000A;
  DBTYPE_PERS_JOURNAL = $0000000B;
  DBTYPE_LIBRARY = $0000000C;
  DBTYPE_STANDARD = $0000000D;

// Constants for enum _CMPC_OPTS
type
  _CMPC_OPTS = TOleEnum;
const
  CMPC_ARCHIVE_DELETE_COMPACT = $00000001;
  CMPC_ARCHIVE_DELETE_ONLY = $00000002;
  CMPC_RECOVER_REDUCE_INPLACE = $00000004;
  CMPC_RECOVER_INPLACE = $00000008;
  CMPC_COPYSTYLE = $00000010;
  CMPC_DISCARD_VIEW_INDICES = $00000020;
  CMPC_ENABLE_DOCTBLBIT_OPTMZN = $00000040;
  CMPC_DISABLE_DOCTBLBIT_OPTMZN = $00000080;
  CMPC_ENABLE_RESPONSE_INFO = $00000100;
  CMPC_DISABLE_RESPONSE_INFO = $00000200;
  CMPC_IGNORE_COPYSTYLE_ERRORS = $00000400;
  CMPC_ENABLE_LARGE_UNKTBL = $00000800;
  CMPC_DISABLE_LARGE_UNKTBL = $00001000;
  CMPC_NO_LOCKOUT = $00002000;
  CMPC_MAX_4GB = $00004000;
  CMPC_CHK_OVERLAP = $00008000;
  CMPC_REVERT_FILEFORMAT = $00010000;
  CMPC_ENABLE_TRANSACTIONLOGGING = $00020000;
  CMPC_DISABLE_TRANSACTIONLOGGING = $00040000;
  CMPC_ENABLE_UNREAD_MARKS = $00080000;
  CMPC_DISABLE_UNREAD_MARKS = $00100000;

// Constants for enum _FTIDX_OPTS
type
  _FTIDX_OPTS = TOleEnum;
const
  FTINDEX_ATTACHED_FILES = $00000001;
  FTINDEX_ENCRYPTED_FIELDS = $00000002;
  FTINDEX_ALL_BREAKS = $00000004;
  FTINDEX_CASE_SENSITIVE = $00000008;
  FTINDEX_ATTACHED_BIN_FILES = $00000010;

// Constants for enum _DBACL_PRIVS
type
  _DBACL_PRIVS = TOleEnum;
const
  DBACL_CREATE_DOCS = $00000001;
  DBACL_DELETE_DOCS = $00000002;
  DBACL_CREATE_PRIV_AGENTS = $00000004;
  DBACL_CREATE_PRIV_FOLDERS_VIEWS = $00000008;
  DBACL_CREATE_SHARED_FOLDERS_VIEWS = $00000010;
  DBACL_CREATE_SCRIPT_AGENTS = $00000020;
  DBACL_READ_PUBLIC_DOCS = $00000040;
  DBACL_WRITE_PUBLIC_DOCS = $00000080;
  DBACL_REPLICATE_COPY_DOCS = $00000100;

// Constants for enum _DBFIXUP_TYPES
type
  _DBFIXUP_TYPES = TOleEnum;
const
  FIXUP_DEFAULT = $00000000;
  FIXUP_VERIFY = $00000001;
  FIXUP_QUICK = $00000002;
  FIXUP_INCREMENTAL = $00000004;
  FIXUP_TXLOGGED = $00000008;
  FIXUP_NODELETE = $00000010;
  FIXUP_REVERT = $00000020;
  FIXUP_NOVIEWS = $00000040;

// Constants for enum _DB_OPTIONS
type
  _DB_OPTIONS = TOleEnum;
const
  DBOPT_LZCOMPRESSION = $00000041;
  DBOPT_MAINTAINLASTACCESSED = $0000002C;
  DBOPT_MOREFIELDS = $00000036;
  DBOPT_NOHEADLINEMONITORS = $0000002E;
  DBOPT_NOOVERWRITE = $00000024;
  DBOPT_NORESPONSEINFO = $00000026;
  DBOPT_NOTRANSACTIONLOGGING = $0000002D;
  DBOPT_NOUNREAD = $00000025;
  DBOPT_OPTIMIZATION = $00000029;
  DBOPT_SOFTDELETE = $00000031;
  DBOPT_REPLICATEUNREADMARKSTOCLUSTER = $00000046;
  DBOPT_REPLICATEUNREADMARKSTOANY = $00000047;

// Constants for enum _DBSIGN_TYPES
type
  _DBSIGN_TYPES = TOleEnum;
const
  DBSIGN_DOC_FORM = $00000004;
  DBSIGN_DOC_VIEW = $00000008;
  DBSIGN_DOC_ICON = $00000010;
  DBSIGN_DOC_ACL = $00000040;
  DBSIGN_DOC_DATA = $00000001;
  DBSIGN_DOC_HELP = $00000100;
  DBSIGN_DOC_AGENT = $00000200;
  DBSIGN_DOC_SHAREDFIELD = $00000400;
  DBSIGN_DOC_REPLFORMULA = $00000800;
  DBSIGN_DOC_ALL = $00007FFF;

// Constants for enum _DBMOD_TYPES
type
  _DBMOD_TYPES = TOleEnum;
const
  DBMOD_DOC_FORM = $00000004;
  DBMOD_DOC_VIEW = $00000008;
  DBMOD_DOC_ICON = $00000010;
  DBMOD_DOC_ACL = $00000040;
  DBMOD_DOC_DATA = $00000001;
  DBMOD_DOC_HELP = $00000100;
  DBMOD_DOC_AGENT = $00000200;
  DBMOD_DOC_SHAREDFIELD = $00000400;
  DBMOD_DOC_REPLFORMULA = $00000800;
  DBMOD_DOC_ALL = $00007FFF;

// Constants for enum _LSXBE_ACLTYPE
type
  _LSXBE_ACLTYPE = TOleEnum;
const
  ACLTYPE_UNSPECIFIED = $00000000;
  ACLTYPE_PERSON = $00000001;
  ACLTYPE_SERVER = $00000002;
  ACLTYPE_MIXEDGROUP = $00000003;
  ACLTYPE_PERSONGROUP = $00000004;
  ACLTYPE_SERVERGROUP = $00000005;

// Constants for enum _RT_TBLSTYLE
type
  _RT_TBLSTYLE = TOleEnum;
const
  TABLESTYLE_NONE = $00000000;
  TABLESTYLE_LEFTTOP = $00000001;
  TABLESTYLE_TOP = $00000002;
  TABLESTYLE_LEFT = $00000003;
  TABLESTYLE_ALTERNATINGCOLS = $00000004;
  TABLESTYLE_ALTERNATINGROWS = $00000005;
  TABLESTYLE_RIGHTTOP = $00000006;
  TABLESTYLE_RIGHT = $00000007;
  TABLESTYLE_SOLID = $00000008;

// Constants for enum NOTES_ERRORS
type
  NOTES_ERRORS = TOleEnum;
const
  ERR_NOTES_ERROR = $80040FA0;
  ERR_SYS_OUT_OF_MEMORY = $80040FA1;
  ERR_SYS_LOAD_OUT_OF_MEM = $80040FA2;
  ERR_SYS_FILE_NOT_FOUND = $80040FA3;
  ERR_SYS_DICT_NOT_ON_PATH = $80040FA4;
  ERR_NOTES_ERROR2 = $80040FA5;
  ERR_SYS_RESOURCE_NOT_FOUND = $80040FA8;
  ERR_SYS_LOADING_RESOURCE = $80040FA9;
  ERR_SYS_LOCKING_RESOURCE = $80040FAA;
  ERR_SYS_FREEING_RESOURCE = $80040FAB;
  ERR_SYS_NOSUCH_RESOURCE = $80040FAC;
  ERR_SYS_WARNING_TITLE = $80040FB0;
  ERR_MAIL_COPEN_FAILED = $80040FBA;
  ERR_MAIL_PAOPEN_FAILED = $80040FBB;
  ERR_MAIL_LAOPEN_FAILED = $80040FBC;
  ERR_MAIL_VIM_MESSAGE = $80040FBD;
  ERR_MAIL_CANT_CREATE = $80040FBE;
  ERR_MAIL_UNKNOWN_PROP = $80040FBF;
  ERR_MAIL_INVALID_MSG = $80040FC0;
  ERR_MAIL_NOPUBLIC_GRP = $80040FC1;
  ERR_MAIL_NOPRIVATE_GRP = $80040FC2;
  ERR_MAIL_GRPCREATE_FAILED = $80040FC3;
  ERR_MAIL_GROUP_DELETED = $80040FC4;
  ERR_MAIL_NAME_REQUIRED = $80040FC5;
  ERR_NOTES_FAILURE = $80040FC6;
  ERR_NOTES_NOSUCH_VIEW = $80040FC7;
  ERR_NOTES_NOFTINDEX = $80040FC8;
  ERR_NOTES_DBCREATE_FAILED = $80040FC9;
  ERR_NOTES_DBDELETE_FAILED = $80040FCA;
  ERR_NOTES_DBOPEN_FAILED = $80040FCB;
  ERR_NOTES_INVALID_FORMULA = $80040FCC;
  ERR_NOTES_INVALID_DATE = $80040FCD;
  ERR_NOTES_COPY_FAILED = $80040FCE;
  ERR_NOTES_VIEWOPEN_FAILED = $80040FCF;
  ERR_NOTES_NOTEDEL_FAILED = $80040FD0;
  ERR_NOTES_NEXTITEM_FAILED = $80040FD1;
  ERR_NOTES_FINDITEM_FAILED = $80040FD2;
  ERR_NOTES_MODLOAD_FAILED = $80040FD3;
  ERR_NOTES_PROCFIND_FAILED = $80040FD4;
  ERR_NOTES_RTWRITE_FAILED = $80040FD5;
  ERR_NOTES_RTCONVERT_FAILED = $80040FD6;
  ERR_NOTES_FTSRCH_FAILED = $80040FD7;
  ERR_NOTES_QUERY_FAILED = $80040FD8;
  ERR_NOTES_DOCSEARCH_FAILED = $80040FD9;
  ERR_NOTES_ITEMCOPY_FAILED = $80040FDA;
  ERR_NOTES_CREATENOTE_FAILED = $80040FDB;
  ERR_NOTES_DBNOACCESS = $80040FDC;
  ERR_NOTES_UNAME_LOOKUP = $80040FDD;
  ERR_NOTES_SESOPEN_FAILED = $80040FDE;
  ERR_NOTES_DATABASE_NOTOPEN = $80040FDF;
  ERR_NOTES_SESSION_DATECONV = $80040FE0;
  ERR_NOTES_SESSION_VALNOTSUPP = $80040FE1;
  ERR_NOTES_CANT_GETNTH = $80040FE2;
  ERR_NOTES_ATTACH_FAILED = $80040FE3;
  ERR_NOTES_DETACH_FAILED = $80040FE4;
  ERR_NOTES_EXTRACT_FAILED = $80040FE5;
  ERR_NOTES_DIRSEARCH_FAILED = $80040FE6;
  ERR_NOTES_BAD_INDEX = $80040FE7;
  ERR_NOTES_NOSUCH_DIRECTORY = $80040FE8;
  ERR_CDTEXTCREATE_FAILED = $80040FE9;
  ERR_CDASSIM_FAILED = $80040FEA;
  ERR_NOT_RT_ITEM = $80040FEB;
  ERR_NOTES_FORMCOMP_FAILED = $80040FEC;
  ERR_NOTES_FORMEVAL_FAILED = $80040FED;
  ERR_NOTES_ITEMCREATE_FAILED = $80040FEE;
  ERR_NOTES_DECRYPT_FAILED = $80040FEF;
  ERR_NOTES_NOTLOCAL_IDX = $80040FF0;
  ERR_NOTES_FTIDX_FAILED = $80040FF1;
  ERR_NOTES_NOTEOPEN_FAILED = $80040FF2;
  ERR_NOTES_RENDER_FAILED = $80040FF3;
  ERR_NOTES_FILENOTFOUND = $80040FF4;
  ERR_NOTES_UNKNOWN_TYPE = $80040FF5;
  ERR_NOTES_FILEOPEN_FAILED = $80040FF6;
  ERR_NOTES_FILEWRITE_FAILED = $80040FF7;
  ERR_NOTES_DATE_NOTSET = $80040FF8;
  ERR_NOTES_NODBNAME = $80040FF9;
  ERR_NOTES_TEMPLCOPY_FAILED = $80040FFA;
  ERR_NOTES_BAD_UNID = $80040FFB;
  ERR_NOTES_UNAME_REQ = $80040FFC;
  ERR_NOTES_GETACL_FAILED = $80040FFD;
  ERR_NOTES_ACLENTRY_FAILED = $80040FFE;
  ERR_NOTES_ACL_INVALID = $80040FFF;
  ERR_NOTES_QUERYACL_FAILED = $80041000;
  ERR_NOTES_REFRESH_FAILED = $80041001;
  ERR_NOTES_OLEPKG_FAILED = $80041002;
  ERR_NOTES_TMPFILE_FAILED = $80041003;
  ERR_NOTES_READFILE_FAILED = $80041004;
  ERR_NOTES_RTRENDER_FAILED = $80041005;
  ERR_NOTES_WRONG_CLASS = $80041006;
  ERR_NOTES_INVALID_ID = $80041007;
  ERR_NOTES_INVALID_AGENT = $80041008;
  ERR_NOTES_VIEWCLONE_FAILED = $80041009;
  ERR_NOTES_NOVIEWNAME = $8004100A;
  ERR_NOTES_NEWSGROUPDB_FAILED = $8004100B;
  ERR_NOTES_NONEWSGROUPNAME = $8004100C;
  ERR_NOTES_ARC_NOT_ENABLED = $8004100D;
  ERR_NOTES_ARC_INCORRECT_PROFILE = $8004100E;
  ERR_NOTES_ARC_REQ_SRC_ACCESS = $8004100F;
  ERR_NOTES_ARC_REQ_ARC_ACCESS = $80041010;
  ERR_NOTES_ARC_INCORRECT_SVR = $80041011;
  ERR_NOTES_ARC_ARCFILE_NOT_ON_SVR = $80041012;
  ERR_NOTES_ARC_FAILED = $80041013;
  ERR_NOTES_ARC_SERVER_ARCHIVING = $80041014;
  ERR_NOTES_ARC_SETTINGS_SIGNATURE = $80041015;
  ERR_NOTES_ARC_REQ_SRC_USER_ACCESS = $80041016;
  ERR_NOTES_ARC_REQ_ARC_USER_ACCESS = $80041017;
  ERR_NOTES_ARC_PROHIBITED = $80041018;
  ERR_LOG_DBOPEN_FAILED = $80041027;
  ERR_LOG_FOPEN_FAILED = $80041028;
  ERR_LOG_CDCREATE_FAILED = $80041029;
  ERR_LOG_MAILLOG_FAILED = $8004102A;
  ERR_MEM_HVPOOLFULL = $8004102B;
  ERR_NOTES_COPYACL_FAILED = $80041036;
  ERR_NOTES_DOC_NOTINVIEW = $80041037;
  ERR_NOTES_NOFTQUERY = $80041038;
  ERR_NOTES_NOITEMNAME = $80041039;
  ERR_NOTES_NOTEUPDATE_FAILED = $8004103A;
  ERR_NOTES_NOTELOCATE_FAILED = $8004103B;
  ERR_NOTES_VIEWDEL_FAILED = $8004103C;
  ERR_LOG_CONSTRUCT_FAILED = $8004103D;
  ERR_SEM_ALLOC_FAILED = $8004103E;
  ERR_NOTES_LOOKUP_FAILED = $8004103F;
  ERR_NOTES_SEND_FAILED = $80041040;
  ERR_NOTES_NCREATE_FAILED = $80041041;
  ERR_MACRO_IDTBL_FAILED = $80041042;
  ERR_MACRO_RUN_FAILED = $80041043;
  ERR_NOTES_DBOPEN_NOTLOCAL = $80041044;
  ERR_NOTES_SIGN_NOPERM = $80041045;
  ERR_NOTES_ENCRYPT_NOPERM = $80041046;
  ERR_NOTES_ENCRYPT_FAILED = $80041047;
  ERR_NOTES_NOSENDTO = $80041048;
  ERR_LOG_EVENTPUT_FAILED = $80041049;
  ERR_LOG_INVALID_EVTYPE = $8004104A;
  ERR_LOG_INVALID_SEVERITY = $8004104B;
  ERR_NOTES_NO_NEWSLETTERDOCS = $8004104C;
  ERR_NOTES_MAILDBOPEN_FAILED = $8004104D;
  ERR_NOTES_NEWSLETTER_FAILED = $8004104E;
  ERR_NOTES_DFLT_VID_FAILED = $8004104F;
  ERR_NOTES_KEYFIND_FAILED = $80041050;
  ERR_NOTES_RTTEXT_FAILED = $80041051;
  ERR_NOTES_RTDOCLINK_FAILED = $80041052;
  ERR_NOTES_NOPERM_DISKIO = $80041053;
  ERR_NOTES_NOPERM_SIGN = $80041054;
  ERR_NOTES_NOPERM_ENCRYPT = $80041055;
  ERR_NOTES_NOPERM_ENVIRON = $80041056;
  ERR_NOTES_NOPERM_ANY = $80041057;
  ERR_NOTES_NOSERV_DB = $80041058;
  ERR_NOTES_INVALID_DB = $80041059;
  ERR_NOTES_INVALID_CREDEL = $8004105A;
  ERR_NOTES_INVALID_DOC = $8004105B;
  ERR_NOTES_DBS_MUST_MATCH = $8004105C;
  ERR_NOTES_RESPONSE_FAILED = $8004105D;
  ERR_NOTES_NOLISTS = $8004105E;
  ERR_NOTES_CONTAINS_FAILED = $8004105F;
  ERR_NOTES_MUSTBE_STRING = $80041060;
  ERR_NOTES_DESVIEW_FAILED = $80041061;
  ERR_NOTES_ITEMARR_FAILED = $80041062;
  ERR_NOTES_SRVSEARCH_FAILED = $80041063;
  ERR_NOTES_UNKNOWN_SRCHTYPE = $80041064;
  ERR_NOTES_MUSTCALL_FIRSTDB = $80041065;
  ERR_NOTES_ALLDOCS_FAILED = $80041066;
  ERR_NOTES_ITYPENOT_TEXT = $80041067;
  ERR_NOTES_INVALID_ITYPE = $80041068;
  ERR_NOTES_NOSUCH_FOLDER = $80041069;
  ERR_NOTES_ADDRBOOK_FAILED = $8004106A;
  ERR_NOTES_NOTCONTEXT_DB = $8004106B;
  ERR_NOTES_LTDACCESS_FAILED = $8004106C;
  ERR_NOTES_LTDUPDATE_FAILED = $8004106D;
  ERR_NOTES_BADVIEW_VERSION = $8004106E;
  ERR_NOTES_NEED_ADT = $8004106F;
  ERR_NOTES_ACLWRITE_FAILED = $80041070;
  ERR_NOTES_RENAME_FAILED = $80041071;
  ERR_NOTES_NOSUCH_ROLENAME = $80041072;
  ERR_NOTES_PRIVNAME_FAILED = $80041073;
  ERR_NOTES_READPRIV_FAILED = $80041074;
  ERR_NOTES_DELPRIV_FAILED = $80041075;
  ERR_NOTES_DELENTRY_FAILED = $80041076;
  ERR_NOTES_NOSERV_EVENTS = $80041077;
  ERR_NOTES_INVALID_ACLENTRYNAME = $80041078;
  ERR_NOTES_ENTRYNAME_FAILED = $80041079;
  ERR_NOTES_NOTLOCAL_REPL = $8004107A;
  ERR_NOTES_REPL_FAILED = $8004107B;
  ERR_NOTES_NOTLOCAL_COMPACT = $8004107C;
  ERR_NOTES_COMPACT_FAILED = $8004107D;
  ERR_NOTES_TIMEADJUST_FAILED = $8004107E;
  ERR_NOTES_NOSUCH_EMBED = $8004107F;
  ERR_NOTES_NOSUCH_EOFILE = $80041080;
  ERR_NOTES_NOSUCH_PATH = $80041081;
  ERR_NOTES_EMBEDARR_FAILED = $80041082;
  ERR_NOTES_NOADDRS_FOUND = $80041083;
  ERR_NOTES_DUP_ROLENAME = $80041084;
  ERR_NOTES_CANTCREATE_FOLDER = $80041085;
  ERR_NOTERENDER_FAILED = $80041086;
  ERR_NOFROMFIELD = $80041087;
  ERR_TEXTLIST_FAILED = $80041088;
  ERR_NOTES_NOTA_DOCUMENT = $80041089;
  ERR_NOTES_VALIDATE_FAILED = $8004108A;
  ERR_NOTES_ABSTRACT_BUFFER = $8004108B;
  ERR_NOTES_ABSTRACTING_TEXT = $8004108C;
  ERR_NOTES_DESAGENT_FAILED = $8004108D;
  ERR_NOTES_MIXED_ARRAY = $8004108E;
  ERR_NOTES_INVALID_DOCLINK = $8004108F;
  ERR_TEXTLIST_BAD_INPUT = $80041090;
  ERR_NOTES_CANTREMOVE = $80041091;
  ERR_NOTES_CANTENCRYPT = $80041092;
  ERR_NOTES_CANTCLOSEDB = $80041093;
  ERR_NOTES_CANTRUN_OLEOBJ = $80041094;
  ERR_NOTES_CANTSHOW_OLEOBJ = $80041095;
  ERR_NOTES_NOEMBEDDED_OBJ = $80041096;
  ERR_NOTES_NOSUCH_EMBEDCLASS = $80041097;
  ERR_NOTES_CANTGET_DBSUMMARY = $80041098;
  ERR_NOTES_CANTCOPY_ITEMTYPE = $80041099;
  ERR_NOTES_NEED_DB = $8004109A;
  ERR_NOTES_NEED_NOTE = $8004109B;
  ERR_NOTES_CANT_LINK_OLE1 = $8004109C;
  ERR_NOTES_ROLENAME_TOOBIG = $8004109D;
  ERR_NOTES_EOARRAY_FAILED = $8004109E;
  ERR_NOTES_ATTACHINFO_FAILED = $8004109F;
  ERR_NOTES_QUOTAINFO_FAILED = $800410A0;
  ERR_NOTES_DOCNOTSAVED = $800410A1;
  ERR_NOTES_ACLNEXT_INVALID = $800410A2;
  ERR_NOTES_NOTAFILE = $800410A3;
  ERR_NOTES_CANTFIND_ATTACHMENT = $800410A4;
  ERR_NOTES_NOSUCH_VERB = $800410A5;
  ERR_NOTES_DOVERB_FAILED = $800410A6;
  ERR_NOTES_INVALID_ADTTYPE = $800410A7;
  ERR_NOTES_FTQUERY_FAILED = $800410A8;
  ERR_NOTES_NOSUCH_DBID = $800410A9;
  ERR_NOTES_OPENBYRID_FAILED = $800410AA;
  ERR_NOTES_BAD_UNPROCFT = $800410AB;
  ERR_AGENT_NO_RECURSION = $800410AC;
  ERR_NOTES_CANTGET_MAILSERVER = $800410AD;
  ERR_NOTES_BAD_NOTEID = $800410AE;
  ERR_NOTES_DBSECURITY = $800410AF;
  ERR_NOTES_DELETE_AGENT = $800410B0;
  ERR_NOTES_RUN_AGENT = $800410B1;
  ERR_NOTES_NOSUCH_DOCINDEX = $800410B2;
  ERR_NOTES_BAD_SOURCE_CLASS = $800410B3;
  ERR_NOTES_CANT_CHANGE_DEFACL = $800410B4;
  ERR_NOTES_LINKNOCLASS = $800410B5;
  ERR_NOTES_CANTDO_ARRAYOFARRAY = $800410B6;
  ERR_NOTES_SESSION_CLOSED = $800410B7;
  ERR_NOTES_CANTOPEN_URLDB = $800410B8;
  ERR_NOTES_NEED_URL = $800410B9;
  ERR_NOTES_INVALID_URL = $800410BA;
  ERR_NOTES_INVALID_URLHEADER = $800410BB;
  ERR_NOTES_NOSUCH_URLHEADER = $800410BC;
  ERR_NOTES_NOUNPROC_DOCS = $800410BD;
  ERR_NOTES_EMBED_FAILED = $800410BE;
  ERR_NOTES_NODEL_CURRENTDB = $800410BF;
  ERR_NOTES_INVALID_TIMEEXPR = $800410C0;
  ERR_NOTES_RECURSIVE_RENDER = $800410C1;
  ERR_NOTES_INVALID_ITEM = $800410C2;
  ERR_NOTES_NOMOVETO_PRIV1STUSE = $800410C3;
  ERR_NOTES_SAMESRV_REPLICA = $800410C4;
  ERR_NOTES_CANT_SIGN = $800410C5;
  ERR_NOTES_NO_MATCH = $800410C6;
  ERR_NOTES_AMBIGUOUS_MATCH = $800410C7;
  ERR_NOTES_DBALREADY_OPEN = $800410C8;
  ERR_NOTES_OLE_NOTAVAIL = $800410C9;
  ERR_NOTES_ARRAY_NOGOOD = $800410CA;
  ERR_NOTES_REGARG_NOTGIVEN = $800410CB;
  ERR_NOTES_MISSING_CERTID = $800410CC;
  ERR_NOTES_NOCERT_CTX = $800410CD;
  ERR_NOTES_REGFAILED = $800410CE;
  ERR_NOTES_SRVREGFAILED = $800410CF;
  ERR_NOTES_CERTREGFAILED = $800410D0;
  ERR_NOTES_XCERTFAILED = $800410D1;
  ERR_NOTES_RECERTFAILED = $800410D2;
  ERR_NOTES_NOSUCH_BOOL = $800410D3;
  ERR_NOTES_CANTSWITCH_ID = $800410D4;
  ERR_NOTES_NOSUCH_MAILPATH = $800410D5;
  ERR_NOTES_BAD_IDFILE = $800410D6;
  ERR_NOTES_CANTADD_USER = $800410D7;
  ERR_NOTES_CANTADD_SERV = $800410D8;
  ERR_NOTES_CANTADD_CERT = $800410D9;
  ERR_NOTES_NOCURRENT_AGENT = $800410DA;
  ERR_NOTES_AGENTLOG_FAILED = $800410DB;
  ERR_NOTES_NOSUCH_CERTIDTYPE = $800410DC;
  ERR_NOTES_NOCURRENT_FTRESULT = $800410DD;
  ERR_NOTES_IDTBL_FAILED = $800410DE;
  ERR_NOTES_PROF_ARG_MISSING = $800410DF;
  ERR_NOTES_NOSUCH_PROFILE = $800410E0;
  ERR_NOTES_PROFUPDATE_FAILED = $800410E1;
  ERR_NOTES_PROFDELETE_FAILED = $800410E2;
  ERR_NOTES_NOSUCH_ARG = $800410E3;
  ERR_NOTES_WRONG_UNID_LEN = $800410E4;
  ERR_NOTES_DESFORM_FAILED = $800410E5;
  ERR_NOTES_FORMDEL_FAILED = $800410E6;
  ERR_NOTES_NOCLOSE_CURRDB = $800410E7;
  ERR_NOTES_FREETIME_FAILED = $800410E8;
  ERR_NOTES_UNIFORM_FAILED = $800410E9;
  ERR_NOTES_GETOPTION_FAILED = $800410EA;
  ERR_NOTES_MARKREAD_FAILED = $800410EB;
  ERR_NOTES_MARKUNREAD_FAILED = $800410EC;
  ERR_NOTES_MULTIDB_FAILED = $800410ED;
  ERR_NOTES_ADDPROF_FAILED = $800410EE;
  ERR_NOTES_ULOOKUP_FAILED = $800410EF;
  ERR_NOTES_INVALID_OBJECT = $800410F0;
  ERR_NOTES_STAMP_FAILED = $800410F1;
  ERR_NOTES_BAD_ORGUNIT = $800410F2;
  ERR_NOTES_BAD_FTSORT = $800410F3;
  ERR_NOTES_NOTCONTEXT_COLLEC = $800410F4;
  ERR_NOTES_ECLACCESS_FAILED = $800410F5;
  ERR_NOTES_W32DOM_FAILED = $800410F6;
  ERR_NOTES_W32DOM_NOFIRSTUSER = $800410F7;
  ERR_NOTES_W32DOM_BADPLATFORM = $800410F8;
  ERR_NOTES_W32DOM_BADNETAPI32 = $800410F9;
  ERR_NOTES_W32DOM_DOMAIN_CONTROLLER = $800410FA;
  ERR_NOTES_TOOMANY_SORT_KEYS = $800410FB;
  ERR_NOTES_BAD_KEYTYPE = $800410FC;
  ERR_NOTES_CANT_SELF_ASSIMILATE = $800410FD;
  ERR_NOTES_CANT_SELF_COPY = $800410FE;
  ERR_NOTES_POP3_FAILED = $800410FF;
  ERR_NOTES_ARRCREATE_FAILED = $80041100;
  ERR_NOTES_AGSAVE_FAILED = $80041101;
  ERR_NOTES_CANTREMOVE_AGC = $80041102;
  ERR_NOTES_CANTENCRYPT_AGC = $80041103;
  ERR_NOTES_RTSTYLE_CREATEFAILED = $80041104;
  ERR_NOTES_RTSTYLE_APPENDFAILED = $80041105;
  ERR_NOTES_RTSTYLE_BADFONT = $80041106;
  ERR_NOTES_NO_CONTEXTDB = $80041107;
  ERR_NOTES_NULL_APPENDLIST = $80041108;
  ERR_NOTES_NOSUCH_JAVA_TYPE = $80041109;
  ERR_NOTES_INVALID_JARRAY = $8004110A;
  ERR_NOTES_RTSTYLE_BADBOOL = $8004110B;
  ERR_NOTES_RTSTYLE_BADFONTSIZE = $8004110C;
  ERR_NOTES_RTSTYLE_BADCOLOR = $8004110D;
  ERR_NOTES_RTSTYLE_BADEFFECT = $8004110E;
  ERR_NOTES_NOTREMOTE_DB = $8004110F;
  ERR_NOTES_RTITEM_EXISTS = $80041110;
  ERR_NOTES_NOFORM = $80041111;
  ERR_NOTES_NOTA_VECTOR = $80041112;
  ERR_NOTES_SERVER_SWITCH = $80041113;
  ERR_NOTES_DBDIR_THREAD = $80041114;
  ERR_NOTES_ACL_CONSTRUCTOR_FAILED = $8004111C;
  ERR_NOTES_ACL_INVALID_TYPE = $8004111D;
  ERR_NOTES_INVALID_TIMEZONE = $8004111F;
  ERR_NOTES_VIEW_STATS = $80041120;
  ERR_NOTES_VIEW_ENTRY_READ = $80041121;
  ERR_NOTES_DBFOLDERREFS_NOT_SUPPORTED = $80041122;
  ERR_NOTES_DBFOLDERREFS_NOT_ENABLED = $80041123;
  ERR_NOTES_VE_NO_SEPARATOR = $80041124;
  ERR_NOTES_STRING_TOO_LONG = $80041125;
  ERR_NOTES_VIEW_FMT_READ = $80041126;
  ERR_NOTES_VIEW_INVALID_COLUMN = $8004112C;
  ERR_NOTES_NO_COLLECTION = $80041115;
  ERR_NOTES_NOT_IN_SESSION = $80041116;
  ERR_NOTES_INVALID_NAME = $80041117;
  ERR_NOTES_DELETED = $80041118;
  ERR_NOTES_NOT_LOCAL = $80041119;
  ERR_NOTES_INVALID_RANGE = $8004111A;
  ERR_NOTES_OBJECT_NOT_FOUND = $8004111B;
  ERR_NOTES_ITEM_CONVERT = $8004111E;
  ERR_NOTES_VIEW_BAD_ENTRY = $80041127;
  ERR_NOTES_VIEWNAV_BAD_MAX = $80041128;
  ERR_NOTES_VIEWNAV_BAD_POS = $80041129;
  ERR_NOTES_VIEWNAV_BAD_PARENT = $8004112A;
  ERR_NOTES_NOT_IMPLEMENTED = $8004112B;
  ERR_NOTES_RTPSTYLE_APPENDFAILED = $8004112D;
  ERR_NOTES_RTPSTYLE_TOOMANYTABS = $8004112E;
  ERR_NOTES_RTPSTYLE_OUTOFRANGE = $8004112F;
  ERR_NOTES_RTPSTYLE_BADALIGN = $80041130;
  ERR_NOTES_RTPSTYLE_BADSPACING = $80041131;
  ERR_NOTES_RTPSTYLE_BADPAGINATE = $80041132;
  ERR_NOTES_ACL_MISSING = $80041133;
  ERR_NOTES_SESSION_MISSING = $80041134;
  ERR_NOTES_DATABASE_MISSING = $80041135;
  ERR_NOTES_DOCUMENT_MISSING = $80041136;
  ERR_NOTES_VIEW_MISSING = $80041137;
  ERR_NOTES_PARENT_MISSING = $80041138;
  ERR_NOTES_NOT_RICHTEXT = $80041139;
  ERR_NOTES_PSTYPE_MISSING = $8004113A;
  ERR_NOTES_REMOVEALL_FAILED = $8004113B;
  ERR_NOTES_ENTRY_NOT_FROM_COLLECTION = $8004113C;
  ERR_NOTES_NOTE_NOT_FROM_COLLECTION = $8004113D;
  ERR_NOTES_ADDENTRY_DUP = $8004113E;
  ERR_NOTES_ADDENTRY_FAILED = $8004113F;
  ERR_MACRO_SYNCH_ENABLE_FAILED = $80041140;
  ERR_NOTES_SYNCH_RUN_AGENT = $80041141;
  ERR_NOTES_SYNCH_NOOLE = $80041142;
  ERR_NOTES_RTPSTYLE_BADTABTYPE = $80041143;
  ERR_NOTES_GETALLENTRIES_FAILED = $80041144;
  ERR_NOTES_EXECUTESETUP_FAILED = $80041145;
  ERR_NOTES_MAXDBSIZE_EXCEEDED = $80041146;
  ERR_NOTES_INVALID_NAV = $80041147;
  ERR_NOTES_SVRACCESS_FAILED = $80041149;
  ERR_NOTES_NOT_IN_VIEW = $8004114A;
  ERR_NOTES_NOT_IN_DB = $8004114B;
  ERR_NOTES_PROP_NOT_AVAIL = $8004114C;
  ERR_NOTES_NOT_IN_ACL = $8004114D;
  ERR_NOTES_NO_LOGS_OPEN = $8004114E;
  ERR_NOTES_CACHE_SZ_INVALID = $8004114F;
  ERR_NOTES_VIEW_ENTRY_REMOVED = $80041150;
  ERR_NOTES_VIEW_ENTRY_DELETED = $80041151;
  ERR_NOTES_DOCUMENT_DELETED = $80041152;
  ERR_NOTES_SYNCH_INVALIDOP = $80041153;
  ERR_NOTES_CREATEOUTLINE_FAILED = $80041154;
  ERR_NOTES_HTML_GENFAILED = $80041155;
  ERR_NOTES_CREATE_DOCCOLL_FAILED = $80041156;
  ERR_NOTES_EXECUTESETUP_FAILED2 = $80041157;
  ERR_NOTES_CANTUPDATE_FOLDER = $80041158;
  ERR_NOTES_RTITEM_MISSING = $80041159;
  ERR_NOTES_NO_AUTHORIZATION = $8004115A;
  ERR_NOTES_NAME_MISSING = $8004115B;
  ERR_NOTES_ITEM_MISSING = $8004115C;
  ERR_NOTES_DATERANGE_MISSING = $8004115D;
  ERR_NOTES_VIEWENTRY_MISSING = $8004115E;
  ERR_NOTES_VIEWENTRY_OR_DOC_MISSING = $8004115F;
  ERR_NOTES_OUTLINE_MISSING = $80041160;
  ERR_NOTES_DATETIME_MISSING = $80041161;
  ERR_NOTES_VNAV_CAT_PARENT = $80041162;
  ERR_NOTES_VNAV_CAT_GOTO = $80041163;
  ERR_NOTES_INVALID_SIZE = $80041164;
  ERR_NOTES_REGSERVER_NOTSET = $80041165;
  ERR_NOTES_NOT_ATTACHMENT = $80041166;
  ERR_NOTES_URL_NOT_RESOLVED = $80041167;
  ERR_NOTES_INVALID_IOR = $80041168;
  ERR_NOTES_GETIOR_FAILED = $80041169;
  ERR_NOTES_INVALID_DATESPEC = $8004116A;
  ERR_NOTES_INVALID_TIMESPEC = $8004116B;
  ERR_NOTES_CANTSAVE_CURRENTAGENT = $8004116C;
  ERR_NOTES_CANTDISABLE_MANUALAGENT = $8004116D;
  ERR_NOTES_BAD_ENTRYDOC = $8004116E;
  ERR_NOTES_UNINITIALIZED_THREAD = $8004116F;
  ERR_NOTES_INVALIDATED_OBJECT = $80041170;
  ERR_NOTES_ACL_ROLE_INVALID = $80041171;
  ERR_NOTES_ARG_DELETED = $80041172;
  ERR_NOTES_ACLENTRY_MISSING = $80041173;
  ERR_NOTES_INVALID_DATE_NOARG = $80041174;
  ERR_NOTES_ADDDOC_DUP = $80041175;
  ERR_NOTES_BADDBSIZE = $80041176;
  ERR_NOTES_BAD_OUTLINE_ENTRY = $80041177;
  ERR_NOTES_CANTMODIFY_REMOTE_AGENT = $80041178;
  ERR_NOTES_CANT_ADD_CHILD_BEFORE_ENTRY = $80041179;
  ERR_NOTES_NULL_REF_ENTRY = $8004117A;
  ERR_NOTES_REF_ENTRY_NOTINOUTLINE = $8004117B;
  ERR_NOTES_OUTLINE_ADDENTRY_FAILED = $8004117C;
  ERR_NOTES_OUTLINE_MOVEENTRY_FAILED = $8004117D;
  ERR_NOTES_OUTLINE_REMOVEENTRY_FAILED = $8004117E;
  ERR_NOTES_INVALID_PLACEHOLDER_PARENT = $8004117F;
  ERR_NOTES_INVALID_REPLICATION_PRIORITY = $80041180;
  ERR_NOTES_OUTLINE_INVALID_PRIVATE_VIEW = $80041181;
  ERR_NOTES_NOT_SUPPORTED = $80041182;
  ERR_NOTES_NEED_HDRNAME = $80041183;
  ERR_NOTES_NEED_MIMEENT = $80041184;
  ERR_NOTES_ITEM_EXISTS = $80041185;
  ERR_NOTES_INVALID_USERNAME_PASSWD = $80041186;
  ERR_NOTES_INVALID_USERNAME = $80041187;
  ERR_NOTES_SERVER_ACCESS_DENIED = $80041188;
  ERR_NOTES_NO_SERVER = $80041189;
  ERR_NOTES_SESSION_NOT_INIT = $8004118B;
  ERR_NOTES_SESSION_IS_INIT = $8004118C;
  ERR_NOTES_AGENT_SESSION = $8004118D;
  ERR_NOTES_INVALID_CREDENTIALS = $8004118E;
  ERR_NOTES_INVALID_LTPA = $8004118F;
  ERR_NOTES_CANT_GET_THAT = $80041190;
  ERR_NOTES_ARRAY_MISMATCH = $80041191;
  ERR_NOTES_RTCTX_POSITION_INVALID = $80041192;
  ERR_NOTES_RTTABLE_APPENDFAILED = $80041193;
  ERR_NOTES_RTTBL_MAXROWS = $80041194;
  ERR_NOTES_RTTBL_MAXCOLS = $80041195;
  ERR_NOTES_RTTBL_MINSIZE = $80041196;
  ERR_NOTES_RTCTX_POSITION_UNDEF = $80041197;
  ERR_NOTES_RTRNG_RESTRICTED_OPERATION = $80041198;
  ERR_NOTES_RTEDIT_FAILED = $80041199;
  ERR_NOTES_RTELEM_TYPEUNKNOWN = $8004119A;
  ERR_NOTES_RT_FIRSTFINISHINSERT = $8004119B;
  ERR_NOTES_METHODNOTAVAILABLE = $8004119C;
  ERR_NOTES_INVALID_VALUE = $8004119D;
  ERR_NOTES_DXLEXPORTER_INPUT_OBJECT = $8004119E;
  ERR_NOTES_DXLEXPORTER_OUTPUT_OBJECT = $8004119F;
  ERR_NOTES_ANADMINP_NOSUCH_CAORG = $800411A0;
  ERR_NOTES_ANADMINP_UNKNOWN = $800411A1;
  ERR_NOTES_RTNAV_INVALID_TYPE = $800411A2;
  ERR_NOTES_TIMEMERGE_FAILED = $800411A3;
  ERR_NOTES_GETFONT_FAILED = $800411A4;
  ERR_NOTES_DXLIMPORTER_INPUT_OBJECT = $800411A5;
  ERR_NOTES_DXLIMPORTER_OUTPUT_OBJECT = $800411A6;
  ERR_NOTES_XSLT_INPUT_OBJECT = $800411A7;
  ERR_NOTES_XSLT_OUTPUT_OBJECT = $800411A8;
  ERR_NOTES_XSLT_STYLESHEET_OBJECT = $800411A9;
  ERR_NOTES_DXLIMPORTER_FAILED = $800411AA;
  ERR_NOTES_DXLIMPORTER_INVALID_OPTION = $800411AB;
  ERR_NOTES_XML_PIPING = $800411AC;
  ERR_NOTES_RT_FIRSTFINISHSECTION = $800411AD;
  ERR_NOTES_DB_POLICYNOTFOUND = $800411AE;
  ERR_NOTES_DB_ARCHIVEINFO = $800411AF;
  ERR_NOTES_SS_ALREADYINUSE = $800411B0;
  ERR_NOTES_FILEREADONLY = $800411B1;
  ERR_NOTES_FILE_NONAME = $800411B2;
  ERR_NOTES_NOTBYTEARRAY = $800411B3;
  ERR_NOTES_NULLSTRING = $800411B4;
  ERR_NOTES_NOTHOTSPOTLINK = $800411B5;
  ERR_NOTES_BADTBLSTYLE = $800411B6;
  ERR_NOTES_ME_ILLEGALXNOTES = $800411B7;
  ERR_NOTES_NON_BODY_MIME = $800411B8;
  ERR_NOTES_NOSUCH_MAILSYSTEM = $800411B9;
  ERR_NOTES_NOSUCH_MAILOWNERACCESS = $800411BA;
  ERR_NOTES_NOSUCH_ROAMINGCLEANUPSETTING = $800411BB;
  ERR_NOTES_BADMAILFILEACTION = $800411BC;
  ERR_NOTES_SMSDEL_FAILED = $800411BD;
  ERR_NOTES_NOSUCH_GROUP = $800411BE;
  ERR_NOTES_SAXPARSER_INPUT_OBJECT = $800411BF;
  ERR_NOTES_SAXPARSER_OUTPUT_OBJECT = $800411C0;
  ERR_NOTES_DOMPARSER_INPUT_OBJECT = $800411C1;
  ERR_NOTES_DOMPARSER_OUTPUT_OBJECT = $800411C2;
  ERR_NOTES_SS_CHARSET_UNKNOWN = $800411C3;
  ERR_NOTES_ATTRIBUTE_NOT_FOUND = $800411C4;
  ERR_NOTES_INVALID_XML_OUTPUT_FORMAT = $800411C5;
  ERR_NOTES_OUTPUT_OBJECT_NOT_SET = $800411C6;
  ERR_NOTES_RTRNG_USESTANDARDNAV = $800411C7;
  ERR_NOTES_POLICY_DOC_FAILED = $800411C8;
  ERR_NOTES_RTNAV_MUSTBETYPETEXT = $800411C9;
  ERR_NOTES_RTNAV_NOOFFSETWITHAFTER = $800411CA;
  ERR_NOTES_NOT_HIER_MAIL_SERVERS = $800411CB;
  ERR_NOTES_SERVER_MUST_BE_R5 = $800411CC;
  ERR_NOTES_NO_CREATE_REPLICA = $800411CD;
  ERR_NOTES_BAD_REPLICA_LIST = $800411CE;
  ERR_NOTES_MAIL_NOMOVE_SAMEPATH = $800411CF;
  ERR_NOTES_NOSUCH_ROAMINGUSER = $800411D0;
  ERR_NOTES_NOT_HIERARCHICAL_SERVER = $800411D1;
  ERR_NOTES_NOT_IN_SAME_DOMAIN = $800411D2;
  ERR_NOTES_ROAMING_NOMOVE_SAMEPATH = $800411D3;
  ERR_NOTES_INVALID_APPROVAL_REQUEST = $800411D4;
  ERR_NOTES_PERSON_NOT_FOUND = $800411D5;
  ERR_NOTES_XMLREFORMATTER_INPUT_OBJECT = $800411D6;
  ERR_NOTES_XMLREFORMATTER_OUTPUT_OBJECT = $800411D7;
  ERR_NOTES_FIRST_ARG_NOT_DOMNODE = $800411D8;
  ERR_NOTES_SECOND_ARG_NOT_DOMNODE = $800411D9;
  ERR_NOTES_NULL_DOMNODE = $800411DA;
  ERR_NOTES_UNSUPPORTED_PLATFORM_OP = $800411DB;
  ERR_NOTES_FIRST_ARG_NOT_ATTR_NODE = $800411DC;
  ERR_NOTES_FIXUP_FAILED = $800411DD;
  ERR_NOTES_NOTLOCAL_FIXUP = $800411DE;
  ERR_NOTES_MUST_BE_NOTESDATETIME = $800411DF;
  ERR_NOTES_DOM_OPERATION = $800411E0;
  ERR_NOTES_CANTHASH = $800411E1;
  ERR_NOTES_UNABLETOLOCK = $800411E2;
  ERR_NOTES_CANTLOCK_NOTEMODIFIED = $800411E3;
  ERR_NOTES_CANTUNLOCK = $800411E4;
  ERR_NOTES_DATATOOBIG = $800411E5;
  ERR_NOTES_DATATYPETOOBIG = $800411E6;
  ERR_NOTES_DATATYPENOMATCH = $800411E7;
  ERR_NOTES_XMLREFORMATTER_CONNECTION = $800411E8;
  ERR_NOTES_XMLREFORMATTER_FAILED = $800411E9;
  ERR_NOTES_ACL_ADMINREADERAUTHOR_FAILED = $800411EA;
  ERR_NOTES_ACL_ADMINNAMES_FAILED = $800411EB;
  ERR_NOTES_ADMINSERVER_FAILED = $800411EC;
  ERR_NOTES_NOFIXEDSTRINGS = $800411ED;
  ERR_NOTES_INVALID_VARIANT_DATATYPE = $800411EE;
  ERR_NOTES_COMPACT_INVALID_OPTION = $800411EF;
  ERR_NOTES_COMPACT_UNSUPPORTED_OPTION = $800411F0;
  ERR_NOTES_BADPWDCHKSETTING = $800411F1;
  ERR_NOTES_CANT_SIGN_DATABASE = $800411F2;
  ERR_NOTES_LOCKED = $800411F3;
  ERR_NOTES_INVALID_NAMELIST = $800411F4;
  ERR_NOTES_CANTCONNECT_MASTERLOCKDB = $800411F5;
  ERR_NOTES_NOMASTERLOCKDB_DOC = $800411F6;
  ERR_NOTES_NOMASTERLOCKDB_DESIGN = $800411F7;
  ERR_NOTES_INVALID_VALIDATION_OPTION = $800411F8;
  ERR_NOTES_DXLEXPORTER_FAILED = $800411F9;
  ERR_NOTES_DOMPARSER_FAILED = $800411FA;
  ERR_NOTES_SAXPARSER_FAILED = $800411FB;
  ERR_NOTES_XSLTRANSFORMER_FAILED = $800411FC;
  ERR_NOTES_EXTENDEDINFO_FAILED = $800411FD;
  ERR_NOTES_NOTA_JBOOLEAN = $800411FE;
  ERR_NOTES_ADMINSERVER_EXISTS = $800411FF;
  ERR_NOTES_SSOTOKEN_GEN = $80041200;
  ERR_NOTES_SSOTOKEN_AUTH = $80041201;
  ERR_NOTES_SSOCONFIG = $80041202;
  ERR_NOTES_SSOTOKEN_INV = $80041203;
  ERR_NOTES_SSOTOKEN_EXP = $80041204;
  ERR_NOTES_SERVERCONFIG = $80041205;
  ERR_NOTES_COOKIE_BADADDR = $80041206;
  ERR_NOTES_COOKIE_EXP = $80041207;
  ERR_NOTES_COOKIE_INV = $80041208;
  ERR_NOTES_PREVIEW_RESTRICTED = $80041209;
  ERR_NOTES_INCOMPATIBLE_VERSION = $8004120A;
  ERR_NOTES_SS_ALIEN_THREAD_ACCESS = $8004120B;
  ERR_NOTES_SS_TEXTLINE_TOO_LONG = $8004120C;
  ERR_NOTES_SS_INCOMPATIBLE_CHARSETS = $8004120D;
  ERR_NOTES_INVALID_DBSIZE = $8004120E;
  ERR_NOTES_NOSUCH_DESIGN = $8004120F;
  ERR_NOTES_EMBED_IN_PROGRESS = $80041210;
  ERR_NOTES_EMBED_NOT_STARTED = $80041211;
  ERR_NOTES_INVALID_RESOLVER_RETVAL = $80041212;
  ERR_NOTES_DB_MARKED_FOR_DELETE = $80041213;
  ERR_NOTES_NOTE_NOT_IN_DATABASE = $80041214;
  ERR_NOTES_CANNOT_SERIALIZE_DOM_TREE = $80041215;
  ERR_NOTES_NO_CLUSTER_DB = $80041216;
  ERR_NOTES_NEGATIVE_VALUE = $80041217;
  ERR_NOTES_USER_NO_SERVER = $80041218;
  ERR_NOTES_DELETE_NET_USER_FALIED = $80041219;
  ERR_NOTES_NULL_SERVER_NAME = $8004121A;
  ERR_NOTES_INVALID_VIEW_TEMPLATE = $8004121B;
  ERR_NOTES_ILLEGAL_SERVER_NAME = $8004121C;
  ERR_NOTES_NOT_A_DATE_ITEM = $8004121D;
  ERR_NOTES_RTTBL_BADCOLWIDTH = $8004121E;
  ERR_NOTES_INVALID_RECEIVEDITEM = $8004121F;
  ERR_NOTES_NOTA_JINTEGER = $80041220;
  ERR_NOTES_DOMOP_INDEX_SIZE = $80041221;
  ERR_NOTES_DOMOP_XMLSTRING_SIZE = $80041222;
  ERR_NOTES_DOMOP_HIERARCHY_REQUEST = $80041223;
  ERR_NOTES_DOMOP_WRONG_DOCUMENT = $80041224;
  ERR_NOTES_DOMOP_INVALID_CHARACTER = $80041225;
  ERR_NOTES_DOMOP_NO_DATA_ALLOWED = $80041226;
  ERR_NOTES_DOMOP_NO_MODIFY_ALLOWED = $80041227;
  ERR_NOTES_DOMOP_NOT_FOUND = $80041228;
  ERR_NOTES_DOMOP_NOT_SUPPORTED = $80041229;
  ERR_NOTES_DOMOP_INUSE_ATTRIBUTE = $8004122A;
  ERR_NOTES_DOMOP_INVALID_STATE = $8004122B;
  ERR_NOTES_DOMOP_SYNTAX = $8004122C;
  ERR_NOTES_DOMOP_INVALID_MODIFICATION = $8004122D;
  ERR_NOTES_DOMOP_NAMESPACE = $8004122E;
  ERR_NOTES_DOMOP_INVALID_ACCESS = $8004122F;
  ERR_NOTES_NOSUCH_DBSIGN = $80041230;
  ERR_NOTES_FORMEDIT_FAILED = $80041231;
  ERR_NOTES_ME_DUPLICATEXNOTES_NAME = $80041232;
  ERR_NOTES_ME_MISSINGXNOTES_NAME = $80041233;
  ERR_NOTES_NO_OLECONTEXT = $80041234;
  ERR_NOTES_CANTSIGN_BYNAME = $80041235;
  ERR_NOTES_ADMINSERVER_NEXIST = $80041236;
  ERR_NOTES_COMPACT_I_REQ_C = $80041237;
  ERR_NOTES_UNDELETENONPOSITIVEVALUE = $80041238;
  ERR_NOTES_XML_PROCESS_ERROR = $80041239;
  ERR_NOTES_XML_PIPELINE_LOOP_ERROR = $8004123A;
  ERR_NOTES_STREAM_HAS_BEEN_USED = $8004123B;
  ERR_NOTES_STREAM_HAS_MIXED_CONTENT = $8004123C;
  ERR_NOTES_XML_PROCESSOR_CANNOT_BE_USED = $8004123D;
  ERR_NOTES_DB_BADINDEXFREQUENCY = $80041240;
  ERR_NOTES_LONG_OVERFLOW = $80041241;
  ERR_NOTES_INVALID_CREDEL_TEMPLATE = $80041242;
  ERR_NOTES_BADPLCYSETSTYPE = $80041243;
  ERR_NOTES_CANTRETNOTEID = $80041245;
  ERR_NOTES_STALE_COLLECTION = $80041246;
  ERR_NOTES_EXTENDEDACCESS_FAILED = $80041247;
  ERR_NOTES_UNIFORM_FAILED_EA = $80041248;
  ERR_NOTES_NOTEIDFIND_FAILED = $80041249;
  ERR_NOTES_NOFIXUP_CURRDB = $8004124A;
  ERR_NOTES_NOT_AN_URLDB = $8004124B;
  ERR_NOTES_RTNAV_USE_FINDSTRING = $8004124C;
  ERR_NOTES_UNINITIALIZED_STRUCT = $8004124D;
  ERR_NOTES_UNINITIALIZED_REMOTE_OBJ = $8004124E;
  ERR_NOTES_NEVER_SUPPORTED = $8004124F;
  ERR_NOTES_SS_TRUNCATION_FAILED = $80041250;
  ERR_NOTES_NEED_STREAM = $80041251;
  ERR_NOTES_SS_IO_FAILED = $80041252;
  ERR_NOTES_NO_MEMBERS_REFRESHED = $80041253;
  ERR_NOTES_SS_NO_LOCAL_STREAM_REPLACE = $80041254;
  ERR_NOTES_SS_NO_LOCAL_STREAM_CLOSE = $80041255;
  ERR_NOTES_SS_NO_LOCAL_STREAM_OPEN = $80041256;
  ERR_NOTES_SS_MAX_SPACE_EXCEEDED = $80041257;
  ERR_NOTES_DOCUMENTCOLLECTION_MISSING = $80041258;
  ERR_NOTES_NOTECOLLECTION_MISSING = $80041259;
  ERR_NOTES_NOSUCH_DBGETMODDOCS = $8004125A;
  ERR_NOTES_BEP_CLASS = $8004125B;
  ERR_NOTES_BEP_METHOD = $8004125C;
  ERR_NOTES_BEP_OPERATION = $8004125D;
  ERR_NOTES_BEP_CALLS = $8004125E;
  ERR_NOTES_BEP_TIME = $8004125F;
  ERR_NOTES_BEP_MEASUREDTIME = $80041260;
  ERR_NOTES_BEP_METHODSPROFILED = $80041261;
  ERR_NOTES_BEP_MILLISECONDS = $80041262;
  ERR_NOTES_BEP_AGENTEXECUTIONTIME = $80041263;
  ERR_NOTES_BEP_PROFILE = $80041264;
  ERR_NOTES_AP_CFA_NOADMSRV = $80041265;
  ERR_NOTES_MAX_THREADSESSIONS = $80041266;
  ERR_NOTES_TOOMANY_IN_DIR = $80041267;
  ERR_NOTES_BUSYTIME_FAILED = $80041268;
  ERR_NOTES_UNREAD_USERNAME = $80041269;
  ERR_NOTES_UNREAD_READ = $8004126A;
  ERR_NOTES_UNREAD_WRITE = $8004126B;
  ERR_NOTES_DEFAULTVIEW = $8004126C;
  ERR_NOTES_NOSINGLES = $8004126D;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  IACL = interface;
  IACLDisp = dispinterface;
  IDatabase = interface;
  IDatabaseDisp = dispinterface;
  IDocumentCollection = interface;
  IDocumentCollectionDisp = dispinterface;
  IDocument = interface;
  IDocumentDisp = dispinterface;
  IView = interface;
  IViewDisp = dispinterface;
  IViewEntryCollection = interface;
  IViewEntryCollectionDisp = dispinterface;
  IViewEntry = interface;
  IViewEntryDisp = dispinterface;
  IViewNavigator = interface;
  IViewNavigatorDisp = dispinterface;
  IViewColumn = interface;
  IViewColumnDisp = dispinterface;
  IItem = interface;
  IItemDisp = dispinterface;
  IItem2 = interface;
  IItem2Disp = dispinterface;
  IDateTime = interface;
  IDateTimeDisp = dispinterface;
  ISession = interface;
  ISessionDisp = dispinterface;
  IAgent = interface;
  IAgentDisp = dispinterface;
  IInternational = interface;
  IInternationalDisp = dispinterface;
  IName = interface;
  INameDisp = dispinterface;
  IDateRange = interface;
  IDateRangeDisp = dispinterface;
  ILog = interface;
  ILogDisp = dispinterface;
  INewsletter = interface;
  INewsletterDisp = dispinterface;
  IRegistration = interface;
  IRegistrationDisp = dispinterface;
  IRichTextParagraphStyle = interface;
  IRichTextParagraphStyleDisp = dispinterface;
  IRichTextStyle = interface;
  IRichTextStyleDisp = dispinterface;
  IDbDirectory = interface;
  IDbDirectoryDisp = dispinterface;
  IAdministrationProcess = interface;
  IAdministrationProcessDisp = dispinterface;
  INotesStream = interface;
  INotesStreamDisp = dispinterface;
  IColorObject = interface;
  IColorObjectDisp = dispinterface;
  IDXLExporter = interface;
  IDXLExporterDisp = dispinterface;
  IDXLImporter = interface;
  IDXLImporterDisp = dispinterface;
  IMIMEEntity = interface;
  IMIMEEntityDisp = dispinterface;
  IMIMEHeader = interface;
  IMIMEHeaderDisp = dispinterface;
  IRichTextItem = interface;
  IRichTextItemDisp = dispinterface;
  IEmbeddedObject = interface;
  IEmbeddedObjectDisp = dispinterface;
  IRichTextNavigator = interface;
  IRichTextNavigatorDisp = dispinterface;
  IRichTextRange = interface;
  IRichTextRangeDisp = dispinterface;
  IReplication = interface;
  IReplicationDisp = dispinterface;
  IReplicationEntry = interface;
  IReplicationEntryDisp = dispinterface;
  IOutline = interface;
  IOutlineDisp = dispinterface;
  IOutlineEntry = interface;
  IOutlineEntryDisp = dispinterface;
  IForm = interface;
  IFormDisp = dispinterface;
  INoteCollection = interface;
  INoteCollectionDisp = dispinterface;
  IACLEntry = interface;
  IACLEntryDisp = dispinterface;
  IRichTextTab = interface;
  IRichTextTabDisp = dispinterface;
  IRichTextDoclink = interface;
  IRichTextDoclinkDisp = dispinterface;
  IRichTextSection = interface;
  IRichTextSectionDisp = dispinterface;
  IRichTextTable = interface;
  IRichTextTableDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  NotesACL = IACL;
  NotesACLEntry = IACLEntry;
  NotesAgent = IAgent;
  NotesDatabase = IDatabase;
  NotesDateRange = IDateRange;
  NotesDateTime = IDateTime;
  NotesDbDirectory = IDbDirectory;
  NotesDocument = IDocument;
  NotesDocumentCollection = IDocumentCollection;
  NotesEmbeddedObject = IEmbeddedObject;
  NotesForm = IForm;
  NotesItem = IItem2;
  NotesInternational = IInternational;
  NotesLog = ILog;
  NotesName = IName;
  NotesNewsletter = INewsletter;
  NotesOutline = IOutline;
  NotesOutlineEntry = IOutlineEntry;
  NotesRichTextItem = IRichTextItem;
  NotesRichTextStyle = IRichTextStyle;
  NotesRichTextParagraphStyle = IRichTextParagraphStyle;
  NotesRichTextTab = IRichTextTab;
  NotesRegistration = IRegistration;
  NotesReplication = IReplication;
  NotesSession = ISession;
  NotesView = IView;
  NotesViewColumn = IViewColumn;
  NotesViewEntry = IViewEntry;
  NotesViewEntryCollection = IViewEntryCollection;
  NotesViewNavigator = IViewNavigator;
  NotesMIMEEntity = IMIMEEntity;
  NotesMIMEHeader = IMIMEHeader;
  NotesStream = INotesStream;
  NotesAdministrationProcess = IAdministrationProcess;
  NotesReplicationEntry = IReplicationEntry;
  NotesColorObject = IColorObject;
  NotesRichTextNavigator = IRichTextNavigator;
  NotesRichTextRange = IRichTextRange;
  NotesRichTextDoclink = IRichTextDoclink;
  NotesRichTextSection = IRichTextSection;
  NotesRichTextTable = IRichTextTable;
  NotesNoteCollection = INoteCollection;
  NotesDXLExporter = IDXLExporter;
  NotesDXLImporter = IDXLImporter;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  POleVariant1 = ^OleVariant; {*}

  ACLLEVEL = _ACLLEVEL; 
  COLORS = _COLORS; 
  SPACING = _SPACING; 
  VC_ALIGN = _VC_ALIGN; 
  VC_DATEFMT = _VC_DATEFMT; 
  VC_FONTSTYLE = _VC_FONTSTYLE; 
  VC_SEP = _VC_SEP; 
  VC_NUMATTR = _VC_NUMATTR; 
  VC_NUMFMT = _VC_NUMFMT; 
  VC_TDFMT = _VC_TDFMT; 
  VC_TIMEFMT = _VC_TIMEFMT; 
  VC_TIMEZONEFMT = _VC_TIMEZONEFMT; 
  AG_TARGET = _AG_TARGET; 
  AG_TRIGGER = _AG_TRIGGER; 
  LOG_EVENTS = _LOG_EVENTS; 
  LOG_SEVERITY = _LOG_SEVERITY; 
  REG_TYPE = _REG_TYPE; 
  USER_TYPE = _USER_TYPE; 
  REG_MAILOWNACL = _REG_MAILOWNACL; 
  REG_MAILTYPE = _REG_MAILTYPE; 
  REG_ROAMCLEANUP = _REG_ROAMCLEANUP; 
  RT_ALIGN = _RT_ALIGN; 
  RT_PAGINATE = _RT_PAGINATE; 
  RT_TAB = _RT_TAB; 
  RT_EFFECTS = _RT_EFFECTS; 
  RT_FONTS = _RT_FONTS; 
  DB_TYPES = _DB_TYPES; 
  ADMP_MAILDEL = _ADMP_MAILDEL; 
  ADMP_PWDCHK = _ADMP_PWDCHK; 
  STMREAD_LEN = _STMREAD_LEN; 
  EOL_TYPE = _EOL_TYPE; 
  DXLIMPORTOPTION = _DXLIMPORTOPTION; 
  VALIDATIONOPTION = _VALIDATIONOPTION; 
  DXLLOGOPTION = _DXLLOGOPTION; 
  SESS_POLICY = _SESS_POLICY; 
  IT_TYPE = _IT_TYPE; 
  MIME_ENCODING = _MIME_ENCODING; 
  SEARCH_PATH = _SEARCH_PATH; 
  EMBED_TYPE = _EMBED_TYPE; 
  RT_ELEM = _RT_ELEM; 
  RP_PRIORITY = _RP_PRIORITY; 
  OE_CLASS = _OE_CLASS; 
  OE_TYPE = _OE_TYPE; 
  FT_TYPES = _FT_TYPES; 
  FIELD_TYPE = _FIELD_TYPE; 
  FTINDEX_FREQUENCY = _FTIDX_FREQ; 
  DATABASE_TYPES = _DATABASE_TYPES; 
  COMPACT_OPTIONS = _CMPC_OPTS; 
  FTINDEX_OPTIONS = _FTIDX_OPTS; 
  ACCESS_PRIVILEGES = _DBACL_PRIVS; 
  DBFIXUP_TYPES = _DBFIXUP_TYPES; 
  DB_OPTIONS = _DB_OPTIONS; 
  DBSIGN_TYPES = _DBSIGN_TYPES; 
  DBMOD_TYPES = _DBMOD_TYPES; 
  LSXBE_ACLTYPE = _LSXBE_ACLTYPE; 
  RT_TBLSTYLE = _RT_TBLSTYLE; 

// *********************************************************************//
// Interface: IACL
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131560-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IACL = interface(IDispatch)
    ['{29131560-2EED-1069-BF5D-00DD011186B7}']
    function Get_InternetLevel: ACLLEVEL; safecall;
    procedure Set_InternetLevel(plLevel: ACLLEVEL); safecall;
    function Get_Parent: IDatabase; safecall;
    function Get_Roles: OleVariant; safecall;
    procedure Set_UniformAccess(pbFlag: WordBool); safecall;
    function Get_UniformAccess: WordBool; safecall;
    procedure AddRole(const pRole: WideString); safecall;
    function CreateACLEntry(const pName: WideString; lLevel: ACLLEVEL): IACLEntry; safecall;
    procedure DeleteRole(const pRole: WideString); safecall;
    function GetEntry(const pEname: WideString): IACLEntry; safecall;
    function GetFirstEntry: IACLEntry; safecall;
    function GetNextEntry(const pIEntry: IACLEntry): IACLEntry; safecall;
    procedure RenameRole(const pOldname: WideString; const pNewname: WideString); safecall;
    procedure RemoveACLEntry(const pName: WideString); safecall;
    procedure Save; safecall;
    procedure Set_AdministrationServer(const ppName: WideString); safecall;
    function Get_AdministrationServer: WideString; safecall;
    procedure Set_IsAdminNames(pbFlag: WordBool); safecall;
    function Get_IsAdminNames: WordBool; safecall;
    procedure Set_IsAdminReaderAuthor(pbFlag: WordBool); safecall;
    function Get_IsAdminReaderAuthor: WordBool; safecall;
    procedure Set_IsExtendedAccess(pbFlag: WordBool); safecall;
    function Get_IsExtendedAccess: WordBool; safecall;
    property InternetLevel: ACLLEVEL read Get_InternetLevel write Set_InternetLevel;
    property Parent: IDatabase read Get_Parent;
    property Roles: OleVariant read Get_Roles;
    property UniformAccess: WordBool read Get_UniformAccess write Set_UniformAccess;
    property AdministrationServer: WideString read Get_AdministrationServer write Set_AdministrationServer;
    property IsAdminNames: WordBool read Get_IsAdminNames write Set_IsAdminNames;
    property IsAdminReaderAuthor: WordBool read Get_IsAdminReaderAuthor write Set_IsAdminReaderAuthor;
    property IsExtendedAccess: WordBool read Get_IsExtendedAccess write Set_IsExtendedAccess;
  end;

// *********************************************************************//
// DispIntf:  IACLDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131560-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IACLDisp = dispinterface
    ['{29131560-2EED-1069-BF5D-00DD011186B7}']
    property InternetLevel: ACLLEVEL dispid 1610743808;
    property Parent: IDatabase readonly dispid 1610743810;
    property Roles: OleVariant readonly dispid 1610743811;
    property UniformAccess: WordBool dispid 1610743812;
    procedure AddRole(const pRole: WideString); dispid 1610743814;
    function CreateACLEntry(const pName: WideString; lLevel: ACLLEVEL): IACLEntry; dispid 1610743815;
    procedure DeleteRole(const pRole: WideString); dispid 1610743816;
    function GetEntry(const pEname: WideString): IACLEntry; dispid 1610743817;
    function GetFirstEntry: IACLEntry; dispid 1610743818;
    function GetNextEntry(const pIEntry: IACLEntry): IACLEntry; dispid 1610743819;
    procedure RenameRole(const pOldname: WideString; const pNewname: WideString); dispid 1610743820;
    procedure RemoveACLEntry(const pName: WideString); dispid 1610743821;
    procedure Save; dispid 1610743822;
    property AdministrationServer: WideString dispid 1610743823;
    property IsAdminNames: WordBool dispid 1610743825;
    property IsAdminReaderAuthor: WordBool dispid 1610743827;
    property IsExtendedAccess: WordBool dispid 1610743829;
  end;

// *********************************************************************//
// Interface: IDatabase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131563-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDatabase = interface(IDispatch)
    ['{29131563-2EED-1069-BF5D-00DD011186B7}']
    function Get_ACL: IACL; safecall;
    function Get_AllDocuments: IDocumentCollection; safecall;
    function Get_Agents: OleVariant; safecall;
    function Get_Categories: WideString; safecall;
    procedure Set_Categories(const ppCategories: WideString); safecall;
    function Get_Created: OleVariant; safecall;
    function Get_CurrentAccessLevel: Integer; safecall;
    function Get_DelayUpdates: WordBool; safecall;
    procedure Set_DelayUpdates(pbFlag: WordBool); safecall;
    function Get_DesignTemplateName: WideString; safecall;
    function Get_FileName: WideString; safecall;
    function Get_FilePath: WideString; safecall;
    function Get_FolderReferencesEnabled: WordBool; safecall;
    procedure Set_FolderReferencesEnabled(pbEnable: WordBool); safecall;
    function Get_Forms: OleVariant; safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_IsDirectoryCatalog: WordBool; safecall;
    function Get_IsFTIndexed: WordBool; safecall;
    function Get_IsMultiDbSearch: WordBool; safecall;
    function Get_IsOpen: WordBool; safecall;
    function Get_IsPublicAddressBook: WordBool; safecall;
    function Get_IsPrivateAddressBook: WordBool; safecall;
    function Get_LastFTIndexed: OleVariant; safecall;
    function Get_LastModified: OleVariant; safecall;
    function Get_Managers: OleVariant; safecall;
    function Get_MaxSize: Double; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_Parent: ISession; safecall;
    function Get_PercentUsed: Double; safecall;
    function Get_ReplicaID: WideString; safecall;
    function Get_ReplicationInfo: IReplication; safecall;
    function Get_Server: WideString; safecall;
    function Get_Size: Double; safecall;
    function Get_SizeQuota: Integer; safecall;
    procedure Set_SizeQuota(plQuota: Integer); safecall;
    function Get_TemplateName: WideString; safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const ppTitle: WideString); safecall;
    function Get_UnprocessedDocuments: IDocumentCollection; safecall;
    function Get_Views: OleVariant; safecall;
    function Compact: Integer; safecall;
    function CreateCopy(const pServer: WideString; const pFile: WideString; lMaxsize: Integer): IDatabase; safecall;
    function CreateDocument: IDocument; safecall;
    function CreateFromTemplate(const pServer: WideString; const pFile: WideString; 
                                bInherit: WordBool; lMaxsize: Integer): IDatabase; safecall;
    function CreateOutline(const pName: WideString; bGenDefault: WordBool): IOutline; safecall;
    function CreateReplica(const pServer: WideString; const pFile: WideString): IDatabase; safecall;
    procedure EnableFolder(const pName: WideString); safecall;
    function FTDomainSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                            lOtheropt: FT_TYPES; lStart: Integer; lCount: Integer; 
                            const pEntryForm: WideString): IDocument; safecall;
    function FTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                      lOtheropt: FT_TYPES): IDocumentCollection; safecall;
    function GetAgent(const pName: WideString): IAgent; safecall;
    function GetDocumentByID(const pNoteid: WideString): IDocument; safecall;
    function GetDocumentByUNID(const pUnid: WideString): IDocument; safecall;
    function GetDocumentByURL(const pURL: WideString; lReload: Integer; bUrllist: WordBool; 
                              const pCharset: WideString; const pWebuser: WideString; 
                              const pWebpasswd: WideString; const pProxyuser: WideString; 
                              const pProxypasswd: WideString; bNowait: WordBool): IDocument; safecall;
    function GetForm(const pName: WideString): IForm; safecall;
    function GetOutline(const pName: WideString): IOutline; safecall;
    function GetProfileDocument(const pProfile: WideString; const pProfileuser: WideString): IDocument; safecall;
    function GetProfileDocCollection(const pProfileName: WideString): IDocumentCollection; safecall;
    function GetURLHeaderInfo(const pURL: WideString; const pHeader: WideString; 
                              const pWebuser: WideString; const pWebpasswd: WideString; 
                              const pProxyuser: WideString; const pProxypasswd: WideString): WideString; safecall;
    function GetView(const pName: WideString): IView; safecall;
    procedure GrantAccess(const pName: WideString; lLevel: ACLLEVEL); safecall;
    procedure Open; safecall;
    function QueryAccess(const pName: WideString): ACLLEVEL; safecall;
    procedure Remove; safecall;
    function Replicate(const pServer: WideString): WordBool; safecall;
    procedure RevokeAccess(const pName: WideString); safecall;
    function Search(const pFormula: WideString; const pIDt: IDateTime; lMax: Integer): IDocumentCollection; safecall;
    function UnprocessedFTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                 lOtheropt: FT_TYPES): IDocumentCollection; safecall;
    function UnprocessedSearch(const pFormula: WideString; const pDt: IDateTime; lMax: Integer): IDocumentCollection; safecall;
    procedure UpdateFTIndex(bCreate: WordBool); safecall;
    function Get_ACLActivityLog: OleVariant; safecall;
    function Get_FTIndexFrequency: FTINDEX_FREQUENCY; safecall;
    procedure Set_FTIndexFrequency(pFtiFreq: FTINDEX_FREQUENCY); safecall;
    function Get_IsCurrentAccessPublicReader: WordBool; safecall;
    function Get_IsCurrentAccessPublicWriter: WordBool; safecall;
    function Get_IsInMultiDbIndexing: WordBool; safecall;
    procedure Set_IsInMultiDbIndexing(pbFlag: WordBool); safecall;
    function Get_IsLink: WordBool; safecall;
    function Get_type_: DATABASE_TYPES; safecall;
    function Get_IsDocumentLockingEnabled: WordBool; safecall;
    procedure Set_IsDocumentLockingEnabled(pbFlag: WordBool); safecall;
    function Get_IsDesignLockingEnabled: WordBool; safecall;
    procedure Set_IsDesignLockingEnabled(pbFlag: WordBool); safecall;
    function CompactWithOptions(cmpcFlags: OleVariant; const pSpacethreshhold: WideString; 
                                unused: COMPACT_OPTIONS): Integer; safecall;
    procedure CreateFTIndex(ftiFlags: FTINDEX_OPTIONS; bRecreate: WordBool); safecall;
    function FTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                           lOtheropt: FT_TYPES; start: Integer): IDocumentCollection; safecall;
    function OpenByReplicaID(const pServer: WideString; const pReplicaID: WideString): WordBool; safecall;
    function OpenIfModified(const pServer: WideString; const pDbfile: WideString; 
                            const pITimeModifiedSince: IDateTime): WordBool; safecall;
    function OpenWithFailover(const pServer: WideString; const pDbfile: WideString): WordBool; safecall;
    function QueryAccessPrivileges(const pName: WideString): ACCESS_PRIVILEGES; safecall;
    procedure RemoveFTIndex; safecall;
    function UnprocessedFTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                      lOtheropt: FT_TYPES; start: Integer): IDocumentCollection; safecall;
    function CreateView(const Title: WideString; const Formula: WideString; 
                        const templateView: IView; noRefresh: WordBool): IView; safecall;
    procedure Fixup(opts: DBFIXUP_TYPES); safecall;
    procedure MarkForDelete; safecall;
    function GetOption(bit: DB_OPTIONS): WordBool; safecall;
    procedure SetOption(bit: DB_OPTIONS; bValue: WordBool); safecall;
    function Get_IsInService: WordBool; safecall;
    function Get_IsPendingDelete: WordBool; safecall;
    function Get_IsConfigurationDirectory: WordBool; safecall;
    function Get_IsClusterReplication: WordBool; safecall;
    function Get_ListInDbCatalog: WordBool; safecall;
    function Get_LastFixup: IDateTime; safecall;
    function Get_LimitRevisions: Double; safecall;
    function Get_LimitUpdatedBy: Double; safecall;
    function Get_FileFormat: Integer; safecall;
    function Get_UndeleteExpireTime: Integer; safecall;
    function Get_SizeWarning: Integer; safecall;
    procedure Set_LimitRevisions(pD: Double); safecall;
    procedure Set_LimitUpdatedBy(pD: Double); safecall;
    procedure Set_SizeWarning(plValue: Integer); safecall;
    procedure Set_UndeleteExpireTime(plValue: Integer); safecall;
    procedure Set_InService(Param1: WordBool); safecall;
    procedure Set_ListInDbCatalog(bValue: WordBool); safecall;
    function CreateNoteCollection(bSelectAll: WordBool): INoteCollection; safecall;
    procedure Sign(lDocumentType: DBSIGN_TYPES; bExistingSigsOnly: WordBool; 
                   const pNameStr: WideString; bNameStrIsNoteID: WordBool); safecall;
    function QueryAccessRoles(const pName: WideString): OleVariant; safecall;
    function GetModifiedDocuments(const pDTSince: IDateTime; noteClass: DBMOD_TYPES): IDocumentCollection; safecall;
    procedure Set_IsInService(bValue: WordBool); safecall;
    property ACL: IACL read Get_ACL;
    property AllDocuments: IDocumentCollection read Get_AllDocuments;
    property Agents: OleVariant read Get_Agents;
    property Categories: WideString read Get_Categories write Set_Categories;
    property Created: OleVariant read Get_Created;
    property CurrentAccessLevel: Integer read Get_CurrentAccessLevel;
    property DelayUpdates: WordBool read Get_DelayUpdates write Set_DelayUpdates;
    property DesignTemplateName: WideString read Get_DesignTemplateName;
    property FileName: WideString read Get_FileName;
    property FilePath: WideString read Get_FilePath;
    property FolderReferencesEnabled: WordBool read Get_FolderReferencesEnabled write Set_FolderReferencesEnabled;
    property Forms: OleVariant read Get_Forms;
    property HttpURL: WideString read Get_HttpURL;
    property IsDirectoryCatalog: WordBool read Get_IsDirectoryCatalog;
    property IsFTIndexed: WordBool read Get_IsFTIndexed;
    property IsMultiDbSearch: WordBool read Get_IsMultiDbSearch;
    property IsOpen: WordBool read Get_IsOpen;
    property IsPublicAddressBook: WordBool read Get_IsPublicAddressBook;
    property IsPrivateAddressBook: WordBool read Get_IsPrivateAddressBook;
    property LastFTIndexed: OleVariant read Get_LastFTIndexed;
    property LastModified: OleVariant read Get_LastModified;
    property Managers: OleVariant read Get_Managers;
    property MaxSize: Double read Get_MaxSize;
    property NotesURL: WideString read Get_NotesURL;
    property Parent: ISession read Get_Parent;
    property PercentUsed: Double read Get_PercentUsed;
    property ReplicaID: WideString read Get_ReplicaID;
    property ReplicationInfo: IReplication read Get_ReplicationInfo;
    property Server: WideString read Get_Server;
    property Size: Double read Get_Size;
    property SizeQuota: Integer read Get_SizeQuota write Set_SizeQuota;
    property TemplateName: WideString read Get_TemplateName;
    property Title: WideString read Get_Title write Set_Title;
    property UnprocessedDocuments: IDocumentCollection read Get_UnprocessedDocuments;
    property Views: OleVariant read Get_Views;
    property ACLActivityLog: OleVariant read Get_ACLActivityLog;
    property FTIndexFrequency: FTINDEX_FREQUENCY read Get_FTIndexFrequency write Set_FTIndexFrequency;
    property IsCurrentAccessPublicReader: WordBool read Get_IsCurrentAccessPublicReader;
    property IsCurrentAccessPublicWriter: WordBool read Get_IsCurrentAccessPublicWriter;
    property IsInMultiDbIndexing: WordBool read Get_IsInMultiDbIndexing write Set_IsInMultiDbIndexing;
    property IsLink: WordBool read Get_IsLink;
    property type_: DATABASE_TYPES read Get_type_;
    property IsDocumentLockingEnabled: WordBool read Get_IsDocumentLockingEnabled write Set_IsDocumentLockingEnabled;
    property IsDesignLockingEnabled: WordBool read Get_IsDesignLockingEnabled write Set_IsDesignLockingEnabled;
    property IsInService: WordBool read Get_IsInService write Set_IsInService;
    property IsPendingDelete: WordBool read Get_IsPendingDelete;
    property IsConfigurationDirectory: WordBool read Get_IsConfigurationDirectory;
    property IsClusterReplication: WordBool read Get_IsClusterReplication;
    property ListInDbCatalog: WordBool read Get_ListInDbCatalog write Set_ListInDbCatalog;
    property LastFixup: IDateTime read Get_LastFixup;
    property LimitRevisions: Double read Get_LimitRevisions write Set_LimitRevisions;
    property LimitUpdatedBy: Double read Get_LimitUpdatedBy write Set_LimitUpdatedBy;
    property FileFormat: Integer read Get_FileFormat;
    property UndeleteExpireTime: Integer read Get_UndeleteExpireTime write Set_UndeleteExpireTime;
    property SizeWarning: Integer read Get_SizeWarning write Set_SizeWarning;
    property InService: WordBool write Set_InService;
  end;

// *********************************************************************//
// DispIntf:  IDatabaseDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131563-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDatabaseDisp = dispinterface
    ['{29131563-2EED-1069-BF5D-00DD011186B7}']
    property ACL: IACL readonly dispid 1610743808;
    property AllDocuments: IDocumentCollection readonly dispid 1610743809;
    property Agents: OleVariant readonly dispid 1610743810;
    property Categories: WideString dispid 1610743811;
    property Created: OleVariant readonly dispid 1610743813;
    property CurrentAccessLevel: Integer readonly dispid 1610743814;
    property DelayUpdates: WordBool dispid 1610743815;
    property DesignTemplateName: WideString readonly dispid 1610743817;
    property FileName: WideString readonly dispid 1610743818;
    property FilePath: WideString readonly dispid 0;
    property FolderReferencesEnabled: WordBool dispid 1610743820;
    property Forms: OleVariant readonly dispid 1610743822;
    property HttpURL: WideString readonly dispid 1610743823;
    property IsDirectoryCatalog: WordBool readonly dispid 1610743824;
    property IsFTIndexed: WordBool readonly dispid 1610743825;
    property IsMultiDbSearch: WordBool readonly dispid 1610743826;
    property IsOpen: WordBool readonly dispid 1610743827;
    property IsPublicAddressBook: WordBool readonly dispid 1610743828;
    property IsPrivateAddressBook: WordBool readonly dispid 1610743829;
    property LastFTIndexed: OleVariant readonly dispid 1610743830;
    property LastModified: OleVariant readonly dispid 1610743831;
    property Managers: OleVariant readonly dispid 1610743832;
    property MaxSize: Double readonly dispid 1610743833;
    property NotesURL: WideString readonly dispid 1610743834;
    property Parent: ISession readonly dispid 1610743835;
    property PercentUsed: Double readonly dispid 1610743836;
    property ReplicaID: WideString readonly dispid 1610743837;
    property ReplicationInfo: IReplication readonly dispid 1610743838;
    property Server: WideString readonly dispid 1610743839;
    property Size: Double readonly dispid 1610743840;
    property SizeQuota: Integer dispid 1610743841;
    property TemplateName: WideString readonly dispid 1610743843;
    property Title: WideString dispid 1610743844;
    property UnprocessedDocuments: IDocumentCollection readonly dispid 1610743846;
    property Views: OleVariant readonly dispid 1610743847;
    function Compact: Integer; dispid 1610743848;
    function CreateCopy(const pServer: WideString; const pFile: WideString; lMaxsize: Integer): IDatabase; dispid 1610743849;
    function CreateDocument: IDocument; dispid 1610743850;
    function CreateFromTemplate(const pServer: WideString; const pFile: WideString; 
                                bInherit: WordBool; lMaxsize: Integer): IDatabase; dispid 1610743851;
    function CreateOutline(const pName: WideString; bGenDefault: WordBool): IOutline; dispid 1610743852;
    function CreateReplica(const pServer: WideString; const pFile: WideString): IDatabase; dispid 1610743853;
    procedure EnableFolder(const pName: WideString); dispid 1610743854;
    function FTDomainSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                            lOtheropt: FT_TYPES; lStart: Integer; lCount: Integer; 
                            const pEntryForm: WideString): IDocument; dispid 1610743855;
    function FTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                      lOtheropt: FT_TYPES): IDocumentCollection; dispid 1610743856;
    function GetAgent(const pName: WideString): IAgent; dispid 1610743857;
    function GetDocumentByID(const pNoteid: WideString): IDocument; dispid 1610743858;
    function GetDocumentByUNID(const pUnid: WideString): IDocument; dispid 1610743859;
    function GetDocumentByURL(const pURL: WideString; lReload: Integer; bUrllist: WordBool; 
                              const pCharset: WideString; const pWebuser: WideString; 
                              const pWebpasswd: WideString; const pProxyuser: WideString; 
                              const pProxypasswd: WideString; bNowait: WordBool): IDocument; dispid 1610743860;
    function GetForm(const pName: WideString): IForm; dispid 1610743861;
    function GetOutline(const pName: WideString): IOutline; dispid 1610743862;
    function GetProfileDocument(const pProfile: WideString; const pProfileuser: WideString): IDocument; dispid 1610743863;
    function GetProfileDocCollection(const pProfileName: WideString): IDocumentCollection; dispid 1610743864;
    function GetURLHeaderInfo(const pURL: WideString; const pHeader: WideString; 
                              const pWebuser: WideString; const pWebpasswd: WideString; 
                              const pProxyuser: WideString; const pProxypasswd: WideString): WideString; dispid 1610743865;
    function GetView(const pName: WideString): IView; dispid 1610743866;
    procedure GrantAccess(const pName: WideString; lLevel: ACLLEVEL); dispid 1610743867;
    procedure Open; dispid 1610743868;
    function QueryAccess(const pName: WideString): ACLLEVEL; dispid 1610743869;
    procedure Remove; dispid 1610743870;
    function Replicate(const pServer: WideString): WordBool; dispid 1610743871;
    procedure RevokeAccess(const pName: WideString); dispid 1610743872;
    function Search(const pFormula: WideString; const pIDt: IDateTime; lMax: Integer): IDocumentCollection; dispid 1610743873;
    function UnprocessedFTSearch(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                 lOtheropt: FT_TYPES): IDocumentCollection; dispid 1610743874;
    function UnprocessedSearch(const pFormula: WideString; const pDt: IDateTime; lMax: Integer): IDocumentCollection; dispid 1610743875;
    procedure UpdateFTIndex(bCreate: WordBool); dispid 1610743876;
    property ACLActivityLog: OleVariant readonly dispid 1610743877;
    property FTIndexFrequency: FTINDEX_FREQUENCY dispid 1610743878;
    property IsCurrentAccessPublicReader: WordBool readonly dispid 1610743880;
    property IsCurrentAccessPublicWriter: WordBool readonly dispid 1610743881;
    property IsInMultiDbIndexing: WordBool dispid 1610743882;
    property IsLink: WordBool readonly dispid 1610743884;
    property type_: DATABASE_TYPES readonly dispid 1610743885;
    property IsDocumentLockingEnabled: WordBool dispid 1610743886;
    property IsDesignLockingEnabled: WordBool dispid 1610743888;
    function CompactWithOptions(cmpcFlags: OleVariant; const pSpacethreshhold: WideString; 
                                unused: COMPACT_OPTIONS): Integer; dispid 1610743890;
    procedure CreateFTIndex(ftiFlags: FTINDEX_OPTIONS; bRecreate: WordBool); dispid 1610743891;
    function FTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                           lOtheropt: FT_TYPES; start: Integer): IDocumentCollection; dispid 1610743892;
    function OpenByReplicaID(const pServer: WideString; const pReplicaID: WideString): WordBool; dispid 1610743893;
    function OpenIfModified(const pServer: WideString; const pDbfile: WideString; 
                            const pITimeModifiedSince: IDateTime): WordBool; dispid 1610743894;
    function OpenWithFailover(const pServer: WideString; const pDbfile: WideString): WordBool; dispid 1610743895;
    function QueryAccessPrivileges(const pName: WideString): ACCESS_PRIVILEGES; dispid 1610743896;
    procedure RemoveFTIndex; dispid 1610743897;
    function UnprocessedFTSearchRange(const pQuery: WideString; lMax: Integer; lSortopt: FT_TYPES; 
                                      lOtheropt: FT_TYPES; start: Integer): IDocumentCollection; dispid 1610743898;
    function CreateView(const Title: WideString; const Formula: WideString; 
                        const templateView: IView; noRefresh: WordBool): IView; dispid 1610743899;
    procedure Fixup(opts: DBFIXUP_TYPES); dispid 1610743900;
    procedure MarkForDelete; dispid 1610743901;
    function GetOption(bit: DB_OPTIONS): WordBool; dispid 1610743902;
    procedure SetOption(bit: DB_OPTIONS; bValue: WordBool); dispid 1610743903;
    property IsInService: WordBool dispid 1610743904;
    property IsPendingDelete: WordBool readonly dispid 1610743905;
    property IsConfigurationDirectory: WordBool readonly dispid 1610743906;
    property IsClusterReplication: WordBool readonly dispid 1610743907;
    property ListInDbCatalog: WordBool dispid 1610743908;
    property LastFixup: IDateTime readonly dispid 1610743909;
    property LimitRevisions: Double dispid 1610743910;
    property LimitUpdatedBy: Double dispid 1610743911;
    property FileFormat: Integer readonly dispid 1610743912;
    property UndeleteExpireTime: Integer dispid 1610743913;
    property SizeWarning: Integer dispid 1610743914;
    property InService: WordBool writeonly dispid 1610743919;
    function CreateNoteCollection(bSelectAll: WordBool): INoteCollection; dispid 1610743921;
    procedure Sign(lDocumentType: DBSIGN_TYPES; bExistingSigsOnly: WordBool; 
                   const pNameStr: WideString; bNameStrIsNoteID: WordBool); dispid 1610743922;
    function QueryAccessRoles(const pName: WideString): OleVariant; dispid 1610743923;
    function GetModifiedDocuments(const pDTSince: IDateTime; noteClass: DBMOD_TYPES): IDocumentCollection; dispid 1610743924;
  end;

// *********************************************************************//
// Interface: IDocumentCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131568-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDocumentCollection = interface(IDispatch)
    ['{29131568-2EED-1069-BF5D-00DD011186B7}']
    function Get_Count: Integer; safecall;
    function Get_IsSorted: WordBool; safecall;
    function Get_Parent: IDatabase; safecall;
    function Get_Query: WideString; safecall;
    procedure AddDocument(const pIDoc: IDocument; bReserved: WordBool); safecall;
    procedure DeleteDocument(const pIDoc: IDocument); safecall;
    procedure FTSearch(const pQuery: WideString; lMaxDocs: Integer); safecall;
    function GetDocument(const pIIndoc: IDocument): IDocument; safecall;
    function GetFirstDocument: IDocument; safecall;
    function GetLastDocument: IDocument; safecall;
    function GetNextDocument(const pICurrent: IDocument): IDocument; safecall;
    function GetPrevDocument(const pICurrent: IDocument): IDocument; safecall;
    function GetNthDocument(lN: Integer): IDocument; safecall;
    procedure PutAllInFolder(const pFolderName: WideString; bCreateonfail: WordBool); safecall;
    procedure RemoveAll(bForce: WordBool); safecall;
    procedure RemoveAllFromFolder(const pFolderName: WideString); safecall;
    procedure StampAll(const pItemName: WideString; Value: OleVariant); safecall;
    procedure UpdateAll; safecall;
    function Get_UntilTime: IDateTime; safecall;
    property Count: Integer read Get_Count;
    property IsSorted: WordBool read Get_IsSorted;
    property Parent: IDatabase read Get_Parent;
    property Query: WideString read Get_Query;
    property UntilTime: IDateTime read Get_UntilTime;
  end;

// *********************************************************************//
// DispIntf:  IDocumentCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131568-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDocumentCollectionDisp = dispinterface
    ['{29131568-2EED-1069-BF5D-00DD011186B7}']
    property Count: Integer readonly dispid 1610743808;
    property IsSorted: WordBool readonly dispid 1610743809;
    property Parent: IDatabase readonly dispid 1610743810;
    property Query: WideString readonly dispid 1610743811;
    procedure AddDocument(const pIDoc: IDocument; bReserved: WordBool); dispid 1610743812;
    procedure DeleteDocument(const pIDoc: IDocument); dispid 1610743813;
    procedure FTSearch(const pQuery: WideString; lMaxDocs: Integer); dispid 1610743814;
    function GetDocument(const pIIndoc: IDocument): IDocument; dispid 1610743815;
    function GetFirstDocument: IDocument; dispid 1610743816;
    function GetLastDocument: IDocument; dispid 1610743817;
    function GetNextDocument(const pICurrent: IDocument): IDocument; dispid 1610743818;
    function GetPrevDocument(const pICurrent: IDocument): IDocument; dispid 1610743819;
    function GetNthDocument(lN: Integer): IDocument; dispid 1610743820;
    procedure PutAllInFolder(const pFolderName: WideString; bCreateonfail: WordBool); dispid 1610743821;
    procedure RemoveAll(bForce: WordBool); dispid 1610743822;
    procedure RemoveAllFromFolder(const pFolderName: WideString); dispid 1610743823;
    procedure StampAll(const pItemName: WideString; Value: OleVariant); dispid 1610743824;
    procedure UpdateAll; dispid 1610743825;
    property UntilTime: IDateTime readonly dispid 1610743826;
  end;

// *********************************************************************//
// Interface: IDocument
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131567-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDocument = interface(IDispatch)
    ['{29131567-2EED-1069-BF5D-00DD011186B7}']
    function Get_Authors: OleVariant; safecall;
    function Get_ColumnValues: OleVariant; safecall;
    function Get_Created: OleVariant; safecall;
    function Get_EmbeddedObjects: OleVariant; safecall;
    function Get_EncryptionKeys: OleVariant; safecall;
    procedure Set_EncryptionKeys(pKeys: OleVariant); safecall;
    procedure Set_EncryptOnSend(pbFlag: WordBool); safecall;
    function Get_EncryptOnSend: WordBool; safecall;
    function Get_FolderReferences: OleVariant; safecall;
    function Get_FTSearchScore: Integer; safecall;
    function Get_HasEmbedded: WordBool; safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_IsDeleted: WordBool; safecall;
    function Get_IsNewNote: WordBool; safecall;
    function Get_IsProfile: WordBool; safecall;
    function Get_IsResponse: WordBool; safecall;
    function Get_IsSigned: WordBool; safecall;
    function Get_IsUIDocOpen: WordBool; safecall;
    function Get_IsValid: WordBool; safecall;
    function Get_Items: OleVariant; safecall;
    function Get_Key: WideString; safecall;
    function Get_LastAccessed: OleVariant; safecall;
    function Get_LastModified: OleVariant; safecall;
    function Get_NameOfProfile: WideString; safecall;
    function Get_NoteID: WideString; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_ParentDatabase: IDatabase; safecall;
    function Get_ParentDocumentUNID: WideString; safecall;
    function Get_ParentView: IView; safecall;
    function Get_Responses: IDocumentCollection; safecall;
    function Get_SaveMessageOnSend: WordBool; safecall;
    procedure Set_SaveMessageOnSend(pbFlag: WordBool); safecall;
    function Get_SentByAgent: WordBool; safecall;
    function Get_Signer: WideString; safecall;
    function Get_SignOnSend: WordBool; safecall;
    procedure Set_SignOnSend(pbFlag: WordBool); safecall;
    function Get_Size: Integer; safecall;
    function Get_UniversalID: WideString; safecall;
    procedure Set_UniversalID(const ppId: WideString); safecall;
    function Get_Verifier: WideString; safecall;
    function AppendItemValue(const pName: WideString; Value: OleVariant): IItem2; safecall;
    function ComputeWithForm(bDodatatypes: WordBool; bRaiseerror: WordBool): WordBool; safecall;
    procedure CopyAllItems(const pIDoc: IDocument; bReplace: WordBool); safecall;
    function CopyItem(const pIItem: IItem2; const pNewname: WideString): IItem2; safecall;
    function CopyToDatabase(const pIDb: IDatabase): IDocument; safecall;
    function CreateReplyMessage(bToall: WordBool): IDocument; safecall;
    function CreateRichTextItem(const pName: WideString): IRichTextItem; safecall;
    procedure Encrypt; safecall;
    function GetAttachment(const pFilename: WideString): IEmbeddedObject; safecall;
    function GetFirstItem(const pName: WideString): IItem2; safecall;
    function GetItemValue(const pName: WideString): OleVariant; safecall;
    function HasItem(const pName: WideString): WordBool; safecall;
    procedure MakeResponse(const pIDoc: IDocument); safecall;
    procedure PutInFolder(const pName: WideString; bCreateonfail: WordBool); safecall;
    function Remove(bForce: WordBool): WordBool; safecall;
    procedure RemoveFromFolder(const pName: WideString); safecall;
    procedure RemoveItem(const pName: WideString); safecall;
    function RenderToRTItem(const pIRTItem: IRichTextItem): WordBool; safecall;
    function ReplaceItemValue(const pName: WideString; Value: OleVariant): IItem2; safecall;
    function Save(bForce: WordBool; bMakeresponse: WordBool; bMarkread: WordBool): WordBool; safecall;
    procedure Send(bAttachform: WordBool; const pRecipients: OleVariant); safecall;
    procedure Sign; safecall;
    function CloseMIMEEntities(bSavechanges: WordBool; const pName: WideString): WordBool; safecall;
    function CreateMIMEEntity(const pName: WideString): IMIMEEntity; safecall;
    function GetMIMEEntity(const pName: WideString): IMIMEEntity; safecall;
    function GetItemValueCustomDataBytes(const pItemName: WideString; 
                                         const pDatatypeName: WideString): OleVariant; safecall;
    function GetItemValueDateTimeArray(const pItemName: WideString): OleVariant; safecall;
    function GetReceivedItemText: OleVariant; safecall;
    function ReplaceItemValueCustomDataBytes(const pItemName: WideString; 
                                             const pDatatypeName: WideString; CustomData: OleVariant): IItem2; safecall;
    function RemovePermanently(bForce: WordBool): WordBool; safecall;
    function Lock(const pName: OleVariant; bProvisionalOK: WordBool): WordBool; safecall;
    function LockProvisional(const pName: OleVariant): WordBool; safecall;
    procedure Unlock; safecall;
    function Get_LockHolders: OleVariant; safecall;
    function Get_IsEncrypted: WordBool; safecall;
    property Authors: OleVariant read Get_Authors;
    property ColumnValues: OleVariant read Get_ColumnValues;
    property Created: OleVariant read Get_Created;
    property EmbeddedObjects: OleVariant read Get_EmbeddedObjects;
    property EncryptionKeys: OleVariant read Get_EncryptionKeys write Set_EncryptionKeys;
    property EncryptOnSend: WordBool read Get_EncryptOnSend write Set_EncryptOnSend;
    property FolderReferences: OleVariant read Get_FolderReferences;
    property FTSearchScore: Integer read Get_FTSearchScore;
    property HasEmbedded: WordBool read Get_HasEmbedded;
    property HttpURL: WideString read Get_HttpURL;
    property IsDeleted: WordBool read Get_IsDeleted;
    property IsNewNote: WordBool read Get_IsNewNote;
    property IsProfile: WordBool read Get_IsProfile;
    property IsResponse: WordBool read Get_IsResponse;
    property IsSigned: WordBool read Get_IsSigned;
    property IsUIDocOpen: WordBool read Get_IsUIDocOpen;
    property IsValid: WordBool read Get_IsValid;
    property Items: OleVariant read Get_Items;
    property Key: WideString read Get_Key;
    property LastAccessed: OleVariant read Get_LastAccessed;
    property LastModified: OleVariant read Get_LastModified;
    property NameOfProfile: WideString read Get_NameOfProfile;
    property NoteID: WideString read Get_NoteID;
    property NotesURL: WideString read Get_NotesURL;
    property ParentDatabase: IDatabase read Get_ParentDatabase;
    property ParentDocumentUNID: WideString read Get_ParentDocumentUNID;
    property ParentView: IView read Get_ParentView;
    property Responses: IDocumentCollection read Get_Responses;
    property SaveMessageOnSend: WordBool read Get_SaveMessageOnSend write Set_SaveMessageOnSend;
    property SentByAgent: WordBool read Get_SentByAgent;
    property Signer: WideString read Get_Signer;
    property SignOnSend: WordBool read Get_SignOnSend write Set_SignOnSend;
    property Size: Integer read Get_Size;
    property UniversalID: WideString read Get_UniversalID write Set_UniversalID;
    property Verifier: WideString read Get_Verifier;
    property LockHolders: OleVariant read Get_LockHolders;
    property IsEncrypted: WordBool read Get_IsEncrypted;
  end;

// *********************************************************************//
// DispIntf:  IDocumentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131567-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDocumentDisp = dispinterface
    ['{29131567-2EED-1069-BF5D-00DD011186B7}']
    property Authors: OleVariant readonly dispid 1610743808;
    property ColumnValues: OleVariant readonly dispid 1610743809;
    property Created: OleVariant readonly dispid 1610743810;
    property EmbeddedObjects: OleVariant readonly dispid 1610743811;
    property EncryptionKeys: OleVariant dispid 1610743812;
    property EncryptOnSend: WordBool dispid 1610743814;
    property FolderReferences: OleVariant readonly dispid 1610743816;
    property FTSearchScore: Integer readonly dispid 1610743817;
    property HasEmbedded: WordBool readonly dispid 1610743818;
    property HttpURL: WideString readonly dispid 1610743819;
    property IsDeleted: WordBool readonly dispid 1610743820;
    property IsNewNote: WordBool readonly dispid 1610743821;
    property IsProfile: WordBool readonly dispid 1610743822;
    property IsResponse: WordBool readonly dispid 1610743823;
    property IsSigned: WordBool readonly dispid 1610743824;
    property IsUIDocOpen: WordBool readonly dispid 1610743825;
    property IsValid: WordBool readonly dispid 1610743826;
    property Items: OleVariant readonly dispid 1610743827;
    property Key: WideString readonly dispid 1610743828;
    property LastAccessed: OleVariant readonly dispid 1610743829;
    property LastModified: OleVariant readonly dispid 1610743830;
    property NameOfProfile: WideString readonly dispid 1610743831;
    property NoteID: WideString readonly dispid 1610743832;
    property NotesURL: WideString readonly dispid 1610743833;
    property ParentDatabase: IDatabase readonly dispid 1610743834;
    property ParentDocumentUNID: WideString readonly dispid 1610743835;
    property ParentView: IView readonly dispid 1610743836;
    property Responses: IDocumentCollection readonly dispid 1610743837;
    property SaveMessageOnSend: WordBool dispid 1610743838;
    property SentByAgent: WordBool readonly dispid 1610743840;
    property Signer: WideString readonly dispid 1610743841;
    property SignOnSend: WordBool dispid 1610743842;
    property Size: Integer readonly dispid 1610743844;
    property UniversalID: WideString dispid 0;
    property Verifier: WideString readonly dispid 1610743847;
    function AppendItemValue(const pName: WideString; Value: OleVariant): IItem2; dispid 1610743848;
    function ComputeWithForm(bDodatatypes: WordBool; bRaiseerror: WordBool): WordBool; dispid 1610743849;
    procedure CopyAllItems(const pIDoc: IDocument; bReplace: WordBool); dispid 1610743850;
    function CopyItem(const pIItem: IItem2; const pNewname: WideString): IItem2; dispid 1610743851;
    function CopyToDatabase(const pIDb: IDatabase): IDocument; dispid 1610743852;
    function CreateReplyMessage(bToall: WordBool): IDocument; dispid 1610743853;
    function CreateRichTextItem(const pName: WideString): IRichTextItem; dispid 1610743854;
    procedure Encrypt; dispid 1610743855;
    function GetAttachment(const pFilename: WideString): IEmbeddedObject; dispid 1610743856;
    function GetFirstItem(const pName: WideString): IItem2; dispid 1610743857;
    function GetItemValue(const pName: WideString): OleVariant; dispid 1610743858;
    function HasItem(const pName: WideString): WordBool; dispid 1610743859;
    procedure MakeResponse(const pIDoc: IDocument); dispid 1610743860;
    procedure PutInFolder(const pName: WideString; bCreateonfail: WordBool); dispid 1610743861;
    function Remove(bForce: WordBool): WordBool; dispid 1610743862;
    procedure RemoveFromFolder(const pName: WideString); dispid 1610743863;
    procedure RemoveItem(const pName: WideString); dispid 1610743864;
    function RenderToRTItem(const pIRTItem: IRichTextItem): WordBool; dispid 1610743865;
    function ReplaceItemValue(const pName: WideString; Value: OleVariant): IItem2; dispid 1610743866;
    function Save(bForce: WordBool; bMakeresponse: WordBool; bMarkread: WordBool): WordBool; dispid 1610743867;
    procedure Send(bAttachform: WordBool; const pRecipients: OleVariant); dispid 1610743868;
    procedure Sign; dispid 1610743869;
    function CloseMIMEEntities(bSavechanges: WordBool; const pName: WideString): WordBool; dispid 1610743870;
    function CreateMIMEEntity(const pName: WideString): IMIMEEntity; dispid 1610743871;
    function GetMIMEEntity(const pName: WideString): IMIMEEntity; dispid 1610743872;
    function GetItemValueCustomDataBytes(const pItemName: WideString; 
                                         const pDatatypeName: WideString): OleVariant; dispid 1610743873;
    function GetItemValueDateTimeArray(const pItemName: WideString): OleVariant; dispid 1610743874;
    function GetReceivedItemText: OleVariant; dispid 1610743875;
    function ReplaceItemValueCustomDataBytes(const pItemName: WideString; 
                                             const pDatatypeName: WideString; CustomData: OleVariant): IItem2; dispid 1610743876;
    function RemovePermanently(bForce: WordBool): WordBool; dispid 1610743877;
    function Lock(const pName: OleVariant; bProvisionalOK: WordBool): WordBool; dispid 1610743878;
    function LockProvisional(const pName: OleVariant): WordBool; dispid 1610743879;
    procedure Unlock; dispid 1610743880;
    property LockHolders: OleVariant readonly dispid 1610743881;
    property IsEncrypted: WordBool readonly dispid 1610743882;
  end;

// *********************************************************************//
// Interface: IView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131579-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IView = interface(IDispatch)
    ['{29131579-2EED-1069-BF5D-00DD011186B7}']
    function Get_Aliases: OleVariant; safecall;
    function Get_AllEntries: IViewEntryCollection; safecall;
    function Get_AutoUpdate: WordBool; safecall;
    procedure Set_AutoUpdate(pbAuto: WordBool); safecall;
    function Get_BackgroundColor: COLORS; safecall;
    function Get_ColumnCount: Integer; safecall;
    function Get_ColumnNames: OleVariant; safecall;
    function Get_Columns: OleVariant; safecall;
    function Get_Created: OleVariant; safecall;
    function Get_HeaderLines: Integer; safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_IsCalendar: WordBool; safecall;
    function Get_IsCategorized: WordBool; safecall;
    function Get_IsConflict: WordBool; safecall;
    function Get_IsDefaultView: WordBool; safecall;
    function Get_IsFolder: WordBool; safecall;
    function Get_IsHierarchical: WordBool; safecall;
    function Get_IsModified: WordBool; safecall;
    function Get_IsPrivate: WordBool; safecall;
    function Get_LastModified: OleVariant; safecall;
    function Get_Name: WideString; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_Parent: IDatabase; safecall;
    function Get_ProtectReaders: WordBool; safecall;
    procedure Set_ProtectReaders(pbReaders: WordBool); safecall;
    function Get_Readers: OleVariant; safecall;
    procedure Set_Readers(pReaders: OleVariant); safecall;
    function Get_RowLines: Integer; safecall;
    function Get_SPACING: SPACING; safecall;
    function Get_TopLevelEntryCount: Integer; safecall;
    function Get_UniversalID: WideString; safecall;
    procedure Clear; safecall;
    function CreateViewNav(lCacheSize: Integer): IViewNavigator; safecall;
    function CreateViewNavMaxLevel(lLevel: Integer; lCacheSize: Integer): IViewNavigator; safecall;
    function CreateViewNavFrom(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; safecall;
    function CreateViewNavFromCategory(const pName: WideString; lCacheSize: Integer): IViewNavigator; safecall;
    function CreateViewNavFromChildren(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; safecall;
    function CreateViewNavFromDescendants(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; safecall;
    function FTSearch(const pQuery: WideString; lMaxDocs: Integer): Integer; safecall;
    function GetAllDocumentsByKey(Keys: OleVariant; bExact: WordBool): IDocumentCollection; safecall;
    function GetAllEntriesByKey(Keys: OleVariant; bExact: WordBool): IViewEntryCollection; safecall;
    function GetChild(const pICurrent: IDocument): IDocument; safecall;
    function GetColumn(lColumnNumber: Integer): IViewColumn; safecall;
    function GetDocumentByKey(Keys: OleVariant; bExact: WordBool): IDocument; safecall;
    function GetEntryByKey(Keys: OleVariant; bExact: WordBool): IViewEntry; safecall;
    function GetFirstDocument: IDocument; safecall;
    function GetLastDocument: IDocument; safecall;
    function GetNextDocument(const pICurrent: IDocument): IDocument; safecall;
    function GetNextSibling(const pICurrent: IDocument): IDocument; safecall;
    function GetNthDocument(lN: Integer): IDocument; safecall;
    function GetParentDocument(const pICurrent: IDocument): IDocument; safecall;
    function GetPrevDocument(const pICurrent: IDocument): IDocument; safecall;
    function GetPrevSibling(const pICurrent: IDocument): IDocument; safecall;
    procedure Refresh; safecall;
    procedure Remove; safecall;
    function CreateColumn(pos: Integer; const Name: WideString; const Formula: WideString): IViewColumn; safecall;
    function CopyColumn(nameIndexObj: OleVariant; dst: Integer): IViewColumn; safecall;
    procedure RemoveColumn(nameIndex: OleVariant); safecall;
    procedure Set_Aliases(pAliases: OleVariant); safecall;
    procedure SetAliases(const Aliases: WideString); safecall;
    procedure Set_IsProhibitDesignRefresh(bValue: WordBool); safecall;
    function Get_IsProhibitDesignRefresh: WordBool; safecall;
    procedure Set_IsDefaultView(pbDefault: WordBool); safecall;
    procedure Set_BackgroundColor(plColor: Integer); safecall;
    procedure Set_SPACING(plSpacing: Integer); safecall;
    procedure Set_Name(const ppName: WideString); safecall;
    procedure Set_SelectionFormula(const psValue: WideString); safecall;
    function Get_SelectionFormula: WideString; safecall;
    function Get_EntryCount: Integer; safecall;
    function Lock(const pName: OleVariant; bProvisionalOK: WordBool): WordBool; safecall;
    function LockProvisional(const pName: OleVariant): WordBool; safecall;
    procedure Unlock; safecall;
    function Get_LockHolders: OleVariant; safecall;
    function Get_ViewInheritedName: WideString; safecall;
    property Aliases: OleVariant read Get_Aliases write Set_Aliases;
    property AllEntries: IViewEntryCollection read Get_AllEntries;
    property AutoUpdate: WordBool read Get_AutoUpdate write Set_AutoUpdate;
    // Skipped Property "BackgroundColor"
    property ColumnCount: Integer read Get_ColumnCount;
    property ColumnNames: OleVariant read Get_ColumnNames;
    property Columns: OleVariant read Get_Columns;
    property Created: OleVariant read Get_Created;
    property HeaderLines: Integer read Get_HeaderLines;
    property HttpURL: WideString read Get_HttpURL;
    property IsCalendar: WordBool read Get_IsCalendar;
    property IsCategorized: WordBool read Get_IsCategorized;
    property IsConflict: WordBool read Get_IsConflict;
    property IsDefaultView: WordBool read Get_IsDefaultView write Set_IsDefaultView;
    property IsFolder: WordBool read Get_IsFolder;
    property IsHierarchical: WordBool read Get_IsHierarchical;
    property IsModified: WordBool read Get_IsModified;
    property IsPrivate: WordBool read Get_IsPrivate;
    property LastModified: OleVariant read Get_LastModified;
    property Name: WideString read Get_Name write Set_Name;
    property NotesURL: WideString read Get_NotesURL;
    property Parent: IDatabase read Get_Parent;
    property ProtectReaders: WordBool read Get_ProtectReaders write Set_ProtectReaders;
    property Readers: OleVariant read Get_Readers write Set_Readers;
    property RowLines: Integer read Get_RowLines;
    // Skipped Property "SPACING"
    property TopLevelEntryCount: Integer read Get_TopLevelEntryCount;
    property UniversalID: WideString read Get_UniversalID;
    property IsProhibitDesignRefresh: WordBool read Get_IsProhibitDesignRefresh write Set_IsProhibitDesignRefresh;
    property SelectionFormula: WideString read Get_SelectionFormula write Set_SelectionFormula;
    property EntryCount: Integer read Get_EntryCount;
    property LockHolders: OleVariant read Get_LockHolders;
    property ViewInheritedName: WideString read Get_ViewInheritedName;
  end;

// *********************************************************************//
// DispIntf:  IViewDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131579-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewDisp = dispinterface
    ['{29131579-2EED-1069-BF5D-00DD011186B7}']
    property Aliases: OleVariant dispid 1610743808;
    property AllEntries: IViewEntryCollection readonly dispid 1610743809;
    property AutoUpdate: WordBool dispid 1610743810;
    function BackgroundColor: COLORS; dispid 1610743812;
    property ColumnCount: Integer readonly dispid 1610743813;
    property ColumnNames: OleVariant readonly dispid 1610743814;
    property Columns: OleVariant readonly dispid 1610743815;
    property Created: OleVariant readonly dispid 1610743816;
    property HeaderLines: Integer readonly dispid 1610743817;
    property HttpURL: WideString readonly dispid 1610743818;
    property IsCalendar: WordBool readonly dispid 1610743819;
    property IsCategorized: WordBool readonly dispid 1610743820;
    property IsConflict: WordBool readonly dispid 1610743821;
    property IsDefaultView: WordBool dispid 1610743822;
    property IsFolder: WordBool readonly dispid 1610743823;
    property IsHierarchical: WordBool readonly dispid 1610743824;
    property IsModified: WordBool readonly dispid 1610743825;
    property IsPrivate: WordBool readonly dispid 1610743826;
    property LastModified: OleVariant readonly dispid 1610743827;
    property Name: WideString dispid 0;
    property NotesURL: WideString readonly dispid 1610743829;
    property Parent: IDatabase readonly dispid 1610743830;
    property ProtectReaders: WordBool dispid 1610743831;
    property Readers: OleVariant dispid 1610743833;
    property RowLines: Integer readonly dispid 1610743835;
    function SPACING: SPACING; dispid 1610743836;
    property TopLevelEntryCount: Integer readonly dispid 1610743837;
    property UniversalID: WideString readonly dispid 1610743838;
    procedure Clear; dispid 1610743839;
    function CreateViewNav(lCacheSize: Integer): IViewNavigator; dispid 1610743840;
    function CreateViewNavMaxLevel(lLevel: Integer; lCacheSize: Integer): IViewNavigator; dispid 1610743841;
    function CreateViewNavFrom(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; dispid 1610743842;
    function CreateViewNavFromCategory(const pName: WideString; lCacheSize: Integer): IViewNavigator; dispid 1610743843;
    function CreateViewNavFromChildren(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; dispid 1610743844;
    function CreateViewNavFromDescendants(const pIUnk: IUnknown; lCacheSize: Integer): IViewNavigator; dispid 1610743845;
    function FTSearch(const pQuery: WideString; lMaxDocs: Integer): Integer; dispid 1610743846;
    function GetAllDocumentsByKey(Keys: OleVariant; bExact: WordBool): IDocumentCollection; dispid 1610743847;
    function GetAllEntriesByKey(Keys: OleVariant; bExact: WordBool): IViewEntryCollection; dispid 1610743848;
    function GetChild(const pICurrent: IDocument): IDocument; dispid 1610743849;
    function GetColumn(lColumnNumber: Integer): IViewColumn; dispid 1610743850;
    function GetDocumentByKey(Keys: OleVariant; bExact: WordBool): IDocument; dispid 1610743851;
    function GetEntryByKey(Keys: OleVariant; bExact: WordBool): IViewEntry; dispid 1610743852;
    function GetFirstDocument: IDocument; dispid 1610743853;
    function GetLastDocument: IDocument; dispid 1610743854;
    function GetNextDocument(const pICurrent: IDocument): IDocument; dispid 1610743855;
    function GetNextSibling(const pICurrent: IDocument): IDocument; dispid 1610743856;
    function GetNthDocument(lN: Integer): IDocument; dispid 1610743857;
    function GetParentDocument(const pICurrent: IDocument): IDocument; dispid 1610743858;
    function GetPrevDocument(const pICurrent: IDocument): IDocument; dispid 1610743859;
    function GetPrevSibling(const pICurrent: IDocument): IDocument; dispid 1610743860;
    procedure Refresh; dispid 1610743861;
    procedure Remove; dispid 1610743862;
    function CreateColumn(pos: Integer; const Name: WideString; const Formula: WideString): IViewColumn; dispid 1610743863;
    function CopyColumn(nameIndexObj: OleVariant; dst: Integer): IViewColumn; dispid 1610743864;
    procedure RemoveColumn(nameIndex: OleVariant); dispid 1610743865;
    procedure SetAliases(const Aliases: WideString); dispid 1610743867;
    property IsProhibitDesignRefresh: WordBool dispid 1610743868;
    property SelectionFormula: WideString dispid 1610743874;
    property EntryCount: Integer readonly dispid 1610743876;
    function Lock(const pName: OleVariant; bProvisionalOK: WordBool): WordBool; dispid 1610743877;
    function LockProvisional(const pName: OleVariant): WordBool; dispid 1610743878;
    procedure Unlock; dispid 1610743879;
    property LockHolders: OleVariant readonly dispid 1610743880;
    property ViewInheritedName: WideString readonly dispid 1610743881;
  end;

// *********************************************************************//
// Interface: IViewEntryCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157C-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewEntryCollection = interface(IDispatch)
    ['{2913157C-2EED-1069-BF5D-00DD011186B7}']
    function Get_Count: Integer; safecall;
    function Get_Parent: IView; safecall;
    function Get_Query: WideString; safecall;
    procedure AddEntry(const pIObj: IUnknown; bReserved: WordBool); safecall;
    procedure DeleteEntry(const pIEntry: IViewEntry); safecall;
    procedure FTSearch(const pQuery: WideString; lMaxDocs: Integer); safecall;
    function GetEntry(const pIObj: IUnknown): IViewEntry; safecall;
    function GetFirstEntry: IViewEntry; safecall;
    function GetLastEntry: IViewEntry; safecall;
    function GetNextEntry(const pIEntry: IViewEntry): IViewEntry; safecall;
    function GetNthEntry(lN: Integer): IViewEntry; safecall;
    function GetPrevEntry(const pIEntry: IViewEntry): IViewEntry; safecall;
    procedure PutAllInFolder(const pFolderName: WideString; bCreateonfail: WordBool); safecall;
    procedure RemoveAll(bForce: WordBool); safecall;
    procedure RemoveAllFromFolder(const pFolderName: WideString); safecall;
    procedure StampAll(const pItemName: WideString; Value: OleVariant); safecall;
    procedure UpdateAll; safecall;
    property Count: Integer read Get_Count;
    property Parent: IView read Get_Parent;
    property Query: WideString read Get_Query;
  end;

// *********************************************************************//
// DispIntf:  IViewEntryCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157C-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewEntryCollectionDisp = dispinterface
    ['{2913157C-2EED-1069-BF5D-00DD011186B7}']
    property Count: Integer readonly dispid 1610743808;
    property Parent: IView readonly dispid 1610743809;
    property Query: WideString readonly dispid 1610743810;
    procedure AddEntry(const pIObj: IUnknown; bReserved: WordBool); dispid 1610743811;
    procedure DeleteEntry(const pIEntry: IViewEntry); dispid 1610743812;
    procedure FTSearch(const pQuery: WideString; lMaxDocs: Integer); dispid 1610743813;
    function GetEntry(const pIObj: IUnknown): IViewEntry; dispid 1610743814;
    function GetFirstEntry: IViewEntry; dispid 1610743815;
    function GetLastEntry: IViewEntry; dispid 1610743816;
    function GetNextEntry(const pIEntry: IViewEntry): IViewEntry; dispid 1610743817;
    function GetNthEntry(lN: Integer): IViewEntry; dispid 1610743818;
    function GetPrevEntry(const pIEntry: IViewEntry): IViewEntry; dispid 1610743819;
    procedure PutAllInFolder(const pFolderName: WideString; bCreateonfail: WordBool); dispid 1610743820;
    procedure RemoveAll(bForce: WordBool); dispid 1610743821;
    procedure RemoveAllFromFolder(const pFolderName: WideString); dispid 1610743822;
    procedure StampAll(const pItemName: WideString; Value: OleVariant); dispid 1610743823;
    procedure UpdateAll; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: IViewEntry
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157B-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewEntry = interface(IDispatch)
    ['{2913157B-2EED-1069-BF5D-00DD011186B7}']
    function Get_ChildCount: Integer; safecall;
    function Get_ColumnIndentLevel: Integer; safecall;
    function Get_ColumnValues: OleVariant; safecall;
    function Get_DescendantCount: Integer; safecall;
    function Get_Document: IDocument; safecall;
    function Get_FTSearchScore: Integer; safecall;
    function Get_IndentLevel: Integer; safecall;
    function Get_IsCategory: WordBool; safecall;
    function Get_IsConflict: WordBool; safecall;
    function Get_IsDocument: WordBool; safecall;
    function Get_IsTotal: WordBool; safecall;
    function Get_IsValid: WordBool; safecall;
    function Get_NoteID: WideString; safecall;
    function Get_Parent: IUnknown; safecall;
    function Get_SiblingCount: Integer; safecall;
    function Get_UniversalID: WideString; safecall;
    function GetPosition(const pSeparator: WideString): WideString; safecall;
    property ChildCount: Integer read Get_ChildCount;
    property ColumnIndentLevel: Integer read Get_ColumnIndentLevel;
    property ColumnValues: OleVariant read Get_ColumnValues;
    property DescendantCount: Integer read Get_DescendantCount;
    property Document: IDocument read Get_Document;
    property FTSearchScore: Integer read Get_FTSearchScore;
    property IndentLevel: Integer read Get_IndentLevel;
    property IsCategory: WordBool read Get_IsCategory;
    property IsConflict: WordBool read Get_IsConflict;
    property IsDocument: WordBool read Get_IsDocument;
    property IsTotal: WordBool read Get_IsTotal;
    property IsValid: WordBool read Get_IsValid;
    property NoteID: WideString read Get_NoteID;
    property Parent: IUnknown read Get_Parent;
    property SiblingCount: Integer read Get_SiblingCount;
    property UniversalID: WideString read Get_UniversalID;
  end;

// *********************************************************************//
// DispIntf:  IViewEntryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157B-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewEntryDisp = dispinterface
    ['{2913157B-2EED-1069-BF5D-00DD011186B7}']
    property ChildCount: Integer readonly dispid 1610743808;
    property ColumnIndentLevel: Integer readonly dispid 1610743809;
    property ColumnValues: OleVariant readonly dispid 1610743810;
    property DescendantCount: Integer readonly dispid 1610743811;
    property Document: IDocument readonly dispid 1610743812;
    property FTSearchScore: Integer readonly dispid 1610743813;
    property IndentLevel: Integer readonly dispid 1610743814;
    property IsCategory: WordBool readonly dispid 1610743815;
    property IsConflict: WordBool readonly dispid 1610743816;
    property IsDocument: WordBool readonly dispid 1610743817;
    property IsTotal: WordBool readonly dispid 1610743818;
    property IsValid: WordBool readonly dispid 1610743819;
    property NoteID: WideString readonly dispid 1610743820;
    property Parent: IUnknown readonly dispid 1610743821;
    property SiblingCount: Integer readonly dispid 1610743822;
    property UniversalID: WideString readonly dispid 1610743823;
    function GetPosition(const pSeparator: WideString): WideString; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: IViewNavigator
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157D-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewNavigator = interface(IDispatch)
    ['{2913157D-2EED-1069-BF5D-00DD011186B7}']
    function Get_CacheSize: Integer; safecall;
    procedure Set_CacheSize(plSize: Integer); safecall;
    function Get_MaxLevel: Integer; safecall;
    procedure Set_MaxLevel(plLevel: Integer); safecall;
    function Get_ParentView: IView; safecall;
    function GetChild(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetEntry(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetCurrent: IViewEntry; safecall;
    function GetFirst: IViewEntry; safecall;
    function GetFirstDocument: IViewEntry; safecall;
    function GetLast: IViewEntry; safecall;
    function GetLastDocument: IViewEntry; safecall;
    function GetNext(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetNextCategory(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetNextDocument(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetNextSibling(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetNth(lN: Integer): IViewEntry; safecall;
    function GetParent(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetPos(const pPos: WideString; const pSeparator: WideString): IViewEntry; safecall;
    function GetPrev(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetPrevCategory(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetPrevDocument(const pICurrent: IViewEntry): IViewEntry; safecall;
    function GetPrevSibling(const pICurrent: IViewEntry): IViewEntry; safecall;
    procedure GotoChild(const pIViewEntry: IViewEntry); safecall;
    procedure GotoEntry(const pIObj: IUnknown); safecall;
    procedure GotoFirst; safecall;
    procedure GotoFirstDocument; safecall;
    procedure GotoLast; safecall;
    procedure GotoLastDocument; safecall;
    procedure GotoNext(const pIViewEntry: IViewEntry); safecall;
    procedure GotoNextCategory(const pIViewEntry: IViewEntry); safecall;
    procedure GotoNextDocument(const pIViewEntry: IViewEntry); safecall;
    procedure GotoNextSibling(const pIViewEntry: IViewEntry); safecall;
    procedure GotoParent(const pIViewEntry: IViewEntry); safecall;
    procedure GotoPos(const pPos: WideString; const pSeparator: WideString); safecall;
    procedure GotoPrev(const pIViewEntry: IViewEntry); safecall;
    procedure GotoPrevCategory(const pIViewEntry: IViewEntry); safecall;
    procedure GotoPrevDocument(const pIViewEntry: IViewEntry); safecall;
    procedure GotoPrevSibling(const pIViewEntry: IViewEntry); safecall;
    function Get_Count: Integer; safecall;
    property CacheSize: Integer read Get_CacheSize write Set_CacheSize;
    property MaxLevel: Integer read Get_MaxLevel write Set_MaxLevel;
    property ParentView: IView read Get_ParentView;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IViewNavigatorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157D-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewNavigatorDisp = dispinterface
    ['{2913157D-2EED-1069-BF5D-00DD011186B7}']
    property CacheSize: Integer dispid 1610743808;
    property MaxLevel: Integer dispid 1610743810;
    property ParentView: IView readonly dispid 1610743812;
    function GetChild(const pICurrent: IViewEntry): IViewEntry; dispid 1610743813;
    function GetEntry(const pICurrent: IViewEntry): IViewEntry; dispid 1610743814;
    function GetCurrent: IViewEntry; dispid 1610743815;
    function GetFirst: IViewEntry; dispid 1610743816;
    function GetFirstDocument: IViewEntry; dispid 1610743817;
    function GetLast: IViewEntry; dispid 1610743818;
    function GetLastDocument: IViewEntry; dispid 1610743819;
    function GetNext(const pICurrent: IViewEntry): IViewEntry; dispid 1610743820;
    function GetNextCategory(const pICurrent: IViewEntry): IViewEntry; dispid 1610743821;
    function GetNextDocument(const pICurrent: IViewEntry): IViewEntry; dispid 1610743822;
    function GetNextSibling(const pICurrent: IViewEntry): IViewEntry; dispid 1610743823;
    function GetNth(lN: Integer): IViewEntry; dispid 1610743824;
    function GetParent(const pICurrent: IViewEntry): IViewEntry; dispid 1610743825;
    function GetPos(const pPos: WideString; const pSeparator: WideString): IViewEntry; dispid 1610743826;
    function GetPrev(const pICurrent: IViewEntry): IViewEntry; dispid 1610743827;
    function GetPrevCategory(const pICurrent: IViewEntry): IViewEntry; dispid 1610743828;
    function GetPrevDocument(const pICurrent: IViewEntry): IViewEntry; dispid 1610743829;
    function GetPrevSibling(const pICurrent: IViewEntry): IViewEntry; dispid 1610743830;
    procedure GotoChild(const pIViewEntry: IViewEntry); dispid 1610743831;
    procedure GotoEntry(const pIObj: IUnknown); dispid 1610743832;
    procedure GotoFirst; dispid 1610743833;
    procedure GotoFirstDocument; dispid 1610743834;
    procedure GotoLast; dispid 1610743835;
    procedure GotoLastDocument; dispid 1610743836;
    procedure GotoNext(const pIViewEntry: IViewEntry); dispid 1610743837;
    procedure GotoNextCategory(const pIViewEntry: IViewEntry); dispid 1610743838;
    procedure GotoNextDocument(const pIViewEntry: IViewEntry); dispid 1610743839;
    procedure GotoNextSibling(const pIViewEntry: IViewEntry); dispid 1610743840;
    procedure GotoParent(const pIViewEntry: IViewEntry); dispid 1610743841;
    procedure GotoPos(const pPos: WideString; const pSeparator: WideString); dispid 1610743842;
    procedure GotoPrev(const pIViewEntry: IViewEntry); dispid 1610743843;
    procedure GotoPrevCategory(const pIViewEntry: IViewEntry); dispid 1610743844;
    procedure GotoPrevDocument(const pIViewEntry: IViewEntry); dispid 1610743845;
    procedure GotoPrevSibling(const pIViewEntry: IViewEntry); dispid 1610743846;
    property Count: Integer readonly dispid 1610743847;
  end;

// *********************************************************************//
// Interface: IViewColumn
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewColumn = interface(IDispatch)
    ['{2913157A-2EED-1069-BF5D-00DD011186B7}']
    function Get_Alignment: VC_ALIGN; safecall;
    function Get_DateFmt: VC_DATEFMT; safecall;
    function Get_FontColor: COLORS; safecall;
    function Get_FontFace: WideString; safecall;
    function Get_FontPointSize: Integer; safecall;
    function Get_FontStyle: VC_FONTSTYLE; safecall;
    function Get_Formula: WideString; safecall;
    function Get_HeaderAlignment: VC_ALIGN; safecall;
    function Get_IsAccentSensitiveSort: WordBool; safecall;
    function Get_IsCaseSensitiveSort: WordBool; safecall;
    function Get_IsCategory: WordBool; safecall;
    function Get_IsField: WordBool; safecall;
    function Get_IsFormula: WordBool; safecall;
    function Get_IsHidden: WordBool; safecall;
    function Get_IsHideDetail: WordBool; safecall;
    function Get_IsIcon: WordBool; safecall;
    function Get_IsResize: WordBool; safecall;
    function Get_IsResortAscending: WordBool; safecall;
    function Get_IsResortDescending: WordBool; safecall;
    function Get_IsResortToView: WordBool; safecall;
    function Get_IsResponse: WordBool; safecall;
    function Get_IsSecondaryResort: WordBool; safecall;
    function Get_IsSecondaryResortDescending: WordBool; safecall;
    function Get_IsShowTwistie: WordBool; safecall;
    function Get_IsSortDescending: WordBool; safecall;
    function Get_IsSorted: WordBool; safecall;
    function Get_ItemName: WideString; safecall;
    function Get_ListSep: VC_SEP; safecall;
    function Get_NumberAttrib: VC_NUMATTR; safecall;
    function Get_NumberDigits: Integer; safecall;
    function Get_NumberFormat: VC_NUMFMT; safecall;
    function Get_Parent: IView; safecall;
    function Get_Position: Integer; safecall;
    function Get_TimeDateFmt: VC_TDFMT; safecall;
    function Get_TimeFmt: VC_TIMEFMT; safecall;
    function Get_TimeZoneFmt: VC_TIMEZONEFMT; safecall;
    function Get_Title: WideString; safecall;
    function Get_Width: Integer; safecall;
    function Get_HeaderFontColor: Integer; safecall;
    function Get_HeaderFontFace: WideString; safecall;
    function Get_HeaderFontPointSize: Integer; safecall;
    function Get_HeaderFontStyle: Integer; safecall;
    function Get_SecondaryResortColumnIndex: Integer; safecall;
    function Get_IsFontBold: WordBool; safecall;
    function Get_IsFontItalic: WordBool; safecall;
    function Get_IsFontUnderline: WordBool; safecall;
    function Get_IsFontStrikethrough: WordBool; safecall;
    function Get_IsHeaderFontBold: WordBool; safecall;
    function Get_IsHeaderFontItalic: WordBool; safecall;
    function Get_IsHeaderFontUnderline: WordBool; safecall;
    function Get_IsHeaderFontStrikethrough: WordBool; safecall;
    function Get_IsNumberAttribParens: WordBool; safecall;
    function Get_IsNumberAttribPunctuated: WordBool; safecall;
    function Get_IsNumberAttribPercent: WordBool; safecall;
    function Get_ResortToViewName: WideString; safecall;
    procedure Set_Alignment(plVal: Integer); safecall;
    procedure Set_DateFmt(plVal: Integer); safecall;
    procedure Set_FontColor(plVal: Integer); safecall;
    procedure Set_FontFace(const ppResult: WideString); safecall;
    procedure Set_FontPointSize(plVal: Integer); safecall;
    procedure Set_FontStyle(plVal: Integer); safecall;
    procedure Set_Formula(const ppResult: WideString); safecall;
    procedure Set_HeaderAlignment(plVal: Integer); safecall;
    procedure Set_IsAccentSensitiveSort(pbFlag: WordBool); safecall;
    procedure Set_IsCaseSensitiveSort(pbFlag: WordBool); safecall;
    procedure Set_IsHidden(pbFlag: WordBool); safecall;
    procedure Set_IsHideDetail(pbFlag: WordBool); safecall;
    procedure Set_IsResize(pbFlag: WordBool); safecall;
    procedure Set_IsResortAscending(pbFlag: WordBool); safecall;
    procedure Set_IsResortDescending(pbFlag: WordBool); safecall;
    procedure Set_IsResortToView(pbFlag: WordBool); safecall;
    procedure Set_IsSecondaryResort(pbFlag: WordBool); safecall;
    procedure Set_IsSecondaryResortDescending(pbFlag: WordBool); safecall;
    procedure Set_IsShowTwistie(pbFlag: WordBool); safecall;
    procedure Set_IsSortDescending(pbFlag: WordBool); safecall;
    procedure Set_IsSorted(pbFlag: WordBool); safecall;
    procedure Set_ListSep(plVal: Integer); safecall;
    procedure Set_NumberAttrib(plVal: Integer); safecall;
    procedure Set_NumberDigits(plVal: Integer); safecall;
    procedure Set_NumberFormat(plVal: Integer); safecall;
    procedure Set_Position(plVal: Integer); safecall;
    procedure Set_TimeDateFmt(plVal: Integer); safecall;
    procedure Set_TimeFmt(plVal: Integer); safecall;
    procedure Set_TimeZoneFmt(plVal: Integer); safecall;
    procedure Set_Title(const ppResult: WideString); safecall;
    procedure Set_Width(plVal: Integer); safecall;
    procedure Set_HeaderFontColor(plVal: Integer); safecall;
    procedure Set_HeaderFontFace(const ppResult: WideString); safecall;
    procedure Set_HeaderFontPointSize(plVal: Integer); safecall;
    procedure Set_HeaderFontStyle(plVal: Integer); safecall;
    procedure Set_SecondaryResortColumnIndex(plVal: Integer); safecall;
    procedure Set_IsFontBold(pbFlag: WordBool); safecall;
    procedure Set_IsFontItalic(pbFlag: WordBool); safecall;
    procedure Set_IsFontUnderline(pbFlag: WordBool); safecall;
    procedure Set_IsFontStrikethrough(pbFlag: WordBool); safecall;
    procedure Set_IsHeaderFontBold(pbFlag: WordBool); safecall;
    procedure Set_IsHeaderFontItalic(pbFlag: WordBool); safecall;
    procedure Set_IsHeaderFontUnderline(pbFlag: WordBool); safecall;
    procedure Set_IsHeaderFontStrikethrough(pbFlag: WordBool); safecall;
    procedure Set_IsNumberAttribParens(pbFlag: WordBool); safecall;
    procedure Set_IsNumberAttribPunctuated(pbFlag: WordBool); safecall;
    procedure Set_IsNumberAttribPercent(pbFlag: WordBool); safecall;
    procedure Set_ResortToViewName(const ppResult: WideString); safecall;
    // Skipped Property "Alignment"
    // Skipped Property "DateFmt"
    // Skipped Property "FontColor"
    property FontFace: WideString read Get_FontFace write Set_FontFace;
    property FontPointSize: Integer read Get_FontPointSize write Set_FontPointSize;
    // Skipped Property "FontStyle"
    property Formula: WideString read Get_Formula write Set_Formula;
    // Skipped Property "HeaderAlignment"
    property IsAccentSensitiveSort: WordBool read Get_IsAccentSensitiveSort write Set_IsAccentSensitiveSort;
    property IsCaseSensitiveSort: WordBool read Get_IsCaseSensitiveSort write Set_IsCaseSensitiveSort;
    property IsCategory: WordBool read Get_IsCategory;
    property IsField: WordBool read Get_IsField;
    property IsFormula: WordBool read Get_IsFormula;
    property IsHidden: WordBool read Get_IsHidden write Set_IsHidden;
    property IsHideDetail: WordBool read Get_IsHideDetail write Set_IsHideDetail;
    property IsIcon: WordBool read Get_IsIcon;
    property IsResize: WordBool read Get_IsResize write Set_IsResize;
    property IsResortAscending: WordBool read Get_IsResortAscending write Set_IsResortAscending;
    property IsResortDescending: WordBool read Get_IsResortDescending write Set_IsResortDescending;
    property IsResortToView: WordBool read Get_IsResortToView write Set_IsResortToView;
    property IsResponse: WordBool read Get_IsResponse;
    property IsSecondaryResort: WordBool read Get_IsSecondaryResort write Set_IsSecondaryResort;
    property IsSecondaryResortDescending: WordBool read Get_IsSecondaryResortDescending write Set_IsSecondaryResortDescending;
    property IsShowTwistie: WordBool read Get_IsShowTwistie write Set_IsShowTwistie;
    property IsSortDescending: WordBool read Get_IsSortDescending write Set_IsSortDescending;
    property IsSorted: WordBool read Get_IsSorted write Set_IsSorted;
    property ItemName: WideString read Get_ItemName;
    // Skipped Property "ListSep"
    // Skipped Property "NumberAttrib"
    property NumberDigits: Integer read Get_NumberDigits write Set_NumberDigits;
    // Skipped Property "NumberFormat"
    property Parent: IView read Get_Parent;
    property Position: Integer read Get_Position write Set_Position;
    // Skipped Property "TimeDateFmt"
    // Skipped Property "TimeFmt"
    // Skipped Property "TimeZoneFmt"
    property Title: WideString read Get_Title write Set_Title;
    property Width: Integer read Get_Width write Set_Width;
    property HeaderFontColor: Integer read Get_HeaderFontColor write Set_HeaderFontColor;
    property HeaderFontFace: WideString read Get_HeaderFontFace write Set_HeaderFontFace;
    property HeaderFontPointSize: Integer read Get_HeaderFontPointSize write Set_HeaderFontPointSize;
    property HeaderFontStyle: Integer read Get_HeaderFontStyle write Set_HeaderFontStyle;
    property SecondaryResortColumnIndex: Integer read Get_SecondaryResortColumnIndex write Set_SecondaryResortColumnIndex;
    property IsFontBold: WordBool read Get_IsFontBold write Set_IsFontBold;
    property IsFontItalic: WordBool read Get_IsFontItalic write Set_IsFontItalic;
    property IsFontUnderline: WordBool read Get_IsFontUnderline write Set_IsFontUnderline;
    property IsFontStrikethrough: WordBool read Get_IsFontStrikethrough write Set_IsFontStrikethrough;
    property IsHeaderFontBold: WordBool read Get_IsHeaderFontBold write Set_IsHeaderFontBold;
    property IsHeaderFontItalic: WordBool read Get_IsHeaderFontItalic write Set_IsHeaderFontItalic;
    property IsHeaderFontUnderline: WordBool read Get_IsHeaderFontUnderline write Set_IsHeaderFontUnderline;
    property IsHeaderFontStrikethrough: WordBool read Get_IsHeaderFontStrikethrough write Set_IsHeaderFontStrikethrough;
    property IsNumberAttribParens: WordBool read Get_IsNumberAttribParens write Set_IsNumberAttribParens;
    property IsNumberAttribPunctuated: WordBool read Get_IsNumberAttribPunctuated write Set_IsNumberAttribPunctuated;
    property IsNumberAttribPercent: WordBool read Get_IsNumberAttribPercent write Set_IsNumberAttribPercent;
    property ResortToViewName: WideString read Get_ResortToViewName write Set_ResortToViewName;
  end;

// *********************************************************************//
// DispIntf:  IViewColumnDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IViewColumnDisp = dispinterface
    ['{2913157A-2EED-1069-BF5D-00DD011186B7}']
    function Alignment: VC_ALIGN; dispid 1610743808;
    function DateFmt: VC_DATEFMT; dispid 1610743809;
    function FontColor: COLORS; dispid 1610743810;
    property FontFace: WideString dispid 1610743811;
    property FontPointSize: Integer dispid 1610743812;
    function FontStyle: VC_FONTSTYLE; dispid 1610743813;
    property Formula: WideString dispid 1610743814;
    function HeaderAlignment: VC_ALIGN; dispid 1610743815;
    property IsAccentSensitiveSort: WordBool dispid 1610743816;
    property IsCaseSensitiveSort: WordBool dispid 1610743817;
    property IsCategory: WordBool readonly dispid 1610743818;
    property IsField: WordBool readonly dispid 1610743819;
    property IsFormula: WordBool readonly dispid 1610743820;
    property IsHidden: WordBool dispid 1610743821;
    property IsHideDetail: WordBool dispid 1610743822;
    property IsIcon: WordBool readonly dispid 1610743823;
    property IsResize: WordBool dispid 1610743824;
    property IsResortAscending: WordBool dispid 1610743825;
    property IsResortDescending: WordBool dispid 1610743826;
    property IsResortToView: WordBool dispid 1610743827;
    property IsResponse: WordBool readonly dispid 1610743828;
    property IsSecondaryResort: WordBool dispid 1610743829;
    property IsSecondaryResortDescending: WordBool dispid 1610743830;
    property IsShowTwistie: WordBool dispid 1610743831;
    property IsSortDescending: WordBool dispid 1610743832;
    property IsSorted: WordBool dispid 1610743833;
    property ItemName: WideString readonly dispid 1610743834;
    function ListSep: VC_SEP; dispid 1610743835;
    function NumberAttrib: VC_NUMATTR; dispid 1610743836;
    property NumberDigits: Integer dispid 1610743837;
    function NumberFormat: VC_NUMFMT; dispid 1610743838;
    property Parent: IView readonly dispid 1610743839;
    property Position: Integer dispid 1610743840;
    function TimeDateFmt: VC_TDFMT; dispid 1610743841;
    function TimeFmt: VC_TIMEFMT; dispid 1610743842;
    function TimeZoneFmt: VC_TIMEZONEFMT; dispid 1610743843;
    property Title: WideString dispid 0;
    property Width: Integer dispid 1610743845;
    property HeaderFontColor: Integer dispid 1610743846;
    property HeaderFontFace: WideString dispid 1610743847;
    property HeaderFontPointSize: Integer dispid 1610743848;
    property HeaderFontStyle: Integer dispid 1610743849;
    property SecondaryResortColumnIndex: Integer dispid 1610743850;
    property IsFontBold: WordBool dispid 1610743851;
    property IsFontItalic: WordBool dispid 1610743852;
    property IsFontUnderline: WordBool dispid 1610743853;
    property IsFontStrikethrough: WordBool dispid 1610743854;
    property IsHeaderFontBold: WordBool dispid 1610743855;
    property IsHeaderFontItalic: WordBool dispid 1610743856;
    property IsHeaderFontUnderline: WordBool dispid 1610743857;
    property IsHeaderFontStrikethrough: WordBool dispid 1610743858;
    property IsNumberAttribParens: WordBool dispid 1610743859;
    property IsNumberAttribPunctuated: WordBool dispid 1610743860;
    property IsNumberAttribPercent: WordBool dispid 1610743861;
    property ResortToViewName: WideString dispid 1610743862;
  end;

// *********************************************************************//
// Interface: IItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156B-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IItem = interface(IDispatch)
    ['{2913156B-2EED-1069-BF5D-00DD011186B7}']
    function Get_DateTimeValue: IDateTime; safecall;
    procedure Set_DateTimeValue(const ppITime: IDateTime); safecall;
    function Get_IsAuthors: WordBool; safecall;
    procedure Set_IsAuthors(pbFlag: WordBool); safecall;
    function Get_IsEncrypted: WordBool; safecall;
    procedure Set_IsEncrypted(pbFlag: WordBool); safecall;
    function Get_IsNames: WordBool; safecall;
    procedure Set_IsNames(pbFlag: WordBool); safecall;
    function Get_IsProtected: WordBool; safecall;
    procedure Set_IsProtected(pbFlag: WordBool); safecall;
    function Get_IsReaders: WordBool; safecall;
    procedure Set_IsReaders(pbFlag: WordBool); safecall;
    function Get_IsSigned: WordBool; safecall;
    procedure Set_IsSigned(pbFlag: WordBool); safecall;
    function Get_IsSummary: WordBool; safecall;
    procedure Set_IsSummary(pbFlag: WordBool); safecall;
    function Get_LastModified: OleVariant; safecall;
    function Get_Name: WideString; safecall;
    function Get_Parent: IDocument; safecall;
    function Get_SaveToDisk: WordBool; safecall;
    procedure Set_SaveToDisk(pbFlag: WordBool); safecall;
    function Get_Text: WideString; safecall;
    function Get_type_: IT_TYPE; safecall;
    function Get_ValueLength: Integer; safecall;
    function Get_Values: OleVariant; safecall;
    procedure Set_Values(pValue: OleVariant); safecall;
    function Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString; safecall;
    procedure AppendToTextList(Values: OleVariant); safecall;
    function Contains(Value: OleVariant): WordBool; safecall;
    function CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2; safecall;
    function GetMIMEEntity: IMIMEEntity; safecall;
    procedure Remove; safecall;
    property DateTimeValue: IDateTime read Get_DateTimeValue write Set_DateTimeValue;
    property IsAuthors: WordBool read Get_IsAuthors write Set_IsAuthors;
    property IsEncrypted: WordBool read Get_IsEncrypted write Set_IsEncrypted;
    property IsNames: WordBool read Get_IsNames write Set_IsNames;
    property IsProtected: WordBool read Get_IsProtected write Set_IsProtected;
    property IsReaders: WordBool read Get_IsReaders write Set_IsReaders;
    property IsSigned: WordBool read Get_IsSigned write Set_IsSigned;
    property IsSummary: WordBool read Get_IsSummary write Set_IsSummary;
    property LastModified: OleVariant read Get_LastModified;
    property Name: WideString read Get_Name;
    property Parent: IDocument read Get_Parent;
    property SaveToDisk: WordBool read Get_SaveToDisk write Set_SaveToDisk;
    property Text: WideString read Get_Text;
    property type_: IT_TYPE read Get_type_;
    property ValueLength: Integer read Get_ValueLength;
    property Values: OleVariant read Get_Values write Set_Values;
  end;

// *********************************************************************//
// DispIntf:  IItemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156B-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IItemDisp = dispinterface
    ['{2913156B-2EED-1069-BF5D-00DD011186B7}']
    property DateTimeValue: IDateTime dispid 1610743808;
    property IsAuthors: WordBool dispid 1610743810;
    property IsEncrypted: WordBool dispid 1610743812;
    property IsNames: WordBool dispid 1610743814;
    property IsProtected: WordBool dispid 1610743816;
    property IsReaders: WordBool dispid 1610743818;
    property IsSigned: WordBool dispid 1610743820;
    property IsSummary: WordBool dispid 1610743822;
    property LastModified: OleVariant readonly dispid 1610743824;
    property Name: WideString readonly dispid 0;
    property Parent: IDocument readonly dispid 1610743826;
    property SaveToDisk: WordBool dispid 1610743827;
    property Text: WideString readonly dispid 1610743829;
    property type_: IT_TYPE readonly dispid 1610743830;
    property ValueLength: Integer readonly dispid 1610743831;
    property Values: OleVariant dispid 1610743832;
    function Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString; dispid 1610743834;
    procedure AppendToTextList(Values: OleVariant); dispid 1610743835;
    function Contains(Value: OleVariant): WordBool; dispid 1610743836;
    function CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2; dispid 1610743837;
    function GetMIMEEntity: IMIMEEntity; dispid 1610743838;
    procedure Remove; dispid 1610743839;
  end;

// *********************************************************************//
// Interface: IItem2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913158A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IItem2 = interface(IItem)
    ['{2913158A-2EED-1069-BF5D-00DD011186B7}']
    function GetValueCustomDataBytes(const pDatatypeName: WideString): OleVariant; safecall;
    function GetValueDateTimeArray: OleVariant; safecall;
    procedure SetValueCustomDataBytes(const pDatatypeName: WideString; CustomData: OleVariant); safecall;
  end;

// *********************************************************************//
// DispIntf:  IItem2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913158A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IItem2Disp = dispinterface
    ['{2913158A-2EED-1069-BF5D-00DD011186B7}']
    function GetValueCustomDataBytes(const pDatatypeName: WideString): OleVariant; dispid 1610809344;
    function GetValueDateTimeArray: OleVariant; dispid 1610809345;
    procedure SetValueCustomDataBytes(const pDatatypeName: WideString; CustomData: OleVariant); dispid 1610809346;
    property DateTimeValue: IDateTime dispid 1610743808;
    property IsAuthors: WordBool dispid 1610743810;
    property IsEncrypted: WordBool dispid 1610743812;
    property IsNames: WordBool dispid 1610743814;
    property IsProtected: WordBool dispid 1610743816;
    property IsReaders: WordBool dispid 1610743818;
    property IsSigned: WordBool dispid 1610743820;
    property IsSummary: WordBool dispid 1610743822;
    property LastModified: OleVariant readonly dispid 1610743824;
    property Name: WideString readonly dispid 0;
    property Parent: IDocument readonly dispid 1610743826;
    property SaveToDisk: WordBool dispid 1610743827;
    property Text: WideString readonly dispid 1610743829;
    property type_: IT_TYPE readonly dispid 1610743830;
    property ValueLength: Integer readonly dispid 1610743831;
    property Values: OleVariant dispid 1610743832;
    function Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString; dispid 1610743834;
    procedure AppendToTextList(Values: OleVariant); dispid 1610743835;
    function Contains(Value: OleVariant): WordBool; dispid 1610743836;
    function CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2; dispid 1610743837;
    function GetMIMEEntity: IMIMEEntity; dispid 1610743838;
    procedure Remove; dispid 1610743839;
  end;

// *********************************************************************//
// Interface: IDateTime
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131564-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDateTime = interface(IDispatch)
    ['{29131564-2EED-1069-BF5D-00DD011186B7}']
    function Get_DateOnly: WideString; safecall;
    function Get_GMTTime: WideString; safecall;
    function Get_IsDST: WordBool; safecall;
    function Get_IsValidDate: WordBool; safecall;
    function Get_LocalTime: WideString; safecall;
    procedure Set_LocalTime(const ppTime: WideString); safecall;
    function Get_LSGMTTime: OleVariant; safecall;
    function Get_LSLocalTime: OleVariant; safecall;
    procedure Set_LSLocalTime(pTime: OleVariant); safecall;
    function Get_Parent: ISession; safecall;
    function Get_TimeOnly: WideString; safecall;
    function Get_TimeZone: Integer; safecall;
    function Get_ZoneTime: WideString; safecall;
    procedure AdjustDay(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure AdjustHour(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure AdjustMinute(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure AdjustMonth(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure AdjustSecond(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure AdjustYear(lAdjust: Integer; bPreserveLocalTime: WordBool); safecall;
    procedure ConvertToZone(lNewzone: Integer; bDst: WordBool); safecall;
    procedure SetAnyDate; safecall;
    procedure SetAnyTime; safecall;
    procedure SetNow; safecall;
    function TimeDifference(const pIDt: IDateTime): Integer; safecall;
    function TimeDifferenceDouble(const pIDt: IDateTime): Double; safecall;
    property DateOnly: WideString read Get_DateOnly;
    property GMTTime: WideString read Get_GMTTime;
    property IsDST: WordBool read Get_IsDST;
    property IsValidDate: WordBool read Get_IsValidDate;
    property LocalTime: WideString read Get_LocalTime write Set_LocalTime;
    property LSGMTTime: OleVariant read Get_LSGMTTime;
    property LSLocalTime: OleVariant read Get_LSLocalTime write Set_LSLocalTime;
    property Parent: ISession read Get_Parent;
    property TimeOnly: WideString read Get_TimeOnly;
    property TimeZone: Integer read Get_TimeZone;
    property ZoneTime: WideString read Get_ZoneTime;
  end;

// *********************************************************************//
// DispIntf:  IDateTimeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131564-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDateTimeDisp = dispinterface
    ['{29131564-2EED-1069-BF5D-00DD011186B7}']
    property DateOnly: WideString readonly dispid 1610743808;
    property GMTTime: WideString readonly dispid 1610743809;
    property IsDST: WordBool readonly dispid 1610743810;
    property IsValidDate: WordBool readonly dispid 1610743811;
    property LocalTime: WideString dispid 0;
    property LSGMTTime: OleVariant readonly dispid 1610743814;
    property LSLocalTime: OleVariant dispid 1610743815;
    property Parent: ISession readonly dispid 1610743817;
    property TimeOnly: WideString readonly dispid 1610743818;
    property TimeZone: Integer readonly dispid 1610743819;
    property ZoneTime: WideString readonly dispid 1610743820;
    procedure AdjustDay(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743821;
    procedure AdjustHour(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743822;
    procedure AdjustMinute(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743823;
    procedure AdjustMonth(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743824;
    procedure AdjustSecond(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743825;
    procedure AdjustYear(lAdjust: Integer; bPreserveLocalTime: WordBool); dispid 1610743826;
    procedure ConvertToZone(lNewzone: Integer; bDst: WordBool); dispid 1610743827;
    procedure SetAnyDate; dispid 1610743828;
    procedure SetAnyTime; dispid 1610743829;
    procedure SetNow; dispid 1610743830;
    function TimeDifference(const pIDt: IDateTime): Integer; dispid 1610743831;
    function TimeDifferenceDouble(const pIDt: IDateTime): Double; dispid 1610743832;
  end;

// *********************************************************************//
// Interface: ISession
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131578-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  ISession = interface(IDispatch)
    ['{29131578-2EED-1069-BF5D-00DD011186B7}']
    function Get_AddressBooks: OleVariant; safecall;
    function Get_CommonUserName: WideString; safecall;
    function Get_CurrentAgent: IAgent; safecall;
    function Get_CurrentDatabase: IDatabase; safecall;
    function Get_DocumentContext: IDocument; safecall;
    function Get_EffectiveUserName: WideString; safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_International: IInternational; safecall;
    procedure Set_ConvertMime(pbFlag: WordBool); safecall;
    function Get_ConvertMime: WordBool; safecall;
    function Get_IsOnServer: WordBool; safecall;
    function Get_LastExitStatus: Integer; safecall;
    function Get_LastRun: OleVariant; safecall;
    function Get_NotesBuildVersion: Integer; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_NotesVersion: WideString; safecall;
    function Get_Platform: WideString; safecall;
    function Get_SavedData: IDocument; safecall;
    function Get_ServerName: WideString; safecall;
    function Get_UserName: WideString; safecall;
    function Get_UserNameList: OleVariant; safecall;
    function Get_UserNameObject: IName; safecall;
    function Get_URLDatabase: IDatabase; safecall;
    function CreateDateRange: IDateRange; safecall;
    function CreateDateTime(const pDate: WideString): IDateTime; safecall;
    function CreateLog(const Name: WideString): ILog; safecall;
    function CreateName(const pName: WideString; const pLang: WideString): IName; safecall;
    function CreateNewsletter(const pIDc: IDocumentCollection): INewsletter; safecall;
    function CreateRegistration: IRegistration; safecall;
    function CreateRichTextParagraphStyle: IRichTextParagraphStyle; safecall;
    function CreateRichTextStyle: IRichTextStyle; safecall;
    function Evaluate(const pFormula: WideString; const pIDoc: IDocument): OleVariant; safecall;
    function FreeTimeSearch(const pIWindow: IDateRange; iDuration: SYSINT; Names: OleVariant; 
                            bFirstfit: WordBool): OleVariant; safecall;
    function GetDatabase(const pServer: WideString; const pFile: WideString; bCreateonfail: WordBool): IDatabase; safecall;
    function GetDbDirectory(const pServer: WideString): IDbDirectory; safecall;
    function GetEnvironmentString(const pName: WideString; bisSystem: WordBool): WideString; safecall;
    function GetEnvironmentValue(const pName: WideString; bisSystem: WordBool): OleVariant; safecall;
    procedure Initialize(const pPassword: WideString); safecall;
    procedure InitializeUsingNotesUserName(const pUser: WideString; const pPassword: WideString); safecall;
    procedure SetEnvironmentVar(const pName: WideString; Value: OleVariant; bisSystem: WordBool); safecall;
    procedure UpdateProcessedDoc(const pIDoc: IDocument); safecall;
    function Resolve(const pURL: WideString): IUnknown; safecall;
    function Get_UserGroupNameList: OleVariant; safecall;
    function CreateAdministrationProcess(const pServer: WideString): IAdministrationProcess; safecall;
    function CreateStream: INotesStream; safecall;
    function SendConsoleCommand(const pServer: WideString; const pCommand: WideString): WideString; safecall;
    function CreateColorObject: IColorObject; safecall;
    function CreateDXLExporter: IDXLExporter; safecall;
    function CreateDXLImporter: IDXLImporter; safecall;
    function GetUserPolicySettings(const pServer: WideString; const pName: WideString; 
                                   lType: SESS_POLICY; const pExplicitPolicy: WideString; 
                                   const pReserved: WideString): IDocument; safecall;
    function HashPassword(const pPassword: WideString): WideString; safecall;
    function VerifyPassword(const pPassword: WideString; const pHashedPassword: WideString): WordBool; safecall;
    function Get_OrgDirectoryPath: WideString; safecall;
    property AddressBooks: OleVariant read Get_AddressBooks;
    property CommonUserName: WideString read Get_CommonUserName;
    property CurrentAgent: IAgent read Get_CurrentAgent;
    property CurrentDatabase: IDatabase read Get_CurrentDatabase;
    property DocumentContext: IDocument read Get_DocumentContext;
    property EffectiveUserName: WideString read Get_EffectiveUserName;
    property HttpURL: WideString read Get_HttpURL;
    property International: IInternational read Get_International;
    property ConvertMime: WordBool read Get_ConvertMime write Set_ConvertMime;
    property IsOnServer: WordBool read Get_IsOnServer;
    property LastExitStatus: Integer read Get_LastExitStatus;
    property LastRun: OleVariant read Get_LastRun;
    property NotesBuildVersion: Integer read Get_NotesBuildVersion;
    property NotesURL: WideString read Get_NotesURL;
    property NotesVersion: WideString read Get_NotesVersion;
    property Platform: WideString read Get_Platform;
    property SavedData: IDocument read Get_SavedData;
    property ServerName: WideString read Get_ServerName;
    property UserName: WideString read Get_UserName;
    property UserNameList: OleVariant read Get_UserNameList;
    property UserNameObject: IName read Get_UserNameObject;
    property URLDatabase: IDatabase read Get_URLDatabase;
    property UserGroupNameList: OleVariant read Get_UserGroupNameList;
    property OrgDirectoryPath: WideString read Get_OrgDirectoryPath;
  end;

// *********************************************************************//
// DispIntf:  ISessionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131578-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  ISessionDisp = dispinterface
    ['{29131578-2EED-1069-BF5D-00DD011186B7}']
    property AddressBooks: OleVariant readonly dispid 1610743808;
    property CommonUserName: WideString readonly dispid 1610743809;
    property CurrentAgent: IAgent readonly dispid 1610743810;
    property CurrentDatabase: IDatabase readonly dispid 1610743811;
    property DocumentContext: IDocument readonly dispid 1610743812;
    property EffectiveUserName: WideString readonly dispid 1610743813;
    property HttpURL: WideString readonly dispid 1610743814;
    property International: IInternational readonly dispid 1610743815;
    property ConvertMime: WordBool dispid 1610743816;
    property IsOnServer: WordBool readonly dispid 1610743818;
    property LastExitStatus: Integer readonly dispid 1610743819;
    property LastRun: OleVariant readonly dispid 1610743820;
    property NotesBuildVersion: Integer readonly dispid 1610743821;
    property NotesURL: WideString readonly dispid 1610743822;
    property NotesVersion: WideString readonly dispid 1610743823;
    property Platform: WideString readonly dispid 1610743824;
    property SavedData: IDocument readonly dispid 1610743825;
    property ServerName: WideString readonly dispid 1610743826;
    property UserName: WideString readonly dispid 0;
    property UserNameList: OleVariant readonly dispid 1610743828;
    property UserNameObject: IName readonly dispid 1610743829;
    property URLDatabase: IDatabase readonly dispid 1610743830;
    function CreateDateRange: IDateRange; dispid 1610743831;
    function CreateDateTime(const pDate: WideString): IDateTime; dispid 1610743832;
    function CreateLog(const Name: WideString): ILog; dispid 1610743833;
    function CreateName(const pName: WideString; const pLang: WideString): IName; dispid 1610743834;
    function CreateNewsletter(const pIDc: IDocumentCollection): INewsletter; dispid 1610743835;
    function CreateRegistration: IRegistration; dispid 1610743836;
    function CreateRichTextParagraphStyle: IRichTextParagraphStyle; dispid 1610743837;
    function CreateRichTextStyle: IRichTextStyle; dispid 1610743838;
    function Evaluate(const pFormula: WideString; const pIDoc: IDocument): OleVariant; dispid 1610743839;
    function FreeTimeSearch(const pIWindow: IDateRange; iDuration: SYSINT; Names: OleVariant; 
                            bFirstfit: WordBool): OleVariant; dispid 1610743840;
    function GetDatabase(const pServer: WideString; const pFile: WideString; bCreateonfail: WordBool): IDatabase; dispid 1610743841;
    function GetDbDirectory(const pServer: WideString): IDbDirectory; dispid 1610743842;
    function GetEnvironmentString(const pName: WideString; bisSystem: WordBool): WideString; dispid 1610743843;
    function GetEnvironmentValue(const pName: WideString; bisSystem: WordBool): OleVariant; dispid 1610743844;
    procedure Initialize(const pPassword: WideString); dispid 1610743845;
    procedure InitializeUsingNotesUserName(const pUser: WideString; const pPassword: WideString); dispid 1610743846;
    procedure SetEnvironmentVar(const pName: WideString; Value: OleVariant; bisSystem: WordBool); dispid 1610743847;
    procedure UpdateProcessedDoc(const pIDoc: IDocument); dispid 1610743848;
    function Resolve(const pURL: WideString): IUnknown; dispid 1610743849;
    property UserGroupNameList: OleVariant readonly dispid 1610743850;
    function CreateAdministrationProcess(const pServer: WideString): IAdministrationProcess; dispid 1610743851;
    function CreateStream: INotesStream; dispid 1610743852;
    function SendConsoleCommand(const pServer: WideString; const pCommand: WideString): WideString; dispid 1610743853;
    function CreateColorObject: IColorObject; dispid 1610743854;
    function CreateDXLExporter: IDXLExporter; dispid 1610743855;
    function CreateDXLImporter: IDXLImporter; dispid 1610743856;
    function GetUserPolicySettings(const pServer: WideString; const pName: WideString; 
                                   lType: SESS_POLICY; const pExplicitPolicy: WideString; 
                                   const pReserved: WideString): IDocument; dispid 1610743857;
    function HashPassword(const pPassword: WideString): WideString; dispid 1610743858;
    function VerifyPassword(const pPassword: WideString; const pHashedPassword: WideString): WordBool; dispid 1610743859;
    property OrgDirectoryPath: WideString readonly dispid 1610743860;
  end;

// *********************************************************************//
// Interface: IAgent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131562-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IAgent = interface(IDispatch)
    ['{29131562-2EED-1069-BF5D-00DD011186B7}']
    function Get_Comment: WideString; safecall;
    function Get_CommonOwner: WideString; safecall;
    function Get_HasRunSinceModified: WordBool; safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_IsEnabled: WordBool; safecall;
    procedure Set_IsEnabled(pbFlag: WordBool); safecall;
    function Get_IsNotesAgent: WordBool; safecall;
    function Get_IsPublic: WordBool; safecall;
    function Get_IsWebAgent: WordBool; safecall;
    function Get_LastRun: OleVariant; safecall;
    function Get_Name: WideString; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_Owner: WideString; safecall;
    function Get_ParameterDocID: WideString; safecall;
    function Get_Parent: IDatabase; safecall;
    function Get_Query: WideString; safecall;
    function Get_ServerName: WideString; safecall;
    procedure Set_ServerName(const ppName: WideString); safecall;
    function Get_Target: AG_TARGET; safecall;
    function Get_Trigger: AG_TRIGGER; safecall;
    procedure Remove; safecall;
    procedure Run(const pNoteid: WideString); safecall;
    procedure RunOnServer(const pNoteid: WideString); safecall;
    procedure Save; safecall;
    function Get_OnBehalfOf: WideString; safecall;
    function Lock(const pName: OleVariant; bProvisionalOK: WordBool): WordBool; safecall;
    function LockProvisional(const pName: OleVariant): WordBool; safecall;
    procedure Unlock; safecall;
    function Get_LockHolders: OleVariant; safecall;
    function Get_IsActivatable: WordBool; safecall;
    property Comment: WideString read Get_Comment;
    property CommonOwner: WideString read Get_CommonOwner;
    property HasRunSinceModified: WordBool read Get_HasRunSinceModified;
    property HttpURL: WideString read Get_HttpURL;
    property IsEnabled: WordBool read Get_IsEnabled write Set_IsEnabled;
    property IsNotesAgent: WordBool read Get_IsNotesAgent;
    property IsPublic: WordBool read Get_IsPublic;
    property IsWebAgent: WordBool read Get_IsWebAgent;
    property LastRun: OleVariant read Get_LastRun;
    property Name: WideString read Get_Name;
    property NotesURL: WideString read Get_NotesURL;
    property Owner: WideString read Get_Owner;
    property ParameterDocID: WideString read Get_ParameterDocID;
    property Parent: IDatabase read Get_Parent;
    property Query: WideString read Get_Query;
    property ServerName: WideString read Get_ServerName write Set_ServerName;
    property Target: AG_TARGET read Get_Target;
    property Trigger: AG_TRIGGER read Get_Trigger;
    property OnBehalfOf: WideString read Get_OnBehalfOf;
    property LockHolders: OleVariant read Get_LockHolders;
    property IsActivatable: WordBool read Get_IsActivatable;
  end;

// *********************************************************************//
// DispIntf:  IAgentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131562-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IAgentDisp = dispinterface
    ['{29131562-2EED-1069-BF5D-00DD011186B7}']
    property Comment: WideString readonly dispid 1610743808;
    property CommonOwner: WideString readonly dispid 1610743809;
    property HasRunSinceModified: WordBool readonly dispid 1610743810;
    property HttpURL: WideString readonly dispid 1610743811;
    property IsEnabled: WordBool dispid 1610743812;
    property IsNotesAgent: WordBool readonly dispid 1610743814;
    property IsPublic: WordBool readonly dispid 1610743815;
    property IsWebAgent: WordBool readonly dispid 1610743816;
    property LastRun: OleVariant readonly dispid 1610743817;
    property Name: WideString readonly dispid 0;
    property NotesURL: WideString readonly dispid 1610743819;
    property Owner: WideString readonly dispid 1610743820;
    property ParameterDocID: WideString readonly dispid 1610743821;
    property Parent: IDatabase readonly dispid 1610743822;
    property Query: WideString readonly dispid 1610743823;
    property ServerName: WideString dispid 1610743824;
    property Target: AG_TARGET readonly dispid 1610743826;
    property Trigger: AG_TRIGGER readonly dispid 1610743827;
    procedure Remove; dispid 1610743828;
    procedure Run(const pNoteid: WideString); dispid 1610743829;
    procedure RunOnServer(const pNoteid: WideString); dispid 1610743830;
    procedure Save; dispid 1610743831;
    property OnBehalfOf: WideString readonly dispid 1610743832;
    function Lock(const pName: OleVariant; bProvisionalOK: WordBool): WordBool; dispid 1610743833;
    function LockProvisional(const pName: OleVariant): WordBool; dispid 1610743834;
    procedure Unlock; dispid 1610743835;
    property LockHolders: OleVariant readonly dispid 1610743836;
    property IsActivatable: WordBool readonly dispid 1610743837;
  end;

// *********************************************************************//
// Interface: IInternational
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156C-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IInternational = interface(IDispatch)
    ['{2913156C-2EED-1069-BF5D-00DD011186B7}']
    function Get_AMString: WideString; safecall;
    function Get_CurrencyDigits: Integer; safecall;
    function Get_CurrencySymbol: WideString; safecall;
    function Get_DateSep: WideString; safecall;
    function Get_DecimalSep: WideString; safecall;
    function Get_IsCurrencySpace: WordBool; safecall;
    function Get_IsCurrencySuffix: WordBool; safecall;
    function Get_IsCurrencyZero: WordBool; safecall;
    function Get_IsDateDMY: WordBool; safecall;
    function Get_IsDateMDY: WordBool; safecall;
    function Get_IsDateYMD: WordBool; safecall;
    function Get_IsDST: WordBool; safecall;
    function Get_IsTime24Hour: WordBool; safecall;
    function Get_Parent: ISession; safecall;
    function Get_PMString: WideString; safecall;
    function Get_ThousandsSep: WideString; safecall;
    function Get_TimeSep: WideString; safecall;
    function Get_TimeZone: Integer; safecall;
    function Get_Today: WideString; safecall;
    function Get_Tomorrow: WideString; safecall;
    function Get_Yesterday: WideString; safecall;
    property AMString: WideString read Get_AMString;
    property CurrencyDigits: Integer read Get_CurrencyDigits;
    property CurrencySymbol: WideString read Get_CurrencySymbol;
    property DateSep: WideString read Get_DateSep;
    property DecimalSep: WideString read Get_DecimalSep;
    property IsCurrencySpace: WordBool read Get_IsCurrencySpace;
    property IsCurrencySuffix: WordBool read Get_IsCurrencySuffix;
    property IsCurrencyZero: WordBool read Get_IsCurrencyZero;
    property IsDateDMY: WordBool read Get_IsDateDMY;
    property IsDateMDY: WordBool read Get_IsDateMDY;
    property IsDateYMD: WordBool read Get_IsDateYMD;
    property IsDST: WordBool read Get_IsDST;
    property IsTime24Hour: WordBool read Get_IsTime24Hour;
    property Parent: ISession read Get_Parent;
    property PMString: WideString read Get_PMString;
    property ThousandsSep: WideString read Get_ThousandsSep;
    property TimeSep: WideString read Get_TimeSep;
    property TimeZone: Integer read Get_TimeZone;
    property Today: WideString read Get_Today;
    property Tomorrow: WideString read Get_Tomorrow;
    property Yesterday: WideString read Get_Yesterday;
  end;

// *********************************************************************//
// DispIntf:  IInternationalDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156C-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IInternationalDisp = dispinterface
    ['{2913156C-2EED-1069-BF5D-00DD011186B7}']
    property AMString: WideString readonly dispid 1610743808;
    property CurrencyDigits: Integer readonly dispid 1610743809;
    property CurrencySymbol: WideString readonly dispid 1610743810;
    property DateSep: WideString readonly dispid 1610743811;
    property DecimalSep: WideString readonly dispid 1610743812;
    property IsCurrencySpace: WordBool readonly dispid 1610743813;
    property IsCurrencySuffix: WordBool readonly dispid 1610743814;
    property IsCurrencyZero: WordBool readonly dispid 1610743815;
    property IsDateDMY: WordBool readonly dispid 1610743816;
    property IsDateMDY: WordBool readonly dispid 1610743817;
    property IsDateYMD: WordBool readonly dispid 1610743818;
    property IsDST: WordBool readonly dispid 1610743819;
    property IsTime24Hour: WordBool readonly dispid 1610743820;
    property Parent: ISession readonly dispid 1610743821;
    property PMString: WideString readonly dispid 1610743822;
    property ThousandsSep: WideString readonly dispid 1610743823;
    property TimeSep: WideString readonly dispid 1610743824;
    property TimeZone: Integer readonly dispid 1610743825;
    property Today: WideString readonly dispid 1610743826;
    property Tomorrow: WideString readonly dispid 1610743827;
    property Yesterday: WideString readonly dispid 1610743828;
  end;

// *********************************************************************//
// Interface: IName
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156E-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IName = interface(IDispatch)
    ['{2913156E-2EED-1069-BF5D-00DD011186B7}']
    function Get_Abbreviated: WideString; safecall;
    function Get_Addr821: WideString; safecall;
    function Get_Addr822Comment1: WideString; safecall;
    function Get_Addr822Comment2: WideString; safecall;
    function Get_Addr822Comment3: WideString; safecall;
    function Get_Addr822LocalPart: WideString; safecall;
    function Get_Addr822Phrase: WideString; safecall;
    function Get_ADMD: WideString; safecall;
    function Get_Canonical: WideString; safecall;
    function Get_Common: WideString; safecall;
    function Get_Country: WideString; safecall;
    function Get_Generation: WideString; safecall;
    function Get_Given: WideString; safecall;
    function Get_Initials: WideString; safecall;
    function Get_IsHierarchical: WordBool; safecall;
    function Get_Keyword: WideString; safecall;
    function Get_Language: WideString; safecall;
    function Get_Organization: WideString; safecall;
    function Get_OrgUnit1: WideString; safecall;
    function Get_OrgUnit2: WideString; safecall;
    function Get_OrgUnit3: WideString; safecall;
    function Get_OrgUnit4: WideString; safecall;
    function Get_Parent: ISession; safecall;
    function Get_PRMD: WideString; safecall;
    function Get_Surname: WideString; safecall;
    property Abbreviated: WideString read Get_Abbreviated;
    property Addr821: WideString read Get_Addr821;
    property Addr822Comment1: WideString read Get_Addr822Comment1;
    property Addr822Comment2: WideString read Get_Addr822Comment2;
    property Addr822Comment3: WideString read Get_Addr822Comment3;
    property Addr822LocalPart: WideString read Get_Addr822LocalPart;
    property Addr822Phrase: WideString read Get_Addr822Phrase;
    property ADMD: WideString read Get_ADMD;
    property Canonical: WideString read Get_Canonical;
    property Common: WideString read Get_Common;
    property Country: WideString read Get_Country;
    property Generation: WideString read Get_Generation;
    property Given: WideString read Get_Given;
    property Initials: WideString read Get_Initials;
    property IsHierarchical: WordBool read Get_IsHierarchical;
    property Keyword: WideString read Get_Keyword;
    property Language: WideString read Get_Language;
    property Organization: WideString read Get_Organization;
    property OrgUnit1: WideString read Get_OrgUnit1;
    property OrgUnit2: WideString read Get_OrgUnit2;
    property OrgUnit3: WideString read Get_OrgUnit3;
    property OrgUnit4: WideString read Get_OrgUnit4;
    property Parent: ISession read Get_Parent;
    property PRMD: WideString read Get_PRMD;
    property Surname: WideString read Get_Surname;
  end;

// *********************************************************************//
// DispIntf:  INameDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156E-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INameDisp = dispinterface
    ['{2913156E-2EED-1069-BF5D-00DD011186B7}']
    property Abbreviated: WideString readonly dispid 1610743808;
    property Addr821: WideString readonly dispid 1610743809;
    property Addr822Comment1: WideString readonly dispid 1610743810;
    property Addr822Comment2: WideString readonly dispid 1610743811;
    property Addr822Comment3: WideString readonly dispid 1610743812;
    property Addr822LocalPart: WideString readonly dispid 1610743813;
    property Addr822Phrase: WideString readonly dispid 1610743814;
    property ADMD: WideString readonly dispid 1610743815;
    property Canonical: WideString readonly dispid 0;
    property Common: WideString readonly dispid 1610743817;
    property Country: WideString readonly dispid 1610743818;
    property Generation: WideString readonly dispid 1610743819;
    property Given: WideString readonly dispid 1610743820;
    property Initials: WideString readonly dispid 1610743821;
    property IsHierarchical: WordBool readonly dispid 1610743822;
    property Keyword: WideString readonly dispid 1610743823;
    property Language: WideString readonly dispid 1610743824;
    property Organization: WideString readonly dispid 1610743825;
    property OrgUnit1: WideString readonly dispid 1610743826;
    property OrgUnit2: WideString readonly dispid 1610743827;
    property OrgUnit3: WideString readonly dispid 1610743828;
    property OrgUnit4: WideString readonly dispid 1610743829;
    property Parent: ISession readonly dispid 1610743830;
    property PRMD: WideString readonly dispid 1610743831;
    property Surname: WideString readonly dispid 1610743832;
  end;

// *********************************************************************//
// Interface: IDateRange
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131565-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDateRange = interface(IDispatch)
    ['{29131565-2EED-1069-BF5D-00DD011186B7}']
    function Get_EndDateTime: IDateTime; safecall;
    procedure Set_EndDateTime(const ppITime: IDateTime); safecall;
    function Get_Parent: ISession; safecall;
    function Get_StartDateTime: IDateTime; safecall;
    procedure Set_StartDateTime(const ppITime: IDateTime); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const ppRange: WideString); safecall;
    property EndDateTime: IDateTime read Get_EndDateTime write Set_EndDateTime;
    property Parent: ISession read Get_Parent;
    property StartDateTime: IDateTime read Get_StartDateTime write Set_StartDateTime;
    property Text: WideString read Get_Text write Set_Text;
  end;

// *********************************************************************//
// DispIntf:  IDateRangeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131565-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDateRangeDisp = dispinterface
    ['{29131565-2EED-1069-BF5D-00DD011186B7}']
    property EndDateTime: IDateTime dispid 1610743808;
    property Parent: ISession readonly dispid 1610743810;
    property StartDateTime: IDateTime dispid 1610743811;
    property Text: WideString dispid 0;
  end;

// *********************************************************************//
// Interface: ILog
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156D-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  ILog = interface(IDispatch)
    ['{2913156D-2EED-1069-BF5D-00DD011186B7}']
    function Get_LogActions: WordBool; safecall;
    procedure Set_LogActions(pbFlag: WordBool); safecall;
    function Get_LogErrors: WordBool; safecall;
    procedure Set_LogErrors(pbFlag: WordBool); safecall;
    function Get_NumActions: Integer; safecall;
    function Get_NumErrors: Integer; safecall;
    function Get_OverwriteFile: WordBool; safecall;
    procedure Set_OverwriteFile(pbFlag: WordBool); safecall;
    function Get_ProgramName: WideString; safecall;
    procedure Set_ProgramName(const ppName: WideString); safecall;
    function Get_Parent: ISession; safecall;
    procedure Close; safecall;
    procedure LogAction(const pAction: WideString); safecall;
    procedure LogError(lCode: Integer; const pText: WideString); safecall;
    procedure LogEvent(const pText: WideString; const pQueue: WideString; lEvent: LOG_EVENTS; 
                       lSeverity: LOG_SEVERITY); safecall;
    procedure OpenAgentLog; safecall;
    procedure OpenFileLog(const pFilepath: WideString); safecall;
    procedure OpenMailLog(Recipients: OleVariant; const pSubject: WideString); safecall;
    procedure OpenNotesLog(const pServer: WideString; const pDatabase: WideString); safecall;
    property LogActions: WordBool read Get_LogActions write Set_LogActions;
    property LogErrors: WordBool read Get_LogErrors write Set_LogErrors;
    property NumActions: Integer read Get_NumActions;
    property NumErrors: Integer read Get_NumErrors;
    property OverwriteFile: WordBool read Get_OverwriteFile write Set_OverwriteFile;
    property ProgramName: WideString read Get_ProgramName write Set_ProgramName;
    property Parent: ISession read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  ILogDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156D-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  ILogDisp = dispinterface
    ['{2913156D-2EED-1069-BF5D-00DD011186B7}']
    property LogActions: WordBool dispid 1610743808;
    property LogErrors: WordBool dispid 1610743810;
    property NumActions: Integer readonly dispid 1610743812;
    property NumErrors: Integer readonly dispid 1610743813;
    property OverwriteFile: WordBool dispid 1610743814;
    property ProgramName: WideString dispid 0;
    property Parent: ISession readonly dispid 1610743818;
    procedure Close; dispid 1610743819;
    procedure LogAction(const pAction: WideString); dispid 1610743820;
    procedure LogError(lCode: Integer; const pText: WideString); dispid 1610743821;
    procedure LogEvent(const pText: WideString; const pQueue: WideString; lEvent: LOG_EVENTS; 
                       lSeverity: LOG_SEVERITY); dispid 1610743822;
    procedure OpenAgentLog; dispid 1610743823;
    procedure OpenFileLog(const pFilepath: WideString); dispid 1610743824;
    procedure OpenMailLog(Recipients: OleVariant; const pSubject: WideString); dispid 1610743825;
    procedure OpenNotesLog(const pServer: WideString; const pDatabase: WideString); dispid 1610743826;
  end;

// *********************************************************************//
// Interface: INewsletter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156F-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INewsletter = interface(IDispatch)
    ['{2913156F-2EED-1069-BF5D-00DD011186B7}']
    function Get_DoScore: WordBool; safecall;
    procedure Set_DoScore(pbFlag: WordBool); safecall;
    function Get_DoSubject: WordBool; safecall;
    procedure Set_DoSubject(pbFlag: WordBool); safecall;
    function Get_Parent: ISession; safecall;
    function Get_SubjectItemName: WideString; safecall;
    procedure Set_SubjectItemName(const ppName: WideString); safecall;
    function FormatDocument(const pIDb: IDatabase; lIndex: Integer): IDocument; safecall;
    function FormatMsgWithDoclinks(const pIDb: IDatabase): IDocument; safecall;
    property DoScore: WordBool read Get_DoScore write Set_DoScore;
    property DoSubject: WordBool read Get_DoSubject write Set_DoSubject;
    property Parent: ISession read Get_Parent;
    property SubjectItemName: WideString read Get_SubjectItemName write Set_SubjectItemName;
  end;

// *********************************************************************//
// DispIntf:  INewsletterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156F-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INewsletterDisp = dispinterface
    ['{2913156F-2EED-1069-BF5D-00DD011186B7}']
    property DoScore: WordBool dispid 1610743808;
    property DoSubject: WordBool dispid 1610743810;
    property Parent: ISession readonly dispid 1610743812;
    property SubjectItemName: WideString dispid 1610743813;
    function FormatDocument(const pIDb: IDatabase; lIndex: Integer): IDocument; dispid 1610743815;
    function FormatMsgWithDoclinks(const pIDb: IDatabase): IDocument; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IRegistration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131572-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRegistration = interface(IDispatch)
    ['{29131572-2EED-1069-BF5D-00DD011186B7}']
    function Get_CertifierIDFile: WideString; safecall;
    procedure Set_CertifierIDFile(const ppFile: WideString); safecall;
    function Get_CreateMailDb: WordBool; safecall;
    procedure Set_CreateMailDb(pbFlag: WordBool); safecall;
    function Get_Expiration: OleVariant; safecall;
    procedure Set_Expiration(pDate: OleVariant); safecall;
    function Get_IDType: REG_TYPE; safecall;
    procedure Set_IDType(plType: REG_TYPE); safecall;
    function Get_IsNorthAmerican: WordBool; safecall;
    procedure Set_IsNorthAmerican(pbFlag: WordBool); safecall;
    function Get_MinPasswordLength: Integer; safecall;
    procedure Set_MinPasswordLength(plLen: Integer); safecall;
    function Get_OrgUnit: WideString; safecall;
    procedure Set_OrgUnit(const ppUnit: WideString); safecall;
    function Get_RegistrationLog: WideString; safecall;
    procedure Set_RegistrationLog(const ppLog: WideString); safecall;
    function Get_RegistrationServer: WideString; safecall;
    procedure Set_RegistrationServer(const ppServer: WideString); safecall;
    function Get_StoreIDInAddressBook: WordBool; safecall;
    procedure Set_StoreIDInAddressBook(pbFlag: WordBool); safecall;
    function Get_UpdateAddressBook: WordBool; safecall;
    procedure Set_UpdateAddressBook(pbFlag: WordBool); safecall;
    procedure AddCertifierToAddressBook(const pIdfile: WideString; const pPassword: WideString; 
                                        const pLocation: WideString; const pComment: WideString); safecall;
    procedure AddServerToAddressBook(const pIdfile: WideString; const pServer: WideString; 
                                     const pDomain: WideString; const pUserpw: WideString; 
                                     const pNetwork: WideString; const pAdminname: WideString; 
                                     const pTitle: WideString; const pLocation: WideString; 
                                     const pComment: WideString); safecall;
    procedure AddUserProfile(const pUsername: WideString; const pProfile: WideString); safecall;
    procedure AddUserToAddressBook(const pIdfile: WideString; const pFullname: WideString; 
                                   const pLastn: WideString; const pUserpw: WideString; 
                                   const pFirstn: WideString; const pMiddle: WideString; 
                                   const pMailserv: WideString; const pMailfilepath: WideString; 
                                   const pFwdaddr: WideString; const pLocation: WideString; 
                                   const pComment: WideString); safecall;
    procedure CrossCertify(const pIdfile: WideString; const pCertpw: WideString; 
                           const pComment: WideString); safecall;
    procedure DeleteIDOnServer(const pUsername: WideString; bIsserverid: WordBool); safecall;
    procedure GetIDFromServer(const pUsername: WideString; const pFilepath: WideString; 
                              bIsserverid: WordBool); safecall;
    procedure GetUserInfo(const pUsername: WideString; out ppMailserver: WideString; 
                          out ppMailfile: WideString; out ppMaildomain: WideString; 
                          out pMailsystem: Integer; out pProfile: OleVariant); safecall;
    procedure Recertify(const pIdfile: WideString; const pCertpw: WideString; 
                        const pComment: WideString); safecall;
    procedure RegisterNewCertifier(const pOrg: WideString; const pIdfile: WideString; 
                                   const pCertpw: WideString; const pCountry: WideString); safecall;
    procedure RegisterNewServer(const pServer: WideString; const pIdfile: WideString; 
                                const pDomain: WideString; const pServerpw: WideString; 
                                const pCertpw: WideString; const pLocation: WideString; 
                                const pComment: WideString; const pNetwork: WideString; 
                                const pAdminname: WideString; const pTitle: WideString); safecall;
    procedure RegisterNewUser(const pLastn: WideString; const pIdfile: WideString; 
                              const pServer: WideString; const pFirstn: WideString; 
                              const pMiddle: WideString; const pCertpw: WideString; 
                              const pLocation: WideString; const pComment: WideString; 
                              const pMaildbpath: WideString; const pForward: WideString; 
                              const pUserpw: WideString; const pAltName: WideString; 
                              const pAltLang: WideString; type_: USER_TYPE); safecall;
    function SwitchToID(const pIdfile: WideString; const pUserpw: WideString): WideString; safecall;
    function Get_CertifierName: WideString; safecall;
    procedure Set_CertifierName(const ppCertName: WideString); safecall;
    function Get_MailACLManager: WideString; safecall;
    procedure Set_MailACLManager(const ppMailACLManager: WideString); safecall;
    function Get_MailInternetAddress: WideString; safecall;
    procedure Set_MailInternetAddress(const ppMailInternetAddress: WideString); safecall;
    function Get_MailTemplateName: WideString; safecall;
    procedure Set_MailTemplateName(const ppMailTemplateName: WideString); safecall;
    function Get_PolicyName: WideString; safecall;
    procedure Set_PolicyName(const ppPolicyName: WideString); safecall;
    function Get_RoamingServer: WideString; safecall;
    procedure Set_RoamingServer(const ppRoamingServer: WideString); safecall;
    function Get_RoamingSubdir: WideString; safecall;
    procedure Set_RoamingSubdir(const ppRoamingSubdir: WideString); safecall;
    function Get_ShortName: WideString; safecall;
    procedure Set_ShortName(const ppShortName: WideString); safecall;
    function Get_EnforceUniqueShortName: WordBool; safecall;
    procedure Set_EnforceUniqueShortName(pbEnforceUniqueShortName: WordBool); safecall;
    function Get_IsRoamingUser: WordBool; safecall;
    procedure Set_IsRoamingUser(pbIsRoamingUser: WordBool); safecall;
    function Get_MailCreateFTIndex: WordBool; safecall;
    procedure Set_MailCreateFTIndex(pbMailCreateFTIndex: WordBool); safecall;
    function Get_NoIDFile: WordBool; safecall;
    procedure Set_NoIDFile(pbNoIDFile: WordBool); safecall;
    function Get_StoreIDInMailfile: WordBool; safecall;
    procedure Set_StoreIDInMailfile(pbStoreIDInMailfile: WordBool); safecall;
    function Get_SynchInternetPassword: WordBool; safecall;
    procedure Set_SynchInternetPassword(pbSynchInternetPassword: WordBool); safecall;
    function Get_UseCertificateAuthority: WordBool; safecall;
    procedure Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool); safecall;
    function Get_MailOwnerAccess: REG_MAILOWNACL; safecall;
    procedure Set_MailOwnerAccess(plMailOwnerAccess: REG_MAILOWNACL); safecall;
    function Get_MailSystem: REG_MAILTYPE; safecall;
    procedure Set_MailSystem(plMailSystem: REG_MAILTYPE); safecall;
    function Get_RoamingCleanupSetting: REG_ROAMCLEANUP; safecall;
    procedure Set_RoamingCleanupSetting(plRoamingCleanupSetting: REG_ROAMCLEANUP); safecall;
    function Get_MailQuotaSizeLimit: Integer; safecall;
    procedure Set_MailQuotaSizeLimit(plMailQuotaSizeLimit: Integer); safecall;
    function Get_MailQuotaWarningThreshold: Integer; safecall;
    procedure Set_MailQuotaWarningThreshold(plMailQuotaWarningThreshold: Integer); safecall;
    function Get_RoamingCleanupPeriod: Integer; safecall;
    procedure Set_RoamingCleanupPeriod(plRoamingCleanupPeriod: Integer); safecall;
    function Get_GroupList: OleVariant; safecall;
    procedure Set_GroupList(pGroupList: OleVariant); safecall;
    function Get_MailReplicaServers: OleVariant; safecall;
    procedure Set_MailReplicaServers(pMailReplicaServers: OleVariant); safecall;
    function Get_AltOrgUnit: OleVariant; safecall;
    procedure Set_AltOrgUnit(pAltOrgUnit: OleVariant); safecall;
    function Get_AltOrgUnitLang: OleVariant; safecall;
    procedure Set_AltOrgUnitLang(pAltOrgUnitLang: OleVariant); safecall;
    property CertifierIDFile: WideString read Get_CertifierIDFile write Set_CertifierIDFile;
    property CreateMailDb: WordBool read Get_CreateMailDb write Set_CreateMailDb;
    property Expiration: OleVariant read Get_Expiration write Set_Expiration;
    property IDType: REG_TYPE read Get_IDType write Set_IDType;
    property IsNorthAmerican: WordBool read Get_IsNorthAmerican write Set_IsNorthAmerican;
    property MinPasswordLength: Integer read Get_MinPasswordLength write Set_MinPasswordLength;
    property OrgUnit: WideString read Get_OrgUnit write Set_OrgUnit;
    property RegistrationLog: WideString read Get_RegistrationLog write Set_RegistrationLog;
    property RegistrationServer: WideString read Get_RegistrationServer write Set_RegistrationServer;
    property StoreIDInAddressBook: WordBool read Get_StoreIDInAddressBook write Set_StoreIDInAddressBook;
    property UpdateAddressBook: WordBool read Get_UpdateAddressBook write Set_UpdateAddressBook;
    property CertifierName: WideString read Get_CertifierName write Set_CertifierName;
    property MailACLManager: WideString read Get_MailACLManager write Set_MailACLManager;
    property MailInternetAddress: WideString read Get_MailInternetAddress write Set_MailInternetAddress;
    property MailTemplateName: WideString read Get_MailTemplateName write Set_MailTemplateName;
    property PolicyName: WideString read Get_PolicyName write Set_PolicyName;
    property RoamingServer: WideString read Get_RoamingServer write Set_RoamingServer;
    property RoamingSubdir: WideString read Get_RoamingSubdir write Set_RoamingSubdir;
    property ShortName: WideString read Get_ShortName write Set_ShortName;
    property EnforceUniqueShortName: WordBool read Get_EnforceUniqueShortName write Set_EnforceUniqueShortName;
    property IsRoamingUser: WordBool read Get_IsRoamingUser write Set_IsRoamingUser;
    property MailCreateFTIndex: WordBool read Get_MailCreateFTIndex write Set_MailCreateFTIndex;
    property NoIDFile: WordBool read Get_NoIDFile write Set_NoIDFile;
    property StoreIDInMailfile: WordBool read Get_StoreIDInMailfile write Set_StoreIDInMailfile;
    property SynchInternetPassword: WordBool read Get_SynchInternetPassword write Set_SynchInternetPassword;
    property UseCertificateAuthority: WordBool read Get_UseCertificateAuthority write Set_UseCertificateAuthority;
    property MailOwnerAccess: REG_MAILOWNACL read Get_MailOwnerAccess write Set_MailOwnerAccess;
    property MailSystem: REG_MAILTYPE read Get_MailSystem write Set_MailSystem;
    property RoamingCleanupSetting: REG_ROAMCLEANUP read Get_RoamingCleanupSetting write Set_RoamingCleanupSetting;
    property MailQuotaSizeLimit: Integer read Get_MailQuotaSizeLimit write Set_MailQuotaSizeLimit;
    property MailQuotaWarningThreshold: Integer read Get_MailQuotaWarningThreshold write Set_MailQuotaWarningThreshold;
    property RoamingCleanupPeriod: Integer read Get_RoamingCleanupPeriod write Set_RoamingCleanupPeriod;
    property GroupList: OleVariant read Get_GroupList write Set_GroupList;
    property MailReplicaServers: OleVariant read Get_MailReplicaServers write Set_MailReplicaServers;
    property AltOrgUnit: OleVariant read Get_AltOrgUnit write Set_AltOrgUnit;
    property AltOrgUnitLang: OleVariant read Get_AltOrgUnitLang write Set_AltOrgUnitLang;
  end;

// *********************************************************************//
// DispIntf:  IRegistrationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131572-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRegistrationDisp = dispinterface
    ['{29131572-2EED-1069-BF5D-00DD011186B7}']
    property CertifierIDFile: WideString dispid 1610743808;
    property CreateMailDb: WordBool dispid 1610743810;
    property Expiration: OleVariant dispid 1610743812;
    property IDType: REG_TYPE dispid 1610743814;
    property IsNorthAmerican: WordBool dispid 1610743816;
    property MinPasswordLength: Integer dispid 1610743818;
    property OrgUnit: WideString dispid 1610743820;
    property RegistrationLog: WideString dispid 1610743822;
    property RegistrationServer: WideString dispid 1610743824;
    property StoreIDInAddressBook: WordBool dispid 1610743826;
    property UpdateAddressBook: WordBool dispid 1610743828;
    procedure AddCertifierToAddressBook(const pIdfile: WideString; const pPassword: WideString; 
                                        const pLocation: WideString; const pComment: WideString); dispid 1610743830;
    procedure AddServerToAddressBook(const pIdfile: WideString; const pServer: WideString; 
                                     const pDomain: WideString; const pUserpw: WideString; 
                                     const pNetwork: WideString; const pAdminname: WideString; 
                                     const pTitle: WideString; const pLocation: WideString; 
                                     const pComment: WideString); dispid 1610743831;
    procedure AddUserProfile(const pUsername: WideString; const pProfile: WideString); dispid 1610743832;
    procedure AddUserToAddressBook(const pIdfile: WideString; const pFullname: WideString; 
                                   const pLastn: WideString; const pUserpw: WideString; 
                                   const pFirstn: WideString; const pMiddle: WideString; 
                                   const pMailserv: WideString; const pMailfilepath: WideString; 
                                   const pFwdaddr: WideString; const pLocation: WideString; 
                                   const pComment: WideString); dispid 1610743833;
    procedure CrossCertify(const pIdfile: WideString; const pCertpw: WideString; 
                           const pComment: WideString); dispid 1610743834;
    procedure DeleteIDOnServer(const pUsername: WideString; bIsserverid: WordBool); dispid 1610743835;
    procedure GetIDFromServer(const pUsername: WideString; const pFilepath: WideString; 
                              bIsserverid: WordBool); dispid 1610743836;
    procedure GetUserInfo(const pUsername: WideString; out ppMailserver: WideString; 
                          out ppMailfile: WideString; out ppMaildomain: WideString; 
                          out pMailsystem: Integer; out pProfile: OleVariant); dispid 1610743837;
    procedure Recertify(const pIdfile: WideString; const pCertpw: WideString; 
                        const pComment: WideString); dispid 1610743838;
    procedure RegisterNewCertifier(const pOrg: WideString; const pIdfile: WideString; 
                                   const pCertpw: WideString; const pCountry: WideString); dispid 1610743839;
    procedure RegisterNewServer(const pServer: WideString; const pIdfile: WideString; 
                                const pDomain: WideString; const pServerpw: WideString; 
                                const pCertpw: WideString; const pLocation: WideString; 
                                const pComment: WideString; const pNetwork: WideString; 
                                const pAdminname: WideString; const pTitle: WideString); dispid 1610743840;
    procedure RegisterNewUser(const pLastn: WideString; const pIdfile: WideString; 
                              const pServer: WideString; const pFirstn: WideString; 
                              const pMiddle: WideString; const pCertpw: WideString; 
                              const pLocation: WideString; const pComment: WideString; 
                              const pMaildbpath: WideString; const pForward: WideString; 
                              const pUserpw: WideString; const pAltName: WideString; 
                              const pAltLang: WideString; type_: USER_TYPE); dispid 1610743841;
    function SwitchToID(const pIdfile: WideString; const pUserpw: WideString): WideString; dispid 1610743842;
    property CertifierName: WideString dispid 1610743843;
    property MailACLManager: WideString dispid 1610743845;
    property MailInternetAddress: WideString dispid 1610743847;
    property MailTemplateName: WideString dispid 1610743849;
    property PolicyName: WideString dispid 1610743851;
    property RoamingServer: WideString dispid 1610743853;
    property RoamingSubdir: WideString dispid 1610743855;
    property ShortName: WideString dispid 1610743857;
    property EnforceUniqueShortName: WordBool dispid 1610743859;
    property IsRoamingUser: WordBool dispid 1610743861;
    property MailCreateFTIndex: WordBool dispid 1610743863;
    property NoIDFile: WordBool dispid 1610743865;
    property StoreIDInMailfile: WordBool dispid 1610743867;
    property SynchInternetPassword: WordBool dispid 1610743869;
    property UseCertificateAuthority: WordBool dispid 1610743871;
    property MailOwnerAccess: REG_MAILOWNACL dispid 1610743873;
    property MailSystem: REG_MAILTYPE dispid 1610743875;
    property RoamingCleanupSetting: REG_ROAMCLEANUP dispid 1610743877;
    property MailQuotaSizeLimit: Integer dispid 1610743879;
    property MailQuotaWarningThreshold: Integer dispid 1610743881;
    property RoamingCleanupPeriod: Integer dispid 1610743883;
    property GroupList: OleVariant dispid 1610743885;
    property MailReplicaServers: OleVariant dispid 1610743887;
    property AltOrgUnit: OleVariant dispid 1610743889;
    property AltOrgUnitLang: OleVariant dispid 1610743891;
  end;

// *********************************************************************//
// Interface: IRichTextParagraphStyle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131576-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextParagraphStyle = interface(IDispatch)
    ['{29131576-2EED-1069-BF5D-00DD011186B7}']
    function Get_Alignment: RT_ALIGN; safecall;
    procedure Set_Alignment(plValue: RT_ALIGN); safecall;
    function Get_FirstLineLeftMargin: Integer; safecall;
    procedure Set_FirstLineLeftMargin(plValue: Integer); safecall;
    function Get_InterLineSpacing: SPACING; safecall;
    procedure Set_InterLineSpacing(plValue: SPACING); safecall;
    function Get_LeftMargin: Integer; safecall;
    procedure Set_LeftMargin(plValue: Integer); safecall;
    function Get_Pagination: RT_PAGINATE; safecall;
    procedure Set_Pagination(plValue: RT_PAGINATE); safecall;
    function Get_RightMargin: Integer; safecall;
    procedure Set_RightMargin(plValue: Integer); safecall;
    function Get_SpacingAbove: SPACING; safecall;
    procedure Set_SpacingAbove(plValue: SPACING); safecall;
    function Get_SpacingBelow: SPACING; safecall;
    procedure Set_SpacingBelow(plValue: SPACING); safecall;
    function Get_Tabs: OleVariant; safecall;
    procedure ClearAllTabs; safecall;
    procedure SetTab(lPosition: Integer; lType: RT_TAB); safecall;
    procedure SetTabs(lCount: Integer; lPosition: Integer; lInterval: Integer; lType: RT_TAB); safecall;
    property Alignment: RT_ALIGN read Get_Alignment write Set_Alignment;
    property FirstLineLeftMargin: Integer read Get_FirstLineLeftMargin write Set_FirstLineLeftMargin;
    property InterLineSpacing: SPACING read Get_InterLineSpacing write Set_InterLineSpacing;
    property LeftMargin: Integer read Get_LeftMargin write Set_LeftMargin;
    property Pagination: RT_PAGINATE read Get_Pagination write Set_Pagination;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property SpacingAbove: SPACING read Get_SpacingAbove write Set_SpacingAbove;
    property SpacingBelow: SPACING read Get_SpacingBelow write Set_SpacingBelow;
    property Tabs: OleVariant read Get_Tabs;
  end;

// *********************************************************************//
// DispIntf:  IRichTextParagraphStyleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131576-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextParagraphStyleDisp = dispinterface
    ['{29131576-2EED-1069-BF5D-00DD011186B7}']
    property Alignment: RT_ALIGN dispid 1610743808;
    property FirstLineLeftMargin: Integer dispid 1610743810;
    property InterLineSpacing: SPACING dispid 1610743812;
    property LeftMargin: Integer dispid 1610743814;
    property Pagination: RT_PAGINATE dispid 1610743816;
    property RightMargin: Integer dispid 1610743818;
    property SpacingAbove: SPACING dispid 1610743820;
    property SpacingBelow: SPACING dispid 1610743822;
    property Tabs: OleVariant readonly dispid 1610743824;
    procedure ClearAllTabs; dispid 1610743825;
    procedure SetTab(lPosition: Integer; lType: RT_TAB); dispid 1610743826;
    procedure SetTabs(lCount: Integer; lPosition: Integer; lInterval: Integer; lType: RT_TAB); dispid 1610743827;
  end;

// *********************************************************************//
// Interface: IRichTextStyle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131575-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextStyle = interface(IDispatch)
    ['{29131575-2EED-1069-BF5D-00DD011186B7}']
    function Get_Bold: Integer; safecall;
    procedure Set_Bold(plValue: Integer); safecall;
    function Get_Effects: RT_EFFECTS; safecall;
    procedure Set_Effects(plValue: RT_EFFECTS); safecall;
    function Get_FontSize: Integer; safecall;
    procedure Set_FontSize(plValue: Integer); safecall;
    function Get_Italic: Integer; safecall;
    procedure Set_Italic(plValue: Integer); safecall;
    function Get_NotesColor: COLORS; safecall;
    procedure Set_NotesColor(plValue: COLORS); safecall;
    function Get_NotesFont: RT_FONTS; safecall;
    procedure Set_NotesFont(plValue: RT_FONTS); safecall;
    function Get_PassThruHTML: Integer; safecall;
    procedure Set_PassThruHTML(plValue: Integer); safecall;
    function Get_StrikeThrough: Integer; safecall;
    procedure Set_StrikeThrough(plValue: Integer); safecall;
    function Get_Underline: Integer; safecall;
    procedure Set_Underline(plValue: Integer); safecall;
    function Get_Parent: ISession; safecall;
    function Get_IsDefault: WordBool; safecall;
    property Bold: Integer read Get_Bold write Set_Bold;
    property Effects: RT_EFFECTS read Get_Effects write Set_Effects;
    property FontSize: Integer read Get_FontSize write Set_FontSize;
    property Italic: Integer read Get_Italic write Set_Italic;
    property NotesColor: COLORS read Get_NotesColor write Set_NotesColor;
    property NotesFont: RT_FONTS read Get_NotesFont write Set_NotesFont;
    property PassThruHTML: Integer read Get_PassThruHTML write Set_PassThruHTML;
    property StrikeThrough: Integer read Get_StrikeThrough write Set_StrikeThrough;
    property Underline: Integer read Get_Underline write Set_Underline;
    property Parent: ISession read Get_Parent;
    property IsDefault: WordBool read Get_IsDefault;
  end;

// *********************************************************************//
// DispIntf:  IRichTextStyleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131575-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextStyleDisp = dispinterface
    ['{29131575-2EED-1069-BF5D-00DD011186B7}']
    property Bold: Integer dispid 1610743808;
    property Effects: RT_EFFECTS dispid 1610743810;
    property FontSize: Integer dispid 1610743812;
    property Italic: Integer dispid 1610743814;
    property NotesColor: COLORS dispid 1610743816;
    property NotesFont: RT_FONTS dispid 1610743818;
    property PassThruHTML: Integer dispid 1610743820;
    property StrikeThrough: Integer dispid 1610743822;
    property Underline: Integer dispid 1610743824;
    property Parent: ISession readonly dispid 1610743826;
    property IsDefault: WordBool readonly dispid 1610743827;
  end;

// *********************************************************************//
// Interface: IDbDirectory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131566-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDbDirectory = interface(IDispatch)
    ['{29131566-2EED-1069-BF5D-00DD011186B7}']
    function Get_Name: WideString; safecall;
    function Get_Parent: ISession; safecall;
    function CreateDatabase(const pDbfile: WideString; bOpen: WordBool): IDatabase; safecall;
    function GetFirstDatabase(lFiletype: DB_TYPES): IDatabase; safecall;
    function GetNextDatabase: IDatabase; safecall;
    function OpenDatabase(const pDbfile: WideString; bFailover: WordBool): IDatabase; safecall;
    function OpenDatabaseIfModified(const pDbfile: WideString; const pITime: IDateTime): IDatabase; safecall;
    function OpenMailDatabase: IDatabase; safecall;
    function OpenDatabaseByReplicaID(const pRid: WideString): IDatabase; safecall;
    property Name: WideString read Get_Name;
    property Parent: ISession read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  IDbDirectoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131566-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDbDirectoryDisp = dispinterface
    ['{29131566-2EED-1069-BF5D-00DD011186B7}']
    property Name: WideString readonly dispid 0;
    property Parent: ISession readonly dispid 1610743809;
    function CreateDatabase(const pDbfile: WideString; bOpen: WordBool): IDatabase; dispid 1610743810;
    function GetFirstDatabase(lFiletype: DB_TYPES): IDatabase; dispid 1610743811;
    function GetNextDatabase: IDatabase; dispid 1610743812;
    function OpenDatabase(const pDbfile: WideString; bFailover: WordBool): IDatabase; dispid 1610743813;
    function OpenDatabaseIfModified(const pDbfile: WideString; const pITime: IDateTime): IDatabase; dispid 1610743814;
    function OpenMailDatabase: IDatabase; dispid 1610743815;
    function OpenDatabaseByReplicaID(const pRid: WideString): IDatabase; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IAdministrationProcess
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131581-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IAdministrationProcess = interface(IDispatch)
    ['{29131581-2EED-1069-BF5D-00DD011186B7}']
    function Get_CertificateAuthorityOrg: WideString; safecall;
    procedure Set_CertificateAuthorityOrg(const ppCertificateAuthorityOrg: WideString); safecall;
    function Get_CertifierFile: WideString; safecall;
    procedure Set_CertifierFile(const ppCertifierFile: WideString); safecall;
    function Get_CertifierPassword: WideString; safecall;
    procedure Set_CertifierPassword(const ppCertifierPassword: WideString); safecall;
    function Get_IsCertificateAuthorityAvailable: WordBool; safecall;
    procedure Set_UseCertificateAuthority(pbUseCertificateAuthority: WordBool); safecall;
    function Get_UseCertificateAuthority: WordBool; safecall;
    function Get_CertificateExpiration: IDateTime; safecall;
    procedure Set_CertificateExpiration(const ppCertificateExpiration: IDateTime); safecall;
    function AddGroupMembers(const pGroup: WideString; Members: OleVariant): WideString; safecall;
    function AddInternetCertificateToUser(const pUser: WideString; const pKeyRingFile: WideString; 
                                          const pKeyRingPassword: WideString; 
                                          const Expiration: IDateTime): WideString; safecall;
    function AddServerToCluster(const pServer: WideString; const pCluster: WideString): WideString; safecall;
    function ApproveDeletePersonInDirectory(const pNoteid: WideString): WideString; safecall;
    function ApproveDeleteServerInDirectory(const pNoteid: WideString): WideString; safecall;
    function ApproveDesignElementDeletion(const pNoteid: WideString): WideString; safecall;
    function ApproveMailFileDeletion(const pNoteid: WideString): WideString; safecall;
    function ApproveMovedReplicaDeletion(const pNoteid: WideString): WideString; safecall;
    function ApproveNameChangeRetraction(const pNoteid: WideString): WideString; safecall;
    function ApproveRenamePersonInDirectory(const pNoteid: WideString): WideString; safecall;
    function ApproveRenameServerInDirectory(const pNoteid: WideString): WideString; safecall;
    function ApproveReplicaDeletion(const pNoteid: WideString): WideString; safecall;
    function ApproveResourceDeletion(const pNoteid: WideString): WideString; safecall;
    function ChangeHTTPPassword(const pUsername: WideString; const pOldPassword: WideString; 
                                const pNewPassword: WideString): WideString; safecall;
    function ConfigureMailAgent(const pUsername: WideString; const pAgentName: WideString; 
                                bActivatable: WordBool; bEnable: WordBool): WideString; safecall;
    function CreateReplica(const pSourceServer: WideString; const pSourceDBFile: WideString; 
                           const pDestServer: WideString; const pDestDBFile: WideString; 
                           bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString; safecall;
    function MoveReplica(const pSourceServer: WideString; const pSourceDBFile: WideString; 
                         const pDestServer: WideString; const pDestDBFile: WideString; 
                         bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString; safecall;
    function DeleteReplicas(const pServer: WideString; const pDbfile: WideString): WideString; safecall;
    function DeleteGroup(const pGroupName: WideString; bImmediate: WordBool; 
                         bDeleteWindowsGroup: WordBool): WideString; safecall;
    function DeleteServer(const pServerName: WideString; bImmediate: WordBool): WideString; safecall;
    function DeleteUser(const pUsername: WideString; bImmediate: WordBool; 
                        lMailFileAction: ADMP_MAILDEL; const pDenyGroup: WideString; 
                        bDeleteWindowsGroup: WordBool): WideString; safecall;
    function FindGroupInDomain(const pGroup: WideString): WideString; safecall;
    function FindServerInDomain(const pServer: WideString): WideString; safecall;
    function FindUserInDomain(const pUser: WideString): WideString; safecall;
    function MoveMailUser(const pUsername: WideString; const pNewHomeServer: WideString; 
                          const pNewHomeServerMailPath: WideString; bUseSCOS: WordBool; 
                          NewClusterReplicaArray: OleVariant; bDeleteOldClusterReplicas: WordBool): WideString; safecall;
    function MoveRoamingUser(const pUsername: WideString; const pDestServer: WideString; 
                             const pDestServerPath: WideString): WideString; safecall;
    function MoveUserInHierarchyRequest(const pUsername: WideString; 
                                        const pTargetCertifier: WideString; 
                                        bAllowPrimaryNameChange: WordBool): WideString; safecall;
    function MoveUserInHierarchyComplete(const pRequestNoteID: WideString; 
                                         const pLastName: WideString; const pFirstName: WideString; 
                                         const pMiddleInitial: WideString; 
                                         const pOrgUnit: WideString; 
                                         const pAltCommonName: WideString; 
                                         const pAltOrgUnit: WideString; 
                                         const pAltLanguage: WideString; 
                                         bRenameWindowsUser: WordBool): WideString; safecall;
    function RecertifyServer(const pServer: WideString): WideString; safecall;
    function RecertifyUser(const pUsername: WideString): WideString; safecall;
    function RemoveServerFromCluster(const pServer: WideString): WideString; safecall;
    function RenameGroup(const pGroup: WideString; const pNewGroup: WideString): WideString; safecall;
    function RenameNotesUser(const pUsername: WideString; const pLastName: WideString; 
                             const pFirstName: WideString; const pMiddleInitial: WideString; 
                             const pOrgUnit: WideString; const pAltCommonName: WideString; 
                             const pAltOrgUnit: WideString; const pAltLanguage: WideString; 
                             bRenameWindowsUser: WordBool): WideString; safecall;
    function RenameWebUser(const pUsername: WideString; const pNewUserName: WideString; 
                           const pNewLastName: WideString; const pNewFirstName: WideString; 
                           const pNewMiddleInitial: WideString; const pNewShortname: WideString; 
                           const pNewInternetAddress: WideString): WideString; safecall;
    function SetServerDirectoryAssistanceSettings(const pServer: WideString; 
                                                  const pDbfile: WideString): WideString; safecall;
    function SignDatabaseWithServerID(const pServer: WideString; const pDbfile: WideString; 
                                      bUpdateOnly: WordBool): WideString; safecall;
    function UpgradeUserToHierarchical(const pUsername: WideString; const pOrgUnit: WideString; 
                                       const pAltCommonName: WideString; 
                                       const pAltOrgUnit: WideString; const pAltLanguage: WideString): WideString; safecall;
    function SetUserPasswordSettings(const pUsername: WideString; 
                                     NotesPasswordCheckSetting: OleVariant; 
                                     NotesPasswordChangeInterval: OleVariant; 
                                     NotesPasswordGracePeriod: OleVariant; 
                                     InternetPasswordForceChange: OleVariant; NotUsed: ADMP_PWDCHK): WideString; safecall;
    function ApproveHostedOrgStorageDeletion(const pNoteid: WideString): WideString; safecall;
    property CertificateAuthorityOrg: WideString read Get_CertificateAuthorityOrg write Set_CertificateAuthorityOrg;
    property CertifierFile: WideString read Get_CertifierFile write Set_CertifierFile;
    property CertifierPassword: WideString read Get_CertifierPassword write Set_CertifierPassword;
    property IsCertificateAuthorityAvailable: WordBool read Get_IsCertificateAuthorityAvailable;
    property UseCertificateAuthority: WordBool read Get_UseCertificateAuthority write Set_UseCertificateAuthority;
    property CertificateExpiration: IDateTime read Get_CertificateExpiration write Set_CertificateExpiration;
  end;

// *********************************************************************//
// DispIntf:  IAdministrationProcessDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131581-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IAdministrationProcessDisp = dispinterface
    ['{29131581-2EED-1069-BF5D-00DD011186B7}']
    property CertificateAuthorityOrg: WideString dispid 1610743808;
    property CertifierFile: WideString dispid 1610743810;
    property CertifierPassword: WideString dispid 1610743812;
    property IsCertificateAuthorityAvailable: WordBool readonly dispid 1610743814;
    property UseCertificateAuthority: WordBool dispid 1610743815;
    property CertificateExpiration: IDateTime dispid 1610743817;
    function AddGroupMembers(const pGroup: WideString; Members: OleVariant): WideString; dispid 1610743819;
    function AddInternetCertificateToUser(const pUser: WideString; const pKeyRingFile: WideString; 
                                          const pKeyRingPassword: WideString; 
                                          const Expiration: IDateTime): WideString; dispid 1610743820;
    function AddServerToCluster(const pServer: WideString; const pCluster: WideString): WideString; dispid 1610743821;
    function ApproveDeletePersonInDirectory(const pNoteid: WideString): WideString; dispid 1610743822;
    function ApproveDeleteServerInDirectory(const pNoteid: WideString): WideString; dispid 1610743823;
    function ApproveDesignElementDeletion(const pNoteid: WideString): WideString; dispid 1610743824;
    function ApproveMailFileDeletion(const pNoteid: WideString): WideString; dispid 1610743825;
    function ApproveMovedReplicaDeletion(const pNoteid: WideString): WideString; dispid 1610743826;
    function ApproveNameChangeRetraction(const pNoteid: WideString): WideString; dispid 1610743827;
    function ApproveRenamePersonInDirectory(const pNoteid: WideString): WideString; dispid 1610743828;
    function ApproveRenameServerInDirectory(const pNoteid: WideString): WideString; dispid 1610743829;
    function ApproveReplicaDeletion(const pNoteid: WideString): WideString; dispid 1610743830;
    function ApproveResourceDeletion(const pNoteid: WideString): WideString; dispid 1610743831;
    function ChangeHTTPPassword(const pUsername: WideString; const pOldPassword: WideString; 
                                const pNewPassword: WideString): WideString; dispid 1610743832;
    function ConfigureMailAgent(const pUsername: WideString; const pAgentName: WideString; 
                                bActivatable: WordBool; bEnable: WordBool): WideString; dispid 1610743833;
    function CreateReplica(const pSourceServer: WideString; const pSourceDBFile: WideString; 
                           const pDestServer: WideString; const pDestDBFile: WideString; 
                           bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString; dispid 1610743834;
    function MoveReplica(const pSourceServer: WideString; const pSourceDBFile: WideString; 
                         const pDestServer: WideString; const pDestDBFile: WideString; 
                         bCopyACL: WordBool; bCreateFTIndex: WordBool): WideString; dispid 1610743835;
    function DeleteReplicas(const pServer: WideString; const pDbfile: WideString): WideString; dispid 1610743836;
    function DeleteGroup(const pGroupName: WideString; bImmediate: WordBool; 
                         bDeleteWindowsGroup: WordBool): WideString; dispid 1610743837;
    function DeleteServer(const pServerName: WideString; bImmediate: WordBool): WideString; dispid 1610743838;
    function DeleteUser(const pUsername: WideString; bImmediate: WordBool; 
                        lMailFileAction: ADMP_MAILDEL; const pDenyGroup: WideString; 
                        bDeleteWindowsGroup: WordBool): WideString; dispid 1610743839;
    function FindGroupInDomain(const pGroup: WideString): WideString; dispid 1610743840;
    function FindServerInDomain(const pServer: WideString): WideString; dispid 1610743841;
    function FindUserInDomain(const pUser: WideString): WideString; dispid 1610743842;
    function MoveMailUser(const pUsername: WideString; const pNewHomeServer: WideString; 
                          const pNewHomeServerMailPath: WideString; bUseSCOS: WordBool; 
                          NewClusterReplicaArray: OleVariant; bDeleteOldClusterReplicas: WordBool): WideString; dispid 1610743843;
    function MoveRoamingUser(const pUsername: WideString; const pDestServer: WideString; 
                             const pDestServerPath: WideString): WideString; dispid 1610743844;
    function MoveUserInHierarchyRequest(const pUsername: WideString; 
                                        const pTargetCertifier: WideString; 
                                        bAllowPrimaryNameChange: WordBool): WideString; dispid 1610743845;
    function MoveUserInHierarchyComplete(const pRequestNoteID: WideString; 
                                         const pLastName: WideString; const pFirstName: WideString; 
                                         const pMiddleInitial: WideString; 
                                         const pOrgUnit: WideString; 
                                         const pAltCommonName: WideString; 
                                         const pAltOrgUnit: WideString; 
                                         const pAltLanguage: WideString; 
                                         bRenameWindowsUser: WordBool): WideString; dispid 1610743846;
    function RecertifyServer(const pServer: WideString): WideString; dispid 1610743847;
    function RecertifyUser(const pUsername: WideString): WideString; dispid 1610743848;
    function RemoveServerFromCluster(const pServer: WideString): WideString; dispid 1610743849;
    function RenameGroup(const pGroup: WideString; const pNewGroup: WideString): WideString; dispid 1610743850;
    function RenameNotesUser(const pUsername: WideString; const pLastName: WideString; 
                             const pFirstName: WideString; const pMiddleInitial: WideString; 
                             const pOrgUnit: WideString; const pAltCommonName: WideString; 
                             const pAltOrgUnit: WideString; const pAltLanguage: WideString; 
                             bRenameWindowsUser: WordBool): WideString; dispid 1610743851;
    function RenameWebUser(const pUsername: WideString; const pNewUserName: WideString; 
                           const pNewLastName: WideString; const pNewFirstName: WideString; 
                           const pNewMiddleInitial: WideString; const pNewShortname: WideString; 
                           const pNewInternetAddress: WideString): WideString; dispid 1610743852;
    function SetServerDirectoryAssistanceSettings(const pServer: WideString; 
                                                  const pDbfile: WideString): WideString; dispid 1610743853;
    function SignDatabaseWithServerID(const pServer: WideString; const pDbfile: WideString; 
                                      bUpdateOnly: WordBool): WideString; dispid 1610743854;
    function UpgradeUserToHierarchical(const pUsername: WideString; const pOrgUnit: WideString; 
                                       const pAltCommonName: WideString; 
                                       const pAltOrgUnit: WideString; const pAltLanguage: WideString): WideString; dispid 1610743855;
    function SetUserPasswordSettings(const pUsername: WideString; 
                                     NotesPasswordCheckSetting: OleVariant; 
                                     NotesPasswordChangeInterval: OleVariant; 
                                     NotesPasswordGracePeriod: OleVariant; 
                                     InternetPasswordForceChange: OleVariant; NotUsed: ADMP_PWDCHK): WideString; dispid 1610743856;
    function ApproveHostedOrgStorageDeletion(const pNoteid: WideString): WideString; dispid 1610743857;
  end;

// *********************************************************************//
// Interface: INotesStream
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131580-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INotesStream = interface(IDispatch)
    ['{29131580-2EED-1069-BF5D-00DD011186B7}']
    function Get_Charset: WideString; safecall;
    function Get_IsEOS: WordBool; safecall;
    function Get_Position: Integer; safecall;
    procedure Set_Position(plPosition: Integer); safecall;
    function Get_Bytes: Integer; safecall;
    function Get_IsReadOnly: WordBool; safecall;
    function Get_Parent: ISession; safecall;
    procedure Close; safecall;
    function Open(const pName: WideString; const pCharset: WideString): WordBool; safecall;
    function Read(lLength: Integer): OleVariant; safecall;
    function ReadText(lLength: STMREAD_LEN; lEOL: EOL_TYPE): WideString; safecall;
    procedure Truncate; safecall;
    function Write(vByteArray: OleVariant): Integer; safecall;
    function WriteText(const pText: WideString; lEOL: EOL_TYPE): Integer; safecall;
    property Charset: WideString read Get_Charset;
    property IsEOS: WordBool read Get_IsEOS;
    property Position: Integer read Get_Position write Set_Position;
    property Bytes: Integer read Get_Bytes;
    property IsReadOnly: WordBool read Get_IsReadOnly;
    property Parent: ISession read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  INotesStreamDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131580-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INotesStreamDisp = dispinterface
    ['{29131580-2EED-1069-BF5D-00DD011186B7}']
    property Charset: WideString readonly dispid 1610743808;
    property IsEOS: WordBool readonly dispid 1610743809;
    property Position: Integer dispid 1610743810;
    property Bytes: Integer readonly dispid 1610743812;
    property IsReadOnly: WordBool readonly dispid 1610743813;
    property Parent: ISession readonly dispid 1610743814;
    procedure Close; dispid 1610743815;
    function Open(const pName: WideString; const pCharset: WideString): WordBool; dispid 1610743816;
    function Read(lLength: Integer): OleVariant; dispid 1610743817;
    function ReadText(lLength: STMREAD_LEN; lEOL: EOL_TYPE): WideString; dispid 1610743818;
    procedure Truncate; dispid 1610743819;
    function Write(vByteArray: OleVariant): Integer; dispid 1610743820;
    function WriteText(const pText: WideString; lEOL: EOL_TYPE): Integer; dispid 1610743821;
  end;

// *********************************************************************//
// Interface: IColorObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131583-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IColorObject = interface(IDispatch)
    ['{29131583-2EED-1069-BF5D-00DD011186B7}']
    function Get_Red: Integer; safecall;
    function Get_Green: Integer; safecall;
    function Get_Blue: Integer; safecall;
    function Get_Hue: Integer; safecall;
    function Get_Saturation: Integer; safecall;
    function Get_Luminance: Integer; safecall;
    function Get_NotesColor: Integer; safecall;
    function SetRGB(Red: Integer; Green: Integer; Blue: Integer): Integer; safecall;
    function SetHSL(Hue: Integer; Saturation: Integer; Luminance: Integer): Integer; safecall;
    procedure Set_NotesColor(pNotesColor: Integer); safecall;
    property Red: Integer read Get_Red;
    property Green: Integer read Get_Green;
    property Blue: Integer read Get_Blue;
    property Hue: Integer read Get_Hue;
    property Saturation: Integer read Get_Saturation;
    property Luminance: Integer read Get_Luminance;
    property NotesColor: Integer read Get_NotesColor write Set_NotesColor;
  end;

// *********************************************************************//
// DispIntf:  IColorObjectDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131583-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IColorObjectDisp = dispinterface
    ['{29131583-2EED-1069-BF5D-00DD011186B7}']
    property Red: Integer readonly dispid 1610743808;
    property Green: Integer readonly dispid 1610743809;
    property Blue: Integer readonly dispid 1610743810;
    property Hue: Integer readonly dispid 1610743811;
    property Saturation: Integer readonly dispid 1610743812;
    property Luminance: Integer readonly dispid 1610743813;
    property NotesColor: Integer dispid 1610743814;
    function SetRGB(Red: Integer; Green: Integer; Blue: Integer): Integer; dispid 1610743815;
    function SetHSL(Hue: Integer; Saturation: Integer; Luminance: Integer): Integer; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IDXLExporter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131590-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDXLExporter = interface(IDispatch)
    ['{29131590-2EED-1069-BF5D-00DD011186B7}']
    function Get_Log: WideString; safecall;
    function Get_LogComment: WideString; safecall;
    procedure Set_LogComment(const ppLogComment: WideString); safecall;
    function Get_ExitOnFirstFatalError: WordBool; safecall;
    procedure Set_ExitOnFirstFatalError(pbFlag: WordBool); safecall;
    function Get_ForceNoteFormat: WordBool; safecall;
    procedure Set_ForceNoteFormat(pbFlag: WordBool); safecall;
    function Get_OutputDOCTYPE: WordBool; safecall;
    procedure Set_OutputDOCTYPE(pbFlag: WordBool); safecall;
    function Get_DoctypeSYSTEM: WideString; safecall;
    procedure Set_DoctypeSYSTEM(const ppTitle: WideString); safecall;
    function Get_ConvertNotesbitmapsToGIF: WordBool; safecall;
    procedure Set_ConvertNotesbitmapsToGIF(pbFlag: WordBool); safecall;
    function Export(Input: OleVariant): WideString; safecall;
    property Log: WideString read Get_Log;
    property LogComment: WideString read Get_LogComment write Set_LogComment;
    property ExitOnFirstFatalError: WordBool read Get_ExitOnFirstFatalError write Set_ExitOnFirstFatalError;
    property ForceNoteFormat: WordBool read Get_ForceNoteFormat write Set_ForceNoteFormat;
    property OutputDOCTYPE: WordBool read Get_OutputDOCTYPE write Set_OutputDOCTYPE;
    property DoctypeSYSTEM: WideString read Get_DoctypeSYSTEM write Set_DoctypeSYSTEM;
    property ConvertNotesbitmapsToGIF: WordBool read Get_ConvertNotesbitmapsToGIF write Set_ConvertNotesbitmapsToGIF;
  end;

// *********************************************************************//
// DispIntf:  IDXLExporterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131590-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDXLExporterDisp = dispinterface
    ['{29131590-2EED-1069-BF5D-00DD011186B7}']
    property Log: WideString readonly dispid 1610743808;
    property LogComment: WideString dispid 1610743809;
    property ExitOnFirstFatalError: WordBool dispid 1610743811;
    property ForceNoteFormat: WordBool dispid 1610743813;
    property OutputDOCTYPE: WordBool dispid 1610743815;
    property DoctypeSYSTEM: WideString dispid 1610743817;
    property ConvertNotesbitmapsToGIF: WordBool dispid 1610743819;
    function Export(Input: OleVariant): WideString; dispid 1610743821;
  end;

// *********************************************************************//
// Interface: IDXLImporter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131591-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDXLImporter = interface(IDispatch)
    ['{29131591-2EED-1069-BF5D-00DD011186B7}']
    function Get_Log: WideString; safecall;
    function Get_LogComment: WideString; safecall;
    procedure Set_LogComment(const ppLogComment: WideString); safecall;
    function Get_ExitOnFirstFatalError: WordBool; safecall;
    procedure Set_ExitOnFirstFatalError(pbFlag: WordBool); safecall;
    function Get_ACLImportOption: DXLIMPORTOPTION; safecall;
    procedure Set_ACLImportOption(pOption: DXLIMPORTOPTION); safecall;
    function Get_DesignImportOption: DXLIMPORTOPTION; safecall;
    procedure Set_DesignImportOption(pOption: DXLIMPORTOPTION); safecall;
    function Get_DocumentImportOption: DXLIMPORTOPTION; safecall;
    procedure Set_DocumentImportOption(pOption: DXLIMPORTOPTION); safecall;
    function Get_ReplaceDBProperties: WordBool; safecall;
    procedure Set_ReplaceDBProperties(pbFlag: WordBool); safecall;
    function Get_InputValidationOption: VALIDATIONOPTION; safecall;
    procedure Set_InputValidationOption(pOption: VALIDATIONOPTION); safecall;
    function Get_CreateFTIndex: WordBool; safecall;
    procedure Set_CreateFTIndex(pbFlag: WordBool); safecall;
    function Get_ImportedNoteCount: Integer; safecall;
    function Get_ReplicaRequiredForReplaceOrUpdate: WordBool; safecall;
    procedure Set_ReplicaRequiredForReplaceOrUpdate(pbFlag: WordBool); safecall;
    function Get_UnknownTokenLogOption: DXLLOGOPTION; safecall;
    procedure Set_UnknownTokenLogOption(pOption: DXLLOGOPTION); safecall;
    function GetFirstImportedNoteId: WideString; safecall;
    function GetNextImportedNoteId(const pNoteid: WideString): WideString; safecall;
    procedure Import(Input: OleVariant; importDB: OleVariant); safecall;
    property Log: WideString read Get_Log;
    property LogComment: WideString read Get_LogComment write Set_LogComment;
    property ExitOnFirstFatalError: WordBool read Get_ExitOnFirstFatalError write Set_ExitOnFirstFatalError;
    property ACLImportOption: DXLIMPORTOPTION read Get_ACLImportOption write Set_ACLImportOption;
    property DesignImportOption: DXLIMPORTOPTION read Get_DesignImportOption write Set_DesignImportOption;
    property DocumentImportOption: DXLIMPORTOPTION read Get_DocumentImportOption write Set_DocumentImportOption;
    property ReplaceDBProperties: WordBool read Get_ReplaceDBProperties write Set_ReplaceDBProperties;
    property InputValidationOption: VALIDATIONOPTION read Get_InputValidationOption write Set_InputValidationOption;
    property CreateFTIndex: WordBool read Get_CreateFTIndex write Set_CreateFTIndex;
    property ImportedNoteCount: Integer read Get_ImportedNoteCount;
    property ReplicaRequiredForReplaceOrUpdate: WordBool read Get_ReplicaRequiredForReplaceOrUpdate write Set_ReplicaRequiredForReplaceOrUpdate;
    property UnknownTokenLogOption: DXLLOGOPTION read Get_UnknownTokenLogOption write Set_UnknownTokenLogOption;
  end;

// *********************************************************************//
// DispIntf:  IDXLImporterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131591-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IDXLImporterDisp = dispinterface
    ['{29131591-2EED-1069-BF5D-00DD011186B7}']
    property Log: WideString readonly dispid 1610743808;
    property LogComment: WideString dispid 1610743809;
    property ExitOnFirstFatalError: WordBool dispid 1610743811;
    property ACLImportOption: DXLIMPORTOPTION dispid 1610743813;
    property DesignImportOption: DXLIMPORTOPTION dispid 1610743815;
    property DocumentImportOption: DXLIMPORTOPTION dispid 1610743817;
    property ReplaceDBProperties: WordBool dispid 1610743819;
    property InputValidationOption: VALIDATIONOPTION dispid 1610743821;
    property CreateFTIndex: WordBool dispid 1610743823;
    property ImportedNoteCount: Integer readonly dispid 1610743825;
    property ReplicaRequiredForReplaceOrUpdate: WordBool dispid 1610743826;
    property UnknownTokenLogOption: DXLLOGOPTION dispid 1610743828;
    function GetFirstImportedNoteId: WideString; dispid 1610743830;
    function GetNextImportedNoteId(const pNoteid: WideString): WideString; dispid 1610743831;
    procedure Import(Input: OleVariant; importDB: OleVariant); dispid 1610743832;
  end;

// *********************************************************************//
// Interface: IMIMEEntity
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157E-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IMIMEEntity = interface(IDispatch)
    ['{2913157E-2EED-1069-BF5D-00DD011186B7}']
    function Get_ContentSubType: WideString; safecall;
    function Get_ContentType: WideString; safecall;
    function Get_ContentAsText: WideString; safecall;
    function Get_Headers: WideString; safecall;
    function Get_ParentDoc: IDocument; safecall;
    function GetFirstChildEntity: IMIMEEntity; safecall;
    function GetNextSibling: IMIMEEntity; safecall;
    function GetParentEntity: IMIMEEntity; safecall;
    function Get_BoundaryStart: WideString; safecall;
    function Get_BoundaryEnd: WideString; safecall;
    function Get_Charset: WideString; safecall;
    function Get_Encoding: MIME_ENCODING; safecall;
    function Get_HeaderObjects: OleVariant; safecall;
    function Get_Preamble: WideString; safecall;
    procedure Set_Preamble(const ppPreamble: WideString); safecall;
    function CreateChildEntity(const pNextSiblingIMIMEEntity: IMIMEEntity): IMIMEEntity; safecall;
    function CreateHeader(const pHeaderName: WideString): IMIMEHeader; safecall;
    function CreateParentEntity: IMIMEEntity; safecall;
    procedure DecodeContent; safecall;
    procedure EncodeContent(lEnc: MIME_ENCODING); safecall;
    procedure GetContentAsBytes(const pINotesStream: INotesStream; bDecoded: WordBool); safecall;
    procedure GetContentAsText(const pINotesStream: INotesStream; bDecoded: WordBool); safecall;
    procedure GetEntityAsText(const pINotesStream: INotesStream; const pHeaderFilters: OleVariant; 
                              bInclusive: WordBool); safecall;
    function GetNextEntity(lSearchPath: SEARCH_PATH): IMIMEEntity; safecall;
    function GetNthHeader(const pHeaderName: WideString; lNth: Integer): IMIMEHeader; safecall;
    function GetPrevEntity(lSearchPath: SEARCH_PATH): IMIMEEntity; safecall;
    function GetPrevSibling: IMIMEEntity; safecall;
    function GetSomeHeaders(const pHeaderFilters: OleVariant; bInclusive: WordBool): WideString; safecall;
    procedure Remove; safecall;
    procedure SetContentFromBytes(const pINotesStream: INotesStream; 
                                  const pContentType: WideString; lEnc: MIME_ENCODING); safecall;
    procedure SetContentFromText(const pINotesStream: INotesStream; const pContentType: WideString; 
                                 lEnc: MIME_ENCODING); safecall;
    property ContentSubType: WideString read Get_ContentSubType;
    property ContentType: WideString read Get_ContentType;
    property ContentAsText: WideString read Get_ContentAsText;
    property Headers: WideString read Get_Headers;
    property ParentDoc: IDocument read Get_ParentDoc;
    property BoundaryStart: WideString read Get_BoundaryStart;
    property BoundaryEnd: WideString read Get_BoundaryEnd;
    property Charset: WideString read Get_Charset;
    property Encoding: MIME_ENCODING read Get_Encoding;
    property HeaderObjects: OleVariant read Get_HeaderObjects;
    property Preamble: WideString read Get_Preamble write Set_Preamble;
  end;

// *********************************************************************//
// DispIntf:  IMIMEEntityDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157E-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IMIMEEntityDisp = dispinterface
    ['{2913157E-2EED-1069-BF5D-00DD011186B7}']
    property ContentSubType: WideString readonly dispid 1610743808;
    property ContentType: WideString readonly dispid 1610743809;
    property ContentAsText: WideString readonly dispid 1610743810;
    property Headers: WideString readonly dispid 1610743811;
    property ParentDoc: IDocument readonly dispid 1610743812;
    function GetFirstChildEntity: IMIMEEntity; dispid 1610743813;
    function GetNextSibling: IMIMEEntity; dispid 1610743814;
    function GetParentEntity: IMIMEEntity; dispid 1610743815;
    property BoundaryStart: WideString readonly dispid 1610743816;
    property BoundaryEnd: WideString readonly dispid 1610743817;
    property Charset: WideString readonly dispid 1610743818;
    property Encoding: MIME_ENCODING readonly dispid 1610743819;
    property HeaderObjects: OleVariant readonly dispid 1610743820;
    property Preamble: WideString dispid 1610743821;
    function CreateChildEntity(const pNextSiblingIMIMEEntity: IMIMEEntity): IMIMEEntity; dispid 1610743823;
    function CreateHeader(const pHeaderName: WideString): IMIMEHeader; dispid 1610743824;
    function CreateParentEntity: IMIMEEntity; dispid 1610743825;
    procedure DecodeContent; dispid 1610743826;
    procedure EncodeContent(lEnc: MIME_ENCODING); dispid 1610743827;
    procedure GetContentAsBytes(const pINotesStream: INotesStream; bDecoded: WordBool); dispid 1610743828;
    procedure GetContentAsText(const pINotesStream: INotesStream; bDecoded: WordBool); dispid 1610743829;
    procedure GetEntityAsText(const pINotesStream: INotesStream; const pHeaderFilters: OleVariant; 
                              bInclusive: WordBool); dispid 1610743830;
    function GetNextEntity(lSearchPath: SEARCH_PATH): IMIMEEntity; dispid 1610743831;
    function GetNthHeader(const pHeaderName: WideString; lNth: Integer): IMIMEHeader; dispid 1610743832;
    function GetPrevEntity(lSearchPath: SEARCH_PATH): IMIMEEntity; dispid 1610743833;
    function GetPrevSibling: IMIMEEntity; dispid 1610743834;
    function GetSomeHeaders(const pHeaderFilters: OleVariant; bInclusive: WordBool): WideString; dispid 1610743835;
    procedure Remove; dispid 1610743836;
    procedure SetContentFromBytes(const pINotesStream: INotesStream; 
                                  const pContentType: WideString; lEnc: MIME_ENCODING); dispid 1610743837;
    procedure SetContentFromText(const pINotesStream: INotesStream; const pContentType: WideString; 
                                 lEnc: MIME_ENCODING); dispid 1610743838;
  end;

// *********************************************************************//
// Interface: IMIMEHeader
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157F-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IMIMEHeader = interface(IDispatch)
    ['{2913157F-2EED-1069-BF5D-00DD011186B7}']
    function Get_HeaderName: WideString; safecall;
    function Get_Parent: IMIMEEntity; safecall;
    function AddValText(const pValueText: WideString; const pRfc2047Charset: WideString): WordBool; safecall;
    function GetHeaderVal(bFolded: WordBool; bDecoded: WordBool): WideString; safecall;
    function GetHeaderValAndParams(bFolded: WordBool; bDecoded: WordBool): WideString; safecall;
    function GetParamVal(const pParamName: WideString; bFolded: WordBool): WideString; safecall;
    procedure Remove; safecall;
    function SetHeaderVal(const pHeaderVal: WideString): WordBool; safecall;
    function SetHeaderValAndParams(const pHeaderValParams: WideString): WordBool; safecall;
    function SetParamVal(const pParamName: WideString; const pParamVal: WideString): WordBool; safecall;
    property HeaderName: WideString read Get_HeaderName;
    property Parent: IMIMEEntity read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  IMIMEHeaderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913157F-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IMIMEHeaderDisp = dispinterface
    ['{2913157F-2EED-1069-BF5D-00DD011186B7}']
    property HeaderName: WideString readonly dispid 1610743808;
    property Parent: IMIMEEntity readonly dispid 1610743809;
    function AddValText(const pValueText: WideString; const pRfc2047Charset: WideString): WordBool; dispid 1610743810;
    function GetHeaderVal(bFolded: WordBool; bDecoded: WordBool): WideString; dispid 1610743811;
    function GetHeaderValAndParams(bFolded: WordBool; bDecoded: WordBool): WideString; dispid 1610743812;
    function GetParamVal(const pParamName: WideString; bFolded: WordBool): WideString; dispid 1610743813;
    procedure Remove; dispid 1610743814;
    function SetHeaderVal(const pHeaderVal: WideString): WordBool; dispid 1610743815;
    function SetHeaderValAndParams(const pHeaderValParams: WideString): WordBool; dispid 1610743816;
    function SetParamVal(const pParamName: WideString; const pParamVal: WideString): WordBool; dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IRichTextItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131574-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextItem = interface(IItem)
    ['{29131574-2EED-1069-BF5D-00DD011186B7}']
    function Get_EmbeddedObjects: OleVariant; safecall;
    procedure AddNewLine(lCount: Integer; bNewparagraph: WordBool); safecall;
    procedure AddPageBreak(const pIStyle: IRichTextParagraphStyle); safecall;
    procedure AddTab(lCount: Integer); safecall;
    procedure AppendDocLink(const pIObj: IUnknown; const pComment: WideString; 
                            const pHotspottext: WideString); safecall;
    procedure AppendParagraphStyle(const pIStyle: IRichTextParagraphStyle); safecall;
    procedure AppendRTItem(const pIRTItem: IRichTextItem); safecall;
    procedure AppendStyle(const pIStyle: IRichTextStyle); safecall;
    procedure AppendText(const pText: WideString); safecall;
    function EmbedObject(lType: EMBED_TYPE; const pClass: WideString; const pSource: WideString; 
                         const pName: WideString): IEmbeddedObject; safecall;
    function GetEmbeddedObject(const pName: WideString): IEmbeddedObject; safecall;
    function GetFormattedText(bTabstrip: WordBool; lLinelen: Integer): WideString; safecall;
    function CreateNavigator: IRichTextNavigator; safecall;
    function CreateRange: IRichTextRange; safecall;
    procedure AppendTable(lRowCount: Integer; lColumnCount: Integer; const pRowLabels: OleVariant; 
                          lLeftMargin: Integer; const pRTPStyleArray: OleVariant); safecall;
    procedure BeginInsert(const pElement: OleVariant; bAfter: WordBool); safecall;
    procedure EndInsert; safecall;
    procedure BeginSection(const pTitle: WideString; const pTitleStyle: IRichTextStyle; 
                           const pBarColor: IColorObject; bExpand: WordBool); safecall;
    procedure EndSection; safecall;
    function GetNotesFont(const pFaceName: WideString; bAddOnFail: WordBool): Integer; safecall;
    procedure Update; safecall;
    procedure Compact; safecall;
    function GetUnformattedText: WideString; safecall;
    property EmbeddedObjects: OleVariant read Get_EmbeddedObjects;
  end;

// *********************************************************************//
// DispIntf:  IRichTextItemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131574-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextItemDisp = dispinterface
    ['{29131574-2EED-1069-BF5D-00DD011186B7}']
    property EmbeddedObjects: OleVariant readonly dispid 1610809344;
    procedure AddNewLine(lCount: Integer; bNewparagraph: WordBool); dispid 1610809345;
    procedure AddPageBreak(const pIStyle: IRichTextParagraphStyle); dispid 1610809346;
    procedure AddTab(lCount: Integer); dispid 1610809347;
    procedure AppendDocLink(const pIObj: IUnknown; const pComment: WideString; 
                            const pHotspottext: WideString); dispid 1610809348;
    procedure AppendParagraphStyle(const pIStyle: IRichTextParagraphStyle); dispid 1610809349;
    procedure AppendRTItem(const pIRTItem: IRichTextItem); dispid 1610809350;
    procedure AppendStyle(const pIStyle: IRichTextStyle); dispid 1610809351;
    procedure AppendText(const pText: WideString); dispid 1610809352;
    function EmbedObject(lType: EMBED_TYPE; const pClass: WideString; const pSource: WideString; 
                         const pName: WideString): IEmbeddedObject; dispid 1610809353;
    function GetEmbeddedObject(const pName: WideString): IEmbeddedObject; dispid 1610809354;
    function GetFormattedText(bTabstrip: WordBool; lLinelen: Integer): WideString; dispid 1610809355;
    function CreateNavigator: IRichTextNavigator; dispid 1610809356;
    function CreateRange: IRichTextRange; dispid 1610809357;
    procedure AppendTable(lRowCount: Integer; lColumnCount: Integer; const pRowLabels: OleVariant; 
                          lLeftMargin: Integer; const pRTPStyleArray: OleVariant); dispid 1610809358;
    procedure BeginInsert(const pElement: OleVariant; bAfter: WordBool); dispid 1610809359;
    procedure EndInsert; dispid 1610809360;
    procedure BeginSection(const pTitle: WideString; const pTitleStyle: IRichTextStyle; 
                           const pBarColor: IColorObject; bExpand: WordBool); dispid 1610809361;
    procedure EndSection; dispid 1610809362;
    function GetNotesFont(const pFaceName: WideString; bAddOnFail: WordBool): Integer; dispid 1610809363;
    procedure Update; dispid 1610809364;
    procedure Compact; dispid 1610809365;
    function GetUnformattedText: WideString; dispid 1610809366;
    property DateTimeValue: IDateTime dispid 1610743808;
    property IsAuthors: WordBool dispid 1610743810;
    property IsEncrypted: WordBool dispid 1610743812;
    property IsNames: WordBool dispid 1610743814;
    property IsProtected: WordBool dispid 1610743816;
    property IsReaders: WordBool dispid 1610743818;
    property IsSigned: WordBool dispid 1610743820;
    property IsSummary: WordBool dispid 1610743822;
    property LastModified: OleVariant readonly dispid 1610743824;
    property Name: WideString readonly dispid 0;
    property Parent: IDocument readonly dispid 1610743826;
    property SaveToDisk: WordBool dispid 1610743827;
    property Text: WideString readonly dispid 1610743829;
    property type_: IT_TYPE readonly dispid 1610743830;
    property ValueLength: Integer readonly dispid 1610743831;
    property Values: OleVariant dispid 1610743832;
    function Abstract(lMaxlen: Integer; bDropvowels: WordBool; bUsedict: WordBool): WideString; dispid 1610743834;
    procedure AppendToTextList(Values: OleVariant); dispid 1610743835;
    function Contains(Value: OleVariant): WordBool; dispid 1610743836;
    function CopyItemToDocument(const pIDoc: IDocument; const pNewname: WideString): IItem2; dispid 1610743837;
    function GetMIMEEntity: IMIMEEntity; dispid 1610743838;
    procedure Remove; dispid 1610743839;
  end;

// *********************************************************************//
// Interface: IEmbeddedObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131569-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IEmbeddedObject = interface(IDispatch)
    ['{29131569-2EED-1069-BF5D-00DD011186B7}']
    function Get_Class_: WideString; safecall;
    function Get_FileSize: Integer; safecall;
    function Get_FitBelowFields: WordBool; safecall;
    procedure Set_FitBelowFields(pbFlag: WordBool); safecall;
    function Get_FitToWindow: WordBool; safecall;
    procedure Set_FitToWindow(pbFlag: WordBool); safecall;
    function Get_Name: WideString; safecall;
    function Get_Object_: OleVariant; safecall;
    function Get_Parent: IRichTextItem; safecall;
    function Get_RunReadOnly: WordBool; safecall;
    procedure Set_RunReadOnly(pbFlag: WordBool); safecall;
    function Get_Source: WideString; safecall;
    function Get_type_: EMBED_TYPE; safecall;
    function Get_Verbs: OleVariant; safecall;
    function Activate(bShow: WordBool): IDispatch; safecall;
    procedure DoVerb(const pVerb: WideString); safecall;
    procedure ExtractFile(const pPath: WideString); safecall;
    procedure Remove; safecall;
    property Class_: WideString read Get_Class_;
    property FileSize: Integer read Get_FileSize;
    property FitBelowFields: WordBool read Get_FitBelowFields write Set_FitBelowFields;
    property FitToWindow: WordBool read Get_FitToWindow write Set_FitToWindow;
    property Name: WideString read Get_Name;
    property Object_: OleVariant read Get_Object_;
    property Parent: IRichTextItem read Get_Parent;
    property RunReadOnly: WordBool read Get_RunReadOnly write Set_RunReadOnly;
    property Source: WideString read Get_Source;
    property type_: EMBED_TYPE read Get_type_;
    property Verbs: OleVariant read Get_Verbs;
  end;

// *********************************************************************//
// DispIntf:  IEmbeddedObjectDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131569-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IEmbeddedObjectDisp = dispinterface
    ['{29131569-2EED-1069-BF5D-00DD011186B7}']
    property Class_: WideString readonly dispid 1610743808;
    property FileSize: Integer readonly dispid 1610743809;
    property FitBelowFields: WordBool dispid 1610743810;
    property FitToWindow: WordBool dispid 1610743812;
    property Name: WideString readonly dispid 0;
    property Object_: OleVariant readonly dispid 1610743815;
    property Parent: IRichTextItem readonly dispid 1610743816;
    property RunReadOnly: WordBool dispid 1610743817;
    property Source: WideString readonly dispid 1610743819;
    property type_: EMBED_TYPE readonly dispid 1610743820;
    property Verbs: OleVariant readonly dispid 1610743821;
    function Activate(bShow: WordBool): IDispatch; dispid 1610743822;
    procedure DoVerb(const pVerb: WideString); dispid 1610743823;
    procedure ExtractFile(const pPath: WideString); dispid 1610743824;
    procedure Remove; dispid 1610743825;
  end;

// *********************************************************************//
// Interface: IRichTextNavigator
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131584-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextNavigator = interface(IDispatch)
    ['{29131584-2EED-1069-BF5D-00DD011186B7}']
    function FindNthElement(lType: RT_ELEM; lOccurrence: Integer): WordBool; safecall;
    function FindFirstElement(lType: RT_ELEM): WordBool; safecall;
    function FindNextElement(lType: RT_ELEM; lOccurrence: Integer): WordBool; safecall;
    function FindLastElement(lType: RT_ELEM): WordBool; safecall;
    function FindFirstString(const pTarget: WideString; lOptions: Integer): WordBool; safecall;
    function FindNextString(const pTarget: WideString; lOptions: Integer): WordBool; safecall;
    function GetElement: OleVariant; safecall;
    function GetFirstElement(lType: RT_ELEM): OleVariant; safecall;
    function GetNextElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant; safecall;
    function GetNthElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant; safecall;
    function GetLastElement(lType: RT_ELEM): OleVariant; safecall;
    procedure SetPosition(pIRTElement: OleVariant); safecall;
    procedure SetPositionAtEnd(pIRTElement: OleVariant); safecall;
    procedure SetCharOffset(lOffset: Integer); safecall;
    function Clone: IRichTextNavigator; safecall;
  end;

// *********************************************************************//
// DispIntf:  IRichTextNavigatorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131584-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextNavigatorDisp = dispinterface
    ['{29131584-2EED-1069-BF5D-00DD011186B7}']
    function FindNthElement(lType: RT_ELEM; lOccurrence: Integer): WordBool; dispid 1610743808;
    function FindFirstElement(lType: RT_ELEM): WordBool; dispid 1610743809;
    function FindNextElement(lType: RT_ELEM; lOccurrence: Integer): WordBool; dispid 1610743810;
    function FindLastElement(lType: RT_ELEM): WordBool; dispid 1610743811;
    function FindFirstString(const pTarget: WideString; lOptions: Integer): WordBool; dispid 1610743812;
    function FindNextString(const pTarget: WideString; lOptions: Integer): WordBool; dispid 1610743813;
    function GetElement: OleVariant; dispid 1610743814;
    function GetFirstElement(lType: RT_ELEM): OleVariant; dispid 1610743815;
    function GetNextElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant; dispid 1610743816;
    function GetNthElement(lType: RT_ELEM; lOccurrence: Integer): OleVariant; dispid 1610743817;
    function GetLastElement(lType: RT_ELEM): OleVariant; dispid 1610743818;
    procedure SetPosition(pIRTElement: OleVariant); dispid 1610743819;
    procedure SetPositionAtEnd(pIRTElement: OleVariant); dispid 1610743820;
    procedure SetCharOffset(lOffset: Integer); dispid 1610743821;
    function Clone: IRichTextNavigator; dispid 1610743822;
  end;

// *********************************************************************//
// Interface: IRichTextRange
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131585-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextRange = interface(IDispatch)
    ['{29131585-2EED-1069-BF5D-00DD011186B7}']
    function Get_type_: RT_ELEM; safecall;
    function Get_TextRun: WideString; safecall;
    function Get_TextParagraph: WideString; safecall;
    function Get_Style: IRichTextStyle; safecall;
    function Get_Navigator: IRichTextNavigator; safecall;
    procedure SetStyle(const pIRTStyle: IRichTextStyle); safecall;
    procedure SetBegin(ppIRTElement: OleVariant); safecall;
    procedure SetEnd(ppIRTElement: OleVariant); safecall;
    procedure Reset(bBegin: WordBool; bEnd: WordBool); safecall;
    procedure Remove; safecall;
    function Clone: IRichTextRange; safecall;
    function FindandReplace(const pFindString: WideString; const pReplString: WideString; 
                            lOptions: Integer): Integer; safecall;
    property type_: RT_ELEM read Get_type_;
    property TextRun: WideString read Get_TextRun;
    property TextParagraph: WideString read Get_TextParagraph;
    property Style: IRichTextStyle read Get_Style;
    property Navigator: IRichTextNavigator read Get_Navigator;
  end;

// *********************************************************************//
// DispIntf:  IRichTextRangeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131585-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextRangeDisp = dispinterface
    ['{29131585-2EED-1069-BF5D-00DD011186B7}']
    property type_: RT_ELEM readonly dispid 1610743808;
    property TextRun: WideString readonly dispid 1610743809;
    property TextParagraph: WideString readonly dispid 1610743810;
    property Style: IRichTextStyle readonly dispid 1610743811;
    property Navigator: IRichTextNavigator readonly dispid 1610743812;
    procedure SetStyle(const pIRTStyle: IRichTextStyle); dispid 1610743813;
    procedure SetBegin(ppIRTElement: OleVariant); dispid 1610743814;
    procedure SetEnd(ppIRTElement: OleVariant); dispid 1610743815;
    procedure Reset(bBegin: WordBool; bEnd: WordBool); dispid 1610743816;
    procedure Remove; dispid 1610743817;
    function Clone: IRichTextRange; dispid 1610743818;
    function FindandReplace(const pFindString: WideString; const pReplString: WideString; 
                            lOptions: Integer): Integer; dispid 1610743819;
  end;

// *********************************************************************//
// Interface: IReplication
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131573-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IReplication = interface(IDispatch)
    ['{29131573-2EED-1069-BF5D-00DD011186B7}']
    procedure Set_Abstract(pbFlag: WordBool); safecall;
    function Get_Abstract: WordBool; safecall;
    function Get_CutoffDate: OleVariant; safecall;
    function Get_CutoffDelete: WordBool; safecall;
    procedure Set_CutoffDelete(pbFlag: WordBool); safecall;
    function Get_CutoffInterval: Integer; safecall;
    procedure Set_CutoffInterval(plInterval: Integer); safecall;
    procedure Set_Disabled(pbFlag: WordBool); safecall;
    function Get_Disabled: WordBool; safecall;
    procedure Set_IgnoreDeletes(pbFlag: WordBool); safecall;
    function Get_IgnoreDeletes: WordBool; safecall;
    procedure Set_IgnoreDestDeletes(pbFlag: WordBool); safecall;
    function Get_IgnoreDestDeletes: WordBool; safecall;
    function Get_Priority: RP_PRIORITY; safecall;
    procedure Set_Priority(plPriority: RP_PRIORITY); safecall;
    procedure ClearHistory; safecall;
    procedure Reset; safecall;
    procedure Save; safecall;
    function Get_DontSendLocalSecurityUpdates: WordBool; safecall;
    procedure Set_DontSendLocalSecurityUpdates(bValue: WordBool); safecall;
    function GetEntry(const pSourceServer: WideString; const pDestinationServer: WideString; 
                      bCreate: WordBool): IReplicationEntry; safecall;
    property Abstract: WordBool read Get_Abstract write Set_Abstract;
    property CutoffDate: OleVariant read Get_CutoffDate;
    property CutoffDelete: WordBool read Get_CutoffDelete write Set_CutoffDelete;
    property CutoffInterval: Integer read Get_CutoffInterval write Set_CutoffInterval;
    property Disabled: WordBool read Get_Disabled write Set_Disabled;
    property IgnoreDeletes: WordBool read Get_IgnoreDeletes write Set_IgnoreDeletes;
    property IgnoreDestDeletes: WordBool read Get_IgnoreDestDeletes write Set_IgnoreDestDeletes;
    property Priority: RP_PRIORITY read Get_Priority write Set_Priority;
    property DontSendLocalSecurityUpdates: WordBool read Get_DontSendLocalSecurityUpdates write Set_DontSendLocalSecurityUpdates;
  end;

// *********************************************************************//
// DispIntf:  IReplicationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131573-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IReplicationDisp = dispinterface
    ['{29131573-2EED-1069-BF5D-00DD011186B7}']
    property Abstract: WordBool dispid 1610743808;
    property CutoffDate: OleVariant readonly dispid 1610743810;
    property CutoffDelete: WordBool dispid 1610743811;
    property CutoffInterval: Integer dispid 1610743813;
    property Disabled: WordBool dispid 1610743815;
    property IgnoreDeletes: WordBool dispid 1610743817;
    property IgnoreDestDeletes: WordBool dispid 1610743819;
    property Priority: RP_PRIORITY dispid 1610743821;
    procedure ClearHistory; dispid 1610743823;
    procedure Reset; dispid 1610743824;
    procedure Save; dispid 1610743825;
    property DontSendLocalSecurityUpdates: WordBool dispid 1610743826;
    function GetEntry(const pSourceServer: WideString; const pDestinationServer: WideString; 
                      bCreate: WordBool): IReplicationEntry; dispid 1610743828;
  end;

// *********************************************************************//
// Interface: IReplicationEntry
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131582-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IReplicationEntry = interface(IDispatch)
    ['{29131582-2EED-1069-BF5D-00DD011186B7}']
    function Get_Source: WideString; safecall;
    function Get_Destination: WideString; safecall;
    function Get_Formula: WideString; safecall;
    procedure Set_Formula(const ppFormula: WideString); safecall;
    function Get_Views: WideString; safecall;
    procedure Set_Views(const ppViews: WideString); safecall;
    function Get_IsIncludeForms: WordBool; safecall;
    procedure Set_IsIncludeForms(pbIsIncludeForms: WordBool); safecall;
    function Get_IsIncludeAgents: WordBool; safecall;
    procedure Set_IsIncludeAgents(pbIsIncludeAgents: WordBool); safecall;
    function Get_IsIncludeFormulas: WordBool; safecall;
    procedure Set_IsIncludeFormulas(pbIsIncludeFormulas: WordBool); safecall;
    function Get_IsIncludeDocuments: WordBool; safecall;
    procedure Set_IsIncludeDocuments(pbIsIncludeDocuments: WordBool); safecall;
    function Get_IsIncludeACL: WordBool; safecall;
    procedure Set_IsIncludeACL(pbIsIncludeACL: WordBool); safecall;
    function Remove: Integer; safecall;
    function Save: Integer; safecall;
    property Source: WideString read Get_Source;
    property Destination: WideString read Get_Destination;
    property Formula: WideString read Get_Formula write Set_Formula;
    property Views: WideString read Get_Views write Set_Views;
    property IsIncludeForms: WordBool read Get_IsIncludeForms write Set_IsIncludeForms;
    property IsIncludeAgents: WordBool read Get_IsIncludeAgents write Set_IsIncludeAgents;
    property IsIncludeFormulas: WordBool read Get_IsIncludeFormulas write Set_IsIncludeFormulas;
    property IsIncludeDocuments: WordBool read Get_IsIncludeDocuments write Set_IsIncludeDocuments;
    property IsIncludeACL: WordBool read Get_IsIncludeACL write Set_IsIncludeACL;
  end;

// *********************************************************************//
// DispIntf:  IReplicationEntryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131582-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IReplicationEntryDisp = dispinterface
    ['{29131582-2EED-1069-BF5D-00DD011186B7}']
    property Source: WideString readonly dispid 1610743808;
    property Destination: WideString readonly dispid 1610743809;
    property Formula: WideString dispid 1610743810;
    property Views: WideString dispid 1610743812;
    property IsIncludeForms: WordBool dispid 1610743814;
    property IsIncludeAgents: WordBool dispid 1610743816;
    property IsIncludeFormulas: WordBool dispid 1610743818;
    property IsIncludeDocuments: WordBool dispid 1610743820;
    property IsIncludeACL: WordBool dispid 1610743822;
    function Remove: Integer; dispid 1610743824;
    function Save: Integer; dispid 1610743825;
  end;

// *********************************************************************//
// Interface: IOutline
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131570-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IOutline = interface(IDispatch)
    ['{29131570-2EED-1069-BF5D-00DD011186B7}']
    function Get_Alias: WideString; safecall;
    procedure Set_Alias(const ppAlias: WideString); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const ppComment: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const ppName: WideString); safecall;
    function Get_ParentDatabase: IDatabase; safecall;
    function CreateEntry(const pEntryName: WideString; const pRefEntry: IOutlineEntry; 
                         bAfter: WordBool; bAsChild: WordBool): IOutlineEntry; safecall;
    function CreateEntryFrom(const pFromEntry: IOutlineEntry; const pRefEntry: IOutlineEntry; 
                             bAfter: WordBool; bAsChild: WordBool): IOutlineEntry; safecall;
    function GetFirst: IOutlineEntry; safecall;
    function GetLast: IOutlineEntry; safecall;
    function GetParent(const pIEntry: IOutlineEntry): IOutlineEntry; safecall;
    function GetNext(const pIEntry: IOutlineEntry): IOutlineEntry; safecall;
    function GetNextSibling(const pIEntry: IOutlineEntry): IOutlineEntry; safecall;
    function GetPrev(const pIEntry: IOutlineEntry): IOutlineEntry; safecall;
    function GetPrevSibling(const pIEntry: IOutlineEntry): IOutlineEntry; safecall;
    procedure MoveEntry(const pIEntry: IOutlineEntry; const pIRefEntry: IOutlineEntry; 
                        bAfter: WordBool; bAsChild: WordBool); safecall;
    procedure RemoveEntry(const pIEntry: IOutlineEntry); safecall;
    procedure Save; safecall;
    property Alias: WideString read Get_Alias write Set_Alias;
    property Comment: WideString read Get_Comment write Set_Comment;
    property Name: WideString read Get_Name write Set_Name;
    property ParentDatabase: IDatabase read Get_ParentDatabase;
  end;

// *********************************************************************//
// DispIntf:  IOutlineDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131570-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IOutlineDisp = dispinterface
    ['{29131570-2EED-1069-BF5D-00DD011186B7}']
    property Alias: WideString dispid 1610743808;
    property Comment: WideString dispid 1610743810;
    property Name: WideString dispid 1610743812;
    property ParentDatabase: IDatabase readonly dispid 1610743814;
    function CreateEntry(const pEntryName: WideString; const pRefEntry: IOutlineEntry; 
                         bAfter: WordBool; bAsChild: WordBool): IOutlineEntry; dispid 1610743815;
    function CreateEntryFrom(const pFromEntry: IOutlineEntry; const pRefEntry: IOutlineEntry; 
                             bAfter: WordBool; bAsChild: WordBool): IOutlineEntry; dispid 1610743816;
    function GetFirst: IOutlineEntry; dispid 1610743817;
    function GetLast: IOutlineEntry; dispid 1610743818;
    function GetParent(const pIEntry: IOutlineEntry): IOutlineEntry; dispid 1610743819;
    function GetNext(const pIEntry: IOutlineEntry): IOutlineEntry; dispid 1610743820;
    function GetNextSibling(const pIEntry: IOutlineEntry): IOutlineEntry; dispid 1610743821;
    function GetPrev(const pIEntry: IOutlineEntry): IOutlineEntry; dispid 1610743822;
    function GetPrevSibling(const pIEntry: IOutlineEntry): IOutlineEntry; dispid 1610743823;
    procedure MoveEntry(const pIEntry: IOutlineEntry; const pIRefEntry: IOutlineEntry; 
                        bAfter: WordBool; bAsChild: WordBool); dispid 1610743824;
    procedure RemoveEntry(const pIEntry: IOutlineEntry); dispid 1610743825;
    procedure Save; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: IOutlineEntry
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131571-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IOutlineEntry = interface(IDispatch)
    ['{29131571-2EED-1069-BF5D-00DD011186B7}']
    function Get_Alias: WideString; safecall;
    procedure Set_Alias(const ppAlias: WideString); safecall;
    function Get_DATABASE: IDatabase; safecall;
    function Get_Document: IDocument; safecall;
    function Get_EntryClass: OE_CLASS; safecall;
    function Get_FrameText: WideString; safecall;
    procedure Set_FrameText(const ppText: WideString); safecall;
    function Get_Formula: WideString; safecall;
    function Get_HasChildren: WordBool; safecall;
    function Get_HideFormula: WideString; safecall;
    procedure Set_HideFormula(const ppFormula: WideString); safecall;
    function Get_ImagesText: WideString; safecall;
    procedure Set_ImagesText(const ppText: WideString); safecall;
    function Get_IsHiddenFromNotes: WordBool; safecall;
    procedure Set_IsHiddenFromNotes(pbFlag: WordBool); safecall;
    function Get_IsHiddenFromWeb: WordBool; safecall;
    procedure Set_IsHiddenFromWeb(pbFlag: WordBool); safecall;
    function Get_IsInThisDB: WordBool; safecall;
    function Get_IsPrivate: WordBool; safecall;
    function Get_KeepSelectionFocus: WordBool; safecall;
    procedure Set_KeepSelectionFocus(pbFlag: WordBool); safecall;
    function Get_Label_: WideString; safecall;
    procedure Set_Label_(const ppLabel: WideString); safecall;
    function Get_Level: Integer; safecall;
    function Get_NamedElement: WideString; safecall;
    function Get_Parent: IOutline; safecall;
    function Get_type_: OE_TYPE; safecall;
    function Get_URL: WideString; safecall;
    function Get_UseHideFormula: WordBool; safecall;
    procedure Set_UseHideFormula(pbFlag: WordBool); safecall;
    function Get_View: IView; safecall;
    procedure SetAction(const pFormula: WideString); safecall;
    procedure SetNamedElement(const pIDb: IDatabase; const pElementName: WideString; 
                              lClass: OE_CLASS); safecall;
    procedure SetNoteLink(const pIObj: IUnknown); safecall;
    procedure SetURL(const pURL: WideString); safecall;
    property Alias: WideString read Get_Alias write Set_Alias;
    property DATABASE: IDatabase read Get_DATABASE;
    property Document: IDocument read Get_Document;
    property EntryClass: OE_CLASS read Get_EntryClass;
    property FrameText: WideString read Get_FrameText write Set_FrameText;
    property Formula: WideString read Get_Formula;
    property HasChildren: WordBool read Get_HasChildren;
    property HideFormula: WideString read Get_HideFormula write Set_HideFormula;
    property ImagesText: WideString read Get_ImagesText write Set_ImagesText;
    property IsHiddenFromNotes: WordBool read Get_IsHiddenFromNotes write Set_IsHiddenFromNotes;
    property IsHiddenFromWeb: WordBool read Get_IsHiddenFromWeb write Set_IsHiddenFromWeb;
    property IsInThisDB: WordBool read Get_IsInThisDB;
    property IsPrivate: WordBool read Get_IsPrivate;
    property KeepSelectionFocus: WordBool read Get_KeepSelectionFocus write Set_KeepSelectionFocus;
    property Label_: WideString read Get_Label_ write Set_Label_;
    property Level: Integer read Get_Level;
    property NamedElement: WideString read Get_NamedElement;
    property Parent: IOutline read Get_Parent;
    property type_: OE_TYPE read Get_type_;
    property URL: WideString read Get_URL;
    property UseHideFormula: WordBool read Get_UseHideFormula write Set_UseHideFormula;
    property View: IView read Get_View;
  end;

// *********************************************************************//
// DispIntf:  IOutlineEntryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131571-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IOutlineEntryDisp = dispinterface
    ['{29131571-2EED-1069-BF5D-00DD011186B7}']
    property Alias: WideString dispid 1610743808;
    property DATABASE: IDatabase readonly dispid 1610743810;
    property Document: IDocument readonly dispid 1610743811;
    property EntryClass: OE_CLASS readonly dispid 1610743812;
    property FrameText: WideString dispid 1610743813;
    property Formula: WideString readonly dispid 1610743815;
    property HasChildren: WordBool readonly dispid 1610743816;
    property HideFormula: WideString dispid 1610743817;
    property ImagesText: WideString dispid 1610743819;
    property IsHiddenFromNotes: WordBool dispid 1610743821;
    property IsHiddenFromWeb: WordBool dispid 1610743823;
    property IsInThisDB: WordBool readonly dispid 1610743825;
    property IsPrivate: WordBool readonly dispid 1610743826;
    property KeepSelectionFocus: WordBool dispid 1610743827;
    property Label_: WideString dispid 1610743829;
    property Level: Integer readonly dispid 1610743831;
    property NamedElement: WideString readonly dispid 1610743832;
    property Parent: IOutline readonly dispid 1610743833;
    property type_: OE_TYPE readonly dispid 1610743834;
    property URL: WideString readonly dispid 1610743835;
    property UseHideFormula: WordBool dispid 1610743836;
    property View: IView readonly dispid 1610743838;
    procedure SetAction(const pFormula: WideString); dispid 1610743839;
    procedure SetNamedElement(const pIDb: IDatabase; const pElementName: WideString; 
                              lClass: OE_CLASS); dispid 1610743840;
    procedure SetNoteLink(const pIObj: IUnknown); dispid 1610743841;
    procedure SetURL(const pURL: WideString); dispid 1610743842;
  end;

// *********************************************************************//
// Interface: IForm
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IForm = interface(IDispatch)
    ['{2913156A-2EED-1069-BF5D-00DD011186B7}']
    function Get_Aliases: OleVariant; safecall;
    function Get_Fields: OleVariant; safecall;
    function Get_FormUsers: OleVariant; safecall;
    procedure Set_FormUsers(pUsers: OleVariant); safecall;
    function Get_HttpURL: WideString; safecall;
    function Get_IsSubForm: WordBool; safecall;
    function Get_Name: WideString; safecall;
    function Get_NotesURL: WideString; safecall;
    function Get_Parent: IDatabase; safecall;
    function Get_ProtectReaders: WordBool; safecall;
    procedure Set_ProtectReaders(pbFlag: WordBool); safecall;
    function Get_ProtectUsers: WordBool; safecall;
    procedure Set_ProtectUsers(pbFlag: WordBool); safecall;
    function Get_Readers: OleVariant; safecall;
    procedure Set_Readers(pReaders: OleVariant); safecall;
    function GetFieldType(const pName: WideString): FIELD_TYPE; safecall;
    procedure Remove; safecall;
    function Lock(const pName: OleVariant; bProvisionalOK: WordBool): WordBool; safecall;
    function LockProvisional(const pName: OleVariant): WordBool; safecall;
    procedure Unlock; safecall;
    function Get_LockHolders: OleVariant; safecall;
    property Aliases: OleVariant read Get_Aliases;
    property Fields: OleVariant read Get_Fields;
    property FormUsers: OleVariant read Get_FormUsers write Set_FormUsers;
    property HttpURL: WideString read Get_HttpURL;
    property IsSubForm: WordBool read Get_IsSubForm;
    property Name: WideString read Get_Name;
    property NotesURL: WideString read Get_NotesURL;
    property Parent: IDatabase read Get_Parent;
    property ProtectReaders: WordBool read Get_ProtectReaders write Set_ProtectReaders;
    property ProtectUsers: WordBool read Get_ProtectUsers write Set_ProtectUsers;
    property Readers: OleVariant read Get_Readers write Set_Readers;
    property LockHolders: OleVariant read Get_LockHolders;
  end;

// *********************************************************************//
// DispIntf:  IFormDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2913156A-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IFormDisp = dispinterface
    ['{2913156A-2EED-1069-BF5D-00DD011186B7}']
    property Aliases: OleVariant readonly dispid 1610743808;
    property Fields: OleVariant readonly dispid 1610743809;
    property FormUsers: OleVariant dispid 1610743810;
    property HttpURL: WideString readonly dispid 1610743812;
    property IsSubForm: WordBool readonly dispid 1610743813;
    property Name: WideString readonly dispid 0;
    property NotesURL: WideString readonly dispid 1610743815;
    property Parent: IDatabase readonly dispid 1610743816;
    property ProtectReaders: WordBool dispid 1610743817;
    property ProtectUsers: WordBool dispid 1610743819;
    property Readers: OleVariant dispid 1610743821;
    function GetFieldType(const pName: WideString): FIELD_TYPE; dispid 1610743823;
    procedure Remove; dispid 1610743824;
    function Lock(const pName: OleVariant; bProvisionalOK: WordBool): WordBool; dispid 1610743825;
    function LockProvisional(const pName: OleVariant): WordBool; dispid 1610743826;
    procedure Unlock; dispid 1610743827;
    property LockHolders: OleVariant readonly dispid 1610743828;
  end;

// *********************************************************************//
// Interface: INoteCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131589-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INoteCollection = interface(IDispatch)
    ['{29131589-2EED-1069-BF5D-00DD011186B7}']
    function Get_SelectDocuments: WordBool; safecall;
    procedure Set_SelectDocuments(pbFlag: WordBool); safecall;
    function Get_SelectProfiles: WordBool; safecall;
    procedure Set_SelectProfiles(pbFlag: WordBool); safecall;
    function Get_SelectForms: WordBool; safecall;
    procedure Set_SelectForms(pbFlag: WordBool); safecall;
    function Get_SelectSubforms: WordBool; safecall;
    procedure Set_SelectSubforms(pbFlag: WordBool); safecall;
    function Get_SelectActions: WordBool; safecall;
    procedure Set_SelectActions(pbFlag: WordBool); safecall;
    function Get_SelectFramesets: WordBool; safecall;
    procedure Set_SelectFramesets(pbFlag: WordBool); safecall;
    function Get_SelectPages: WordBool; safecall;
    procedure Set_SelectPages(pbFlag: WordBool); safecall;
    function Get_SelectImageResources: WordBool; safecall;
    procedure Set_SelectImageResources(pbFlag: WordBool); safecall;
    function Get_SelectStyleSheetResources: WordBool; safecall;
    procedure Set_SelectStyleSheetResources(pbFlag: WordBool); safecall;
    function Get_SelectJavaResources: WordBool; safecall;
    procedure Set_SelectJavaResources(pbFlag: WordBool); safecall;
    function Get_SelectMiscFormatElements: WordBool; safecall;
    procedure Set_SelectMiscFormatElements(pbFlag: WordBool); safecall;
    function Get_SelectViews: WordBool; safecall;
    procedure Set_SelectViews(pbFlag: WordBool); safecall;
    function Get_SelectFolders: WordBool; safecall;
    procedure Set_SelectFolders(pbFlag: WordBool); safecall;
    function Get_SelectNavigators: WordBool; safecall;
    procedure Set_SelectNavigators(pbFlag: WordBool); safecall;
    function Get_SelectMiscIndexElements: WordBool; safecall;
    procedure Set_SelectMiscIndexElements(pbFlag: WordBool); safecall;
    function Get_SelectIcon: WordBool; safecall;
    procedure Set_SelectIcon(pbFlag: WordBool); safecall;
    function Get_SelectAgents: WordBool; safecall;
    procedure Set_SelectAgents(pbFlag: WordBool); safecall;
    function Get_SelectOutlines: WordBool; safecall;
    procedure Set_SelectOutlines(pbFlag: WordBool); safecall;
    function Get_SelectDatabaseScript: WordBool; safecall;
    procedure Set_SelectDatabaseScript(pbFlag: WordBool); safecall;
    function Get_SelectScriptLibraries: WordBool; safecall;
    procedure Set_SelectScriptLibraries(pbFlag: WordBool); safecall;
    function Get_SelectDataConnections: WordBool; safecall;
    procedure Set_SelectDataConnections(pbFlag: WordBool); safecall;
    function Get_SelectMiscCodeElements: WordBool; safecall;
    procedure Set_SelectMiscCodeElements(pbFlag: WordBool); safecall;
    function Get_SelectSharedFields: WordBool; safecall;
    procedure Set_SelectSharedFields(pbFlag: WordBool); safecall;
    function Get_SelectHelpAbout: WordBool; safecall;
    procedure Set_SelectHelpAbout(pbFlag: WordBool); safecall;
    function Get_SelectHelpUsing: WordBool; safecall;
    procedure Set_SelectHelpUsing(pbFlag: WordBool); safecall;
    function Get_SelectHelpIndex: WordBool; safecall;
    procedure Set_SelectHelpIndex(pbFlag: WordBool); safecall;
    function Get_SelectReplicationFormulas: WordBool; safecall;
    procedure Set_SelectReplicationFormulas(pbFlag: WordBool); safecall;
    function Get_SelectACL: WordBool; safecall;
    procedure Set_SelectACL(pbFlag: WordBool); safecall;
    function Get_SelectionFormula: WideString; safecall;
    procedure Set_SelectionFormula(const ppSelectionFormula: WideString); safecall;
    function Get_SinceTime: OleVariant; safecall;
    procedure Set_SinceTime(pDate: OleVariant); safecall;
    function Get_LastBuildTime: OleVariant; safecall;
    function Get_Count: Integer; safecall;
    function Get_Parent: IDatabase; safecall;
    procedure SelectAllNotes(bFlag: WordBool); safecall;
    procedure SelectAllDataNotes(bFlag: WordBool); safecall;
    procedure SelectAllAdminNotes(bFlag: WordBool); safecall;
    procedure SelectAllDesignElements(bFlag: WordBool); safecall;
    procedure SelectAllFormatElements(bFlag: WordBool); safecall;
    procedure SelectAllIndexElements(bFlag: WordBool); safecall;
    procedure SelectAllCodeElements(bFlag: WordBool); safecall;
    procedure BuildCollection; safecall;
    procedure ClearCollection; safecall;
    procedure Add(NoteIds: OleVariant); safecall;
    procedure Remove(NoteIds: OleVariant); safecall;
    procedure Intersect(NoteIds: OleVariant); safecall;
    function GetFirstNoteId: WideString; safecall;
    function GetNextNoteId(const pNoteid: WideString): WideString; safecall;
    property SelectDocuments: WordBool read Get_SelectDocuments write Set_SelectDocuments;
    property SelectProfiles: WordBool read Get_SelectProfiles write Set_SelectProfiles;
    property SelectForms: WordBool read Get_SelectForms write Set_SelectForms;
    property SelectSubforms: WordBool read Get_SelectSubforms write Set_SelectSubforms;
    property SelectActions: WordBool read Get_SelectActions write Set_SelectActions;
    property SelectFramesets: WordBool read Get_SelectFramesets write Set_SelectFramesets;
    property SelectPages: WordBool read Get_SelectPages write Set_SelectPages;
    property SelectImageResources: WordBool read Get_SelectImageResources write Set_SelectImageResources;
    property SelectStyleSheetResources: WordBool read Get_SelectStyleSheetResources write Set_SelectStyleSheetResources;
    property SelectJavaResources: WordBool read Get_SelectJavaResources write Set_SelectJavaResources;
    property SelectMiscFormatElements: WordBool read Get_SelectMiscFormatElements write Set_SelectMiscFormatElements;
    property SelectViews: WordBool read Get_SelectViews write Set_SelectViews;
    property SelectFolders: WordBool read Get_SelectFolders write Set_SelectFolders;
    property SelectNavigators: WordBool read Get_SelectNavigators write Set_SelectNavigators;
    property SelectMiscIndexElements: WordBool read Get_SelectMiscIndexElements write Set_SelectMiscIndexElements;
    property SelectIcon: WordBool read Get_SelectIcon write Set_SelectIcon;
    property SelectAgents: WordBool read Get_SelectAgents write Set_SelectAgents;
    property SelectOutlines: WordBool read Get_SelectOutlines write Set_SelectOutlines;
    property SelectDatabaseScript: WordBool read Get_SelectDatabaseScript write Set_SelectDatabaseScript;
    property SelectScriptLibraries: WordBool read Get_SelectScriptLibraries write Set_SelectScriptLibraries;
    property SelectDataConnections: WordBool read Get_SelectDataConnections write Set_SelectDataConnections;
    property SelectMiscCodeElements: WordBool read Get_SelectMiscCodeElements write Set_SelectMiscCodeElements;
    property SelectSharedFields: WordBool read Get_SelectSharedFields write Set_SelectSharedFields;
    property SelectHelpAbout: WordBool read Get_SelectHelpAbout write Set_SelectHelpAbout;
    property SelectHelpUsing: WordBool read Get_SelectHelpUsing write Set_SelectHelpUsing;
    property SelectHelpIndex: WordBool read Get_SelectHelpIndex write Set_SelectHelpIndex;
    property SelectReplicationFormulas: WordBool read Get_SelectReplicationFormulas write Set_SelectReplicationFormulas;
    property SelectACL: WordBool read Get_SelectACL write Set_SelectACL;
    property SelectionFormula: WideString read Get_SelectionFormula write Set_SelectionFormula;
    property SinceTime: OleVariant read Get_SinceTime write Set_SinceTime;
    property LastBuildTime: OleVariant read Get_LastBuildTime;
    property Count: Integer read Get_Count;
    property Parent: IDatabase read Get_Parent;
  end;

// *********************************************************************//
// DispIntf:  INoteCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131589-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  INoteCollectionDisp = dispinterface
    ['{29131589-2EED-1069-BF5D-00DD011186B7}']
    property SelectDocuments: WordBool dispid 1610743808;
    property SelectProfiles: WordBool dispid 1610743810;
    property SelectForms: WordBool dispid 1610743812;
    property SelectSubforms: WordBool dispid 1610743814;
    property SelectActions: WordBool dispid 1610743816;
    property SelectFramesets: WordBool dispid 1610743818;
    property SelectPages: WordBool dispid 1610743820;
    property SelectImageResources: WordBool dispid 1610743822;
    property SelectStyleSheetResources: WordBool dispid 1610743824;
    property SelectJavaResources: WordBool dispid 1610743826;
    property SelectMiscFormatElements: WordBool dispid 1610743828;
    property SelectViews: WordBool dispid 1610743830;
    property SelectFolders: WordBool dispid 1610743832;
    property SelectNavigators: WordBool dispid 1610743834;
    property SelectMiscIndexElements: WordBool dispid 1610743836;
    property SelectIcon: WordBool dispid 1610743838;
    property SelectAgents: WordBool dispid 1610743840;
    property SelectOutlines: WordBool dispid 1610743842;
    property SelectDatabaseScript: WordBool dispid 1610743844;
    property SelectScriptLibraries: WordBool dispid 1610743846;
    property SelectDataConnections: WordBool dispid 1610743848;
    property SelectMiscCodeElements: WordBool dispid 1610743850;
    property SelectSharedFields: WordBool dispid 1610743852;
    property SelectHelpAbout: WordBool dispid 1610743854;
    property SelectHelpUsing: WordBool dispid 1610743856;
    property SelectHelpIndex: WordBool dispid 1610743858;
    property SelectReplicationFormulas: WordBool dispid 1610743860;
    property SelectACL: WordBool dispid 1610743862;
    property SelectionFormula: WideString dispid 1610743864;
    property SinceTime: OleVariant dispid 1610743866;
    property LastBuildTime: OleVariant readonly dispid 1610743868;
    property Count: Integer readonly dispid 1610743869;
    property Parent: IDatabase readonly dispid 1610743870;
    procedure SelectAllNotes(bFlag: WordBool); dispid 1610743871;
    procedure SelectAllDataNotes(bFlag: WordBool); dispid 1610743872;
    procedure SelectAllAdminNotes(bFlag: WordBool); dispid 1610743873;
    procedure SelectAllDesignElements(bFlag: WordBool); dispid 1610743874;
    procedure SelectAllFormatElements(bFlag: WordBool); dispid 1610743875;
    procedure SelectAllIndexElements(bFlag: WordBool); dispid 1610743876;
    procedure SelectAllCodeElements(bFlag: WordBool); dispid 1610743877;
    procedure BuildCollection; dispid 1610743878;
    procedure ClearCollection; dispid 1610743879;
    procedure Add(NoteIds: OleVariant); dispid 1610743880;
    procedure Remove(NoteIds: OleVariant); dispid 1610743881;
    procedure Intersect(NoteIds: OleVariant); dispid 1610743882;
    function GetFirstNoteId: WideString; dispid 1610743883;
    function GetNextNoteId(const pNoteid: WideString): WideString; dispid 1610743884;
  end;

// *********************************************************************//
// Interface: IACLEntry
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131561-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IACLEntry = interface(IDispatch)
    ['{29131561-2EED-1069-BF5D-00DD011186B7}']
    procedure Set_CanCreateDocuments(pbFlag: WordBool); safecall;
    function Get_CanCreateDocuments: WordBool; safecall;
    procedure Set_CanCreateLSOrJavaAgent(pbFlag: WordBool); safecall;
    function Get_CanCreateLSOrJavaAgent: WordBool; safecall;
    procedure Set_CanCreatePersonalAgent(pbFlag: WordBool); safecall;
    function Get_CanCreatePersonalAgent: WordBool; safecall;
    procedure Set_CanCreatePersonalFolder(pbFlag: WordBool); safecall;
    function Get_CanCreatePersonalFolder: WordBool; safecall;
    procedure Set_CanCreateSharedFolder(pbFlag: WordBool); safecall;
    function Get_CanCreateSharedFolder: WordBool; safecall;
    procedure Set_CanDeleteDocuments(pbFlag: WordBool); safecall;
    function Get_CanDeleteDocuments: WordBool; safecall;
    procedure Set_IsAdminReaderAuthor(pbFlag: WordBool); safecall;
    function Get_IsAdminReaderAuthor: WordBool; safecall;
    procedure Set_IsAdminServer(pbFlag: WordBool); safecall;
    function Get_IsAdminServer: WordBool; safecall;
    procedure Set_IsGroup(pbFlag: WordBool); safecall;
    function Get_IsGroup: WordBool; safecall;
    procedure Set_IsPerson(pbFlag: WordBool); safecall;
    function Get_IsPerson: WordBool; safecall;
    procedure Set_IsPublicReader(pbFlag: WordBool); safecall;
    function Get_IsPublicReader: WordBool; safecall;
    procedure Set_IsPublicWriter(pbFlag: WordBool); safecall;
    function Get_IsPublicWriter: WordBool; safecall;
    procedure Set_IsServer(pbFlag: WordBool); safecall;
    function Get_IsServer: WordBool; safecall;
    function Get_Level: ACLLEVEL; safecall;
    procedure Set_Level(plLevel: ACLLEVEL); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const ppName: WideString); safecall;
    function Get_NameObject: IName; safecall;
    function Get_Parent: IACL; safecall;
    function Get_Roles: OleVariant; safecall;
    function Get_UserType: LSXBE_ACLTYPE; safecall;
    procedure Set_UserType(plType: LSXBE_ACLTYPE); safecall;
    procedure DisableRole(const pRole: WideString); safecall;
    procedure EnableRole(const pRole: WideString); safecall;
    function IsRoleEnabled(const pRole: WideString): WordBool; safecall;
    procedure Remove; safecall;
    procedure Set_CanReplicateOrCopyDocuments(pbFlag: WordBool); safecall;
    function Get_CanReplicateOrCopyDocuments: WordBool; safecall;
    property CanCreateDocuments: WordBool read Get_CanCreateDocuments write Set_CanCreateDocuments;
    property CanCreateLSOrJavaAgent: WordBool read Get_CanCreateLSOrJavaAgent write Set_CanCreateLSOrJavaAgent;
    property CanCreatePersonalAgent: WordBool read Get_CanCreatePersonalAgent write Set_CanCreatePersonalAgent;
    property CanCreatePersonalFolder: WordBool read Get_CanCreatePersonalFolder write Set_CanCreatePersonalFolder;
    property CanCreateSharedFolder: WordBool read Get_CanCreateSharedFolder write Set_CanCreateSharedFolder;
    property CanDeleteDocuments: WordBool read Get_CanDeleteDocuments write Set_CanDeleteDocuments;
    property IsAdminReaderAuthor: WordBool read Get_IsAdminReaderAuthor write Set_IsAdminReaderAuthor;
    property IsAdminServer: WordBool read Get_IsAdminServer write Set_IsAdminServer;
    property IsGroup: WordBool read Get_IsGroup write Set_IsGroup;
    property IsPerson: WordBool read Get_IsPerson write Set_IsPerson;
    property IsPublicReader: WordBool read Get_IsPublicReader write Set_IsPublicReader;
    property IsPublicWriter: WordBool read Get_IsPublicWriter write Set_IsPublicWriter;
    property IsServer: WordBool read Get_IsServer write Set_IsServer;
    property Level: ACLLEVEL read Get_Level write Set_Level;
    property Name: WideString read Get_Name write Set_Name;
    property NameObject: IName read Get_NameObject;
    property Parent: IACL read Get_Parent;
    property Roles: OleVariant read Get_Roles;
    property UserType: LSXBE_ACLTYPE read Get_UserType write Set_UserType;
    property CanReplicateOrCopyDocuments: WordBool read Get_CanReplicateOrCopyDocuments write Set_CanReplicateOrCopyDocuments;
  end;

// *********************************************************************//
// DispIntf:  IACLEntryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131561-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IACLEntryDisp = dispinterface
    ['{29131561-2EED-1069-BF5D-00DD011186B7}']
    property CanCreateDocuments: WordBool dispid 1610743808;
    property CanCreateLSOrJavaAgent: WordBool dispid 1610743810;
    property CanCreatePersonalAgent: WordBool dispid 1610743812;
    property CanCreatePersonalFolder: WordBool dispid 1610743814;
    property CanCreateSharedFolder: WordBool dispid 1610743816;
    property CanDeleteDocuments: WordBool dispid 1610743818;
    property IsAdminReaderAuthor: WordBool dispid 1610743820;
    property IsAdminServer: WordBool dispid 1610743822;
    property IsGroup: WordBool dispid 1610743824;
    property IsPerson: WordBool dispid 1610743826;
    property IsPublicReader: WordBool dispid 1610743828;
    property IsPublicWriter: WordBool dispid 1610743830;
    property IsServer: WordBool dispid 1610743832;
    property Level: ACLLEVEL dispid 1610743834;
    property Name: WideString dispid 0;
    property NameObject: IName readonly dispid 1610743838;
    property Parent: IACL readonly dispid 1610743839;
    property Roles: OleVariant readonly dispid 1610743840;
    property UserType: LSXBE_ACLTYPE dispid 1610743841;
    procedure DisableRole(const pRole: WideString); dispid 1610743843;
    procedure EnableRole(const pRole: WideString); dispid 1610743844;
    function IsRoleEnabled(const pRole: WideString): WordBool; dispid 1610743845;
    procedure Remove; dispid 1610743846;
    property CanReplicateOrCopyDocuments: WordBool dispid 1610743847;
  end;

// *********************************************************************//
// Interface: IRichTextTab
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131577-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextTab = interface(IDispatch)
    ['{29131577-2EED-1069-BF5D-00DD011186B7}']
    function Get_Position: Integer; safecall;
    function Get_type_: RT_TAB; safecall;
    procedure Clear; safecall;
    property Position: Integer read Get_Position;
    property type_: RT_TAB read Get_type_;
  end;

// *********************************************************************//
// DispIntf:  IRichTextTabDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131577-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextTabDisp = dispinterface
    ['{29131577-2EED-1069-BF5D-00DD011186B7}']
    property Position: Integer readonly dispid 1610743808;
    property type_: RT_TAB readonly dispid 1610743809;
    procedure Clear; dispid 1610743810;
  end;

// *********************************************************************//
// Interface: IRichTextDoclink
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131586-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextDoclink = interface(IDispatch)
    ['{29131586-2EED-1069-BF5D-00DD011186B7}']
    function Get_DBReplicaID: WideString; safecall;
    procedure Set_DBReplicaID(const pDBReplicaID: WideString); safecall;
    function Get_ViewUNID: WideString; safecall;
    procedure Set_ViewUNID(const pViewUNID: WideString); safecall;
    function Get_DocUNID: WideString; safecall;
    procedure Set_DocUNID(const pDocUNID: WideString); safecall;
    function Get_DisplayComment: WideString; safecall;
    procedure Set_DisplayComment(const pDisplayComment: WideString); safecall;
    function Get_ServerHint: WideString; safecall;
    procedure Set_ServerHint(const pServerHint: WideString); safecall;
    function Get_HotSpotText: WideString; safecall;
    procedure Set_HotSpotText(const pHotspottext: WideString); safecall;
    function Get_HotSpotTextStyle: IRichTextStyle; safecall;
    procedure Remove; safecall;
    procedure SetHotSpotTextStyle(const pIRTStyle: IRichTextStyle); safecall;
    property DBReplicaID: WideString read Get_DBReplicaID write Set_DBReplicaID;
    property ViewUNID: WideString read Get_ViewUNID write Set_ViewUNID;
    property DocUNID: WideString read Get_DocUNID write Set_DocUNID;
    property DisplayComment: WideString read Get_DisplayComment write Set_DisplayComment;
    property ServerHint: WideString read Get_ServerHint write Set_ServerHint;
    property HotSpotText: WideString read Get_HotSpotText write Set_HotSpotText;
    property HotSpotTextStyle: IRichTextStyle read Get_HotSpotTextStyle;
  end;

// *********************************************************************//
// DispIntf:  IRichTextDoclinkDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131586-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextDoclinkDisp = dispinterface
    ['{29131586-2EED-1069-BF5D-00DD011186B7}']
    property DBReplicaID: WideString dispid 1610743808;
    property ViewUNID: WideString dispid 1610743810;
    property DocUNID: WideString dispid 1610743812;
    property DisplayComment: WideString dispid 1610743814;
    property ServerHint: WideString dispid 1610743816;
    property HotSpotText: WideString dispid 1610743818;
    property HotSpotTextStyle: IRichTextStyle readonly dispid 1610743820;
    procedure Remove; dispid 1610743821;
    procedure SetHotSpotTextStyle(const pIRTStyle: IRichTextStyle); dispid 1610743822;
  end;

// *********************************************************************//
// Interface: IRichTextSection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131587-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextSection = interface(IDispatch)
    ['{29131587-2EED-1069-BF5D-00DD011186B7}']
    function Get_Title: WideString; safecall;
    procedure Set_Title(const pTitle: WideString); safecall;
    function Get_IsExpanded: WordBool; safecall;
    procedure Set_IsExpanded(pbExpanded: WordBool); safecall;
    function Get_TitleStyle: IRichTextStyle; safecall;
    procedure SetTitleStyle(const pIRTStyle: IRichTextStyle); safecall;
    function Get_BarColor: IColorObject; safecall;
    procedure SetBarColor(const pIColorObj: IColorObject); safecall;
    procedure Remove; safecall;
    property Title: WideString read Get_Title write Set_Title;
    property IsExpanded: WordBool read Get_IsExpanded write Set_IsExpanded;
    property TitleStyle: IRichTextStyle read Get_TitleStyle;
    property BarColor: IColorObject read Get_BarColor;
  end;

// *********************************************************************//
// DispIntf:  IRichTextSectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131587-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextSectionDisp = dispinterface
    ['{29131587-2EED-1069-BF5D-00DD011186B7}']
    property Title: WideString dispid 1610743808;
    property IsExpanded: WordBool dispid 1610743810;
    property TitleStyle: IRichTextStyle readonly dispid 1610743812;
    procedure SetTitleStyle(const pIRTStyle: IRichTextStyle); dispid 1610743813;
    property BarColor: IColorObject readonly dispid 1610743814;
    procedure SetBarColor(const pIColorObj: IColorObject); dispid 1610743815;
    procedure Remove; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IRichTextTable
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131588-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextTable = interface(IDispatch)
    ['{29131588-2EED-1069-BF5D-00DD011186B7}']
    function Get_Style: RT_TBLSTYLE; safecall;
    function Get_RowCount: Integer; safecall;
    function Get_ColumnCount: Integer; safecall;
    function Get_RightToLeft: WordBool; safecall;
    procedure Set_RightToLeft(pbRightToLeft: WordBool); safecall;
    function Get_RowLabels: OleVariant; safecall;
    procedure Set_RowLabels(pRowLabels: OleVariant); safecall;
    function Get_Color: IColorObject; safecall;
    function Get_AlternateColor: IColorObject; safecall;
    procedure AddRow(lCount: Integer; lTargetRow: Integer); safecall;
    procedure RemoveRow(lCount: Integer; lTargetRow: Integer); safecall;
    procedure Remove; safecall;
    procedure SetColor(const pIColorObj: IColorObject); safecall;
    procedure SetAlternateColor(const pIColorObj: IColorObject); safecall;
    procedure Set_Style(plStyle: RT_TBLSTYLE); safecall;
    property Style: RT_TBLSTYLE read Get_Style write Set_Style;
    property RowCount: Integer read Get_RowCount;
    property ColumnCount: Integer read Get_ColumnCount;
    property RightToLeft: WordBool read Get_RightToLeft write Set_RightToLeft;
    property RowLabels: OleVariant read Get_RowLabels write Set_RowLabels;
    property Color: IColorObject read Get_Color;
    property AlternateColor: IColorObject read Get_AlternateColor;
  end;

// *********************************************************************//
// DispIntf:  IRichTextTableDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29131588-2EED-1069-BF5D-00DD011186B7}
// *********************************************************************//
  IRichTextTableDisp = dispinterface
    ['{29131588-2EED-1069-BF5D-00DD011186B7}']
    property Style: RT_TBLSTYLE dispid 1610743808;
    property RowCount: Integer readonly dispid 1610743809;
    property ColumnCount: Integer readonly dispid 1610743810;
    property RightToLeft: WordBool dispid 1610743811;
    property RowLabels: OleVariant dispid 1610743813;
    property Color: IColorObject readonly dispid 1610743815;
    property AlternateColor: IColorObject readonly dispid 1610743816;
    procedure AddRow(lCount: Integer; lTargetRow: Integer); dispid 1610743817;
    procedure RemoveRow(lCount: Integer; lTargetRow: Integer); dispid 1610743818;
    procedure Remove; dispid 1610743819;
    procedure SetColor(const pIColorObj: IColorObject); dispid 1610743820;
    procedure SetAlternateColor(const pIColorObj: IColorObject); dispid 1610743821;
  end;

// *********************************************************************//
// The Class CoNotesACL provides a Create and CreateRemote method to          
// create instances of the default interface IACL exposed by              
// the CoClass NotesACL. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesACL = class
    class function Create: IACL;
    class function CreateRemote(const MachineName: string): IACL;
  end;

// *********************************************************************//
// The Class CoNotesACLEntry provides a Create and CreateRemote method to          
// create instances of the default interface IACLEntry exposed by              
// the CoClass NotesACLEntry. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesACLEntry = class
    class function Create: IACLEntry;
    class function CreateRemote(const MachineName: string): IACLEntry;
  end;

// *********************************************************************//
// The Class CoNotesAgent provides a Create and CreateRemote method to          
// create instances of the default interface IAgent exposed by              
// the CoClass NotesAgent. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesAgent = class
    class function Create: IAgent;
    class function CreateRemote(const MachineName: string): IAgent;
  end;

// *********************************************************************//
// The Class CoNotesDatabase provides a Create and CreateRemote method to          
// create instances of the default interface IDatabase exposed by              
// the CoClass NotesDatabase. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDatabase = class
    class function Create: IDatabase;
    class function CreateRemote(const MachineName: string): IDatabase;
  end;

// *********************************************************************//
// The Class CoNotesDateRange provides a Create and CreateRemote method to          
// create instances of the default interface IDateRange exposed by              
// the CoClass NotesDateRange. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDateRange = class
    class function Create: IDateRange;
    class function CreateRemote(const MachineName: string): IDateRange;
  end;

// *********************************************************************//
// The Class CoNotesDateTime provides a Create and CreateRemote method to          
// create instances of the default interface IDateTime exposed by              
// the CoClass NotesDateTime. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDateTime = class
    class function Create: IDateTime;
    class function CreateRemote(const MachineName: string): IDateTime;
  end;

// *********************************************************************//
// The Class CoNotesDbDirectory provides a Create and CreateRemote method to          
// create instances of the default interface IDbDirectory exposed by              
// the CoClass NotesDbDirectory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDbDirectory = class
    class function Create: IDbDirectory;
    class function CreateRemote(const MachineName: string): IDbDirectory;
  end;

// *********************************************************************//
// The Class CoNotesDocument provides a Create and CreateRemote method to          
// create instances of the default interface IDocument exposed by              
// the CoClass NotesDocument. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDocument = class
    class function Create: IDocument;
    class function CreateRemote(const MachineName: string): IDocument;
  end;

// *********************************************************************//
// The Class CoNotesDocumentCollection provides a Create and CreateRemote method to          
// create instances of the default interface IDocumentCollection exposed by              
// the CoClass NotesDocumentCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDocumentCollection = class
    class function Create: IDocumentCollection;
    class function CreateRemote(const MachineName: string): IDocumentCollection;
  end;

// *********************************************************************//
// The Class CoNotesEmbeddedObject provides a Create and CreateRemote method to          
// create instances of the default interface IEmbeddedObject exposed by              
// the CoClass NotesEmbeddedObject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesEmbeddedObject = class
    class function Create: IEmbeddedObject;
    class function CreateRemote(const MachineName: string): IEmbeddedObject;
  end;

// *********************************************************************//
// The Class CoNotesForm provides a Create and CreateRemote method to          
// create instances of the default interface IForm exposed by              
// the CoClass NotesForm. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesForm = class
    class function Create: IForm;
    class function CreateRemote(const MachineName: string): IForm;
  end;

// *********************************************************************//
// The Class CoNotesItem provides a Create and CreateRemote method to          
// create instances of the default interface IItem2 exposed by              
// the CoClass NotesItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesItem = class
    class function Create: IItem2;
    class function CreateRemote(const MachineName: string): IItem2;
  end;

// *********************************************************************//
// The Class CoNotesInternational provides a Create and CreateRemote method to          
// create instances of the default interface IInternational exposed by              
// the CoClass NotesInternational. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesInternational = class
    class function Create: IInternational;
    class function CreateRemote(const MachineName: string): IInternational;
  end;

// *********************************************************************//
// The Class CoNotesLog provides a Create and CreateRemote method to          
// create instances of the default interface ILog exposed by              
// the CoClass NotesLog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesLog = class
    class function Create: ILog;
    class function CreateRemote(const MachineName: string): ILog;
  end;

// *********************************************************************//
// The Class CoNotesName provides a Create and CreateRemote method to          
// create instances of the default interface IName exposed by              
// the CoClass NotesName. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesName = class
    class function Create: IName;
    class function CreateRemote(const MachineName: string): IName;
  end;

// *********************************************************************//
// The Class CoNotesNewsletter provides a Create and CreateRemote method to          
// create instances of the default interface INewsletter exposed by              
// the CoClass NotesNewsletter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesNewsletter = class
    class function Create: INewsletter;
    class function CreateRemote(const MachineName: string): INewsletter;
  end;

// *********************************************************************//
// The Class CoNotesOutline provides a Create and CreateRemote method to          
// create instances of the default interface IOutline exposed by              
// the CoClass NotesOutline. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesOutline = class
    class function Create: IOutline;
    class function CreateRemote(const MachineName: string): IOutline;
  end;

// *********************************************************************//
// The Class CoNotesOutlineEntry provides a Create and CreateRemote method to          
// create instances of the default interface IOutlineEntry exposed by              
// the CoClass NotesOutlineEntry. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesOutlineEntry = class
    class function Create: IOutlineEntry;
    class function CreateRemote(const MachineName: string): IOutlineEntry;
  end;

// *********************************************************************//
// The Class CoNotesRichTextItem provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextItem exposed by              
// the CoClass NotesRichTextItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextItem = class
    class function Create: IRichTextItem;
    class function CreateRemote(const MachineName: string): IRichTextItem;
  end;

// *********************************************************************//
// The Class CoNotesRichTextStyle provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextStyle exposed by              
// the CoClass NotesRichTextStyle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextStyle = class
    class function Create: IRichTextStyle;
    class function CreateRemote(const MachineName: string): IRichTextStyle;
  end;

// *********************************************************************//
// The Class CoNotesRichTextParagraphStyle provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextParagraphStyle exposed by              
// the CoClass NotesRichTextParagraphStyle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextParagraphStyle = class
    class function Create: IRichTextParagraphStyle;
    class function CreateRemote(const MachineName: string): IRichTextParagraphStyle;
  end;

// *********************************************************************//
// The Class CoNotesRichTextTab provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextTab exposed by              
// the CoClass NotesRichTextTab. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextTab = class
    class function Create: IRichTextTab;
    class function CreateRemote(const MachineName: string): IRichTextTab;
  end;

// *********************************************************************//
// The Class CoNotesRegistration provides a Create and CreateRemote method to          
// create instances of the default interface IRegistration exposed by              
// the CoClass NotesRegistration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRegistration = class
    class function Create: IRegistration;
    class function CreateRemote(const MachineName: string): IRegistration;
  end;

// *********************************************************************//
// The Class CoNotesReplication provides a Create and CreateRemote method to          
// create instances of the default interface IReplication exposed by              
// the CoClass NotesReplication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesReplication = class
    class function Create: IReplication;
    class function CreateRemote(const MachineName: string): IReplication;
  end;

// *********************************************************************//
// The Class CoNotesSession provides a Create and CreateRemote method to          
// create instances of the default interface ISession exposed by              
// the CoClass NotesSession. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesSession = class
    class function Create: ISession;
    class function CreateRemote(const MachineName: string): ISession;
  end;

// *********************************************************************//
// The Class CoNotesView provides a Create and CreateRemote method to          
// create instances of the default interface IView exposed by              
// the CoClass NotesView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesView = class
    class function Create: IView;
    class function CreateRemote(const MachineName: string): IView;
  end;

// *********************************************************************//
// The Class CoNotesViewColumn provides a Create and CreateRemote method to          
// create instances of the default interface IViewColumn exposed by              
// the CoClass NotesViewColumn. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesViewColumn = class
    class function Create: IViewColumn;
    class function CreateRemote(const MachineName: string): IViewColumn;
  end;

// *********************************************************************//
// The Class CoNotesViewEntry provides a Create and CreateRemote method to          
// create instances of the default interface IViewEntry exposed by              
// the CoClass NotesViewEntry. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesViewEntry = class
    class function Create: IViewEntry;
    class function CreateRemote(const MachineName: string): IViewEntry;
  end;

// *********************************************************************//
// The Class CoNotesViewEntryCollection provides a Create and CreateRemote method to          
// create instances of the default interface IViewEntryCollection exposed by              
// the CoClass NotesViewEntryCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesViewEntryCollection = class
    class function Create: IViewEntryCollection;
    class function CreateRemote(const MachineName: string): IViewEntryCollection;
  end;

// *********************************************************************//
// The Class CoNotesViewNavigator provides a Create and CreateRemote method to          
// create instances of the default interface IViewNavigator exposed by              
// the CoClass NotesViewNavigator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesViewNavigator = class
    class function Create: IViewNavigator;
    class function CreateRemote(const MachineName: string): IViewNavigator;
  end;

// *********************************************************************//
// The Class CoNotesMIMEEntity provides a Create and CreateRemote method to          
// create instances of the default interface IMIMEEntity exposed by              
// the CoClass NotesMIMEEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesMIMEEntity = class
    class function Create: IMIMEEntity;
    class function CreateRemote(const MachineName: string): IMIMEEntity;
  end;

// *********************************************************************//
// The Class CoNotesMIMEHeader provides a Create and CreateRemote method to          
// create instances of the default interface IMIMEHeader exposed by              
// the CoClass NotesMIMEHeader. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesMIMEHeader = class
    class function Create: IMIMEHeader;
    class function CreateRemote(const MachineName: string): IMIMEHeader;
  end;

// *********************************************************************//
// The Class CoNotesStream provides a Create and CreateRemote method to          
// create instances of the default interface INotesStream exposed by              
// the CoClass NotesStream. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesStream = class
    class function Create: INotesStream;
    class function CreateRemote(const MachineName: string): INotesStream;
  end;

// *********************************************************************//
// The Class CoNotesAdministrationProcess provides a Create and CreateRemote method to          
// create instances of the default interface IAdministrationProcess exposed by              
// the CoClass NotesAdministrationProcess. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesAdministrationProcess = class
    class function Create: IAdministrationProcess;
    class function CreateRemote(const MachineName: string): IAdministrationProcess;
  end;

// *********************************************************************//
// The Class CoNotesReplicationEntry provides a Create and CreateRemote method to          
// create instances of the default interface IReplicationEntry exposed by              
// the CoClass NotesReplicationEntry. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesReplicationEntry = class
    class function Create: IReplicationEntry;
    class function CreateRemote(const MachineName: string): IReplicationEntry;
  end;

// *********************************************************************//
// The Class CoNotesColorObject provides a Create and CreateRemote method to          
// create instances of the default interface IColorObject exposed by              
// the CoClass NotesColorObject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesColorObject = class
    class function Create: IColorObject;
    class function CreateRemote(const MachineName: string): IColorObject;
  end;

// *********************************************************************//
// The Class CoNotesRichTextNavigator provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextNavigator exposed by              
// the CoClass NotesRichTextNavigator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextNavigator = class
    class function Create: IRichTextNavigator;
    class function CreateRemote(const MachineName: string): IRichTextNavigator;
  end;

// *********************************************************************//
// The Class CoNotesRichTextRange provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextRange exposed by              
// the CoClass NotesRichTextRange. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextRange = class
    class function Create: IRichTextRange;
    class function CreateRemote(const MachineName: string): IRichTextRange;
  end;

// *********************************************************************//
// The Class CoNotesRichTextDoclink provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextDoclink exposed by              
// the CoClass NotesRichTextDoclink. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextDoclink = class
    class function Create: IRichTextDoclink;
    class function CreateRemote(const MachineName: string): IRichTextDoclink;
  end;

// *********************************************************************//
// The Class CoNotesRichTextSection provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextSection exposed by              
// the CoClass NotesRichTextSection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextSection = class
    class function Create: IRichTextSection;
    class function CreateRemote(const MachineName: string): IRichTextSection;
  end;

// *********************************************************************//
// The Class CoNotesRichTextTable provides a Create and CreateRemote method to          
// create instances of the default interface IRichTextTable exposed by              
// the CoClass NotesRichTextTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesRichTextTable = class
    class function Create: IRichTextTable;
    class function CreateRemote(const MachineName: string): IRichTextTable;
  end;

// *********************************************************************//
// The Class CoNotesNoteCollection provides a Create and CreateRemote method to          
// create instances of the default interface INoteCollection exposed by              
// the CoClass NotesNoteCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesNoteCollection = class
    class function Create: INoteCollection;
    class function CreateRemote(const MachineName: string): INoteCollection;
  end;

// *********************************************************************//
// The Class CoNotesDXLExporter provides a Create and CreateRemote method to          
// create instances of the default interface IDXLExporter exposed by              
// the CoClass NotesDXLExporter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDXLExporter = class
    class function Create: IDXLExporter;
    class function CreateRemote(const MachineName: string): IDXLExporter;
  end;

// *********************************************************************//
// The Class CoNotesDXLImporter provides a Create and CreateRemote method to          
// create instances of the default interface IDXLImporter exposed by              
// the CoClass NotesDXLImporter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNotesDXLImporter = class
    class function Create: IDXLImporter;
    class function CreateRemote(const MachineName: string): IDXLImporter;
  end;

implementation

uses System.Win.ComObj;

class function CoNotesACL.Create: IACL;
begin
  Result := CreateComObject(CLASS_NotesACL) as IACL;
end;

class function CoNotesACL.CreateRemote(const MachineName: string): IACL;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesACL) as IACL;
end;

class function CoNotesACLEntry.Create: IACLEntry;
begin
  Result := CreateComObject(CLASS_NotesACLEntry) as IACLEntry;
end;

class function CoNotesACLEntry.CreateRemote(const MachineName: string): IACLEntry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesACLEntry) as IACLEntry;
end;

class function CoNotesAgent.Create: IAgent;
begin
  Result := CreateComObject(CLASS_NotesAgent) as IAgent;
end;

class function CoNotesAgent.CreateRemote(const MachineName: string): IAgent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesAgent) as IAgent;
end;

class function CoNotesDatabase.Create: IDatabase;
begin
  Result := CreateComObject(CLASS_NotesDatabase) as IDatabase;
end;

class function CoNotesDatabase.CreateRemote(const MachineName: string): IDatabase;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDatabase) as IDatabase;
end;

class function CoNotesDateRange.Create: IDateRange;
begin
  Result := CreateComObject(CLASS_NotesDateRange) as IDateRange;
end;

class function CoNotesDateRange.CreateRemote(const MachineName: string): IDateRange;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDateRange) as IDateRange;
end;

class function CoNotesDateTime.Create: IDateTime;
begin
  Result := CreateComObject(CLASS_NotesDateTime) as IDateTime;
end;

class function CoNotesDateTime.CreateRemote(const MachineName: string): IDateTime;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDateTime) as IDateTime;
end;

class function CoNotesDbDirectory.Create: IDbDirectory;
begin
  Result := CreateComObject(CLASS_NotesDbDirectory) as IDbDirectory;
end;

class function CoNotesDbDirectory.CreateRemote(const MachineName: string): IDbDirectory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDbDirectory) as IDbDirectory;
end;

class function CoNotesDocument.Create: IDocument;
begin
  Result := CreateComObject(CLASS_NotesDocument) as IDocument;
end;

class function CoNotesDocument.CreateRemote(const MachineName: string): IDocument;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDocument) as IDocument;
end;

class function CoNotesDocumentCollection.Create: IDocumentCollection;
begin
  Result := CreateComObject(CLASS_NotesDocumentCollection) as IDocumentCollection;
end;

class function CoNotesDocumentCollection.CreateRemote(const MachineName: string): IDocumentCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDocumentCollection) as IDocumentCollection;
end;

class function CoNotesEmbeddedObject.Create: IEmbeddedObject;
begin
  Result := CreateComObject(CLASS_NotesEmbeddedObject) as IEmbeddedObject;
end;

class function CoNotesEmbeddedObject.CreateRemote(const MachineName: string): IEmbeddedObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesEmbeddedObject) as IEmbeddedObject;
end;

class function CoNotesForm.Create: IForm;
begin
  Result := CreateComObject(CLASS_NotesForm) as IForm;
end;

class function CoNotesForm.CreateRemote(const MachineName: string): IForm;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesForm) as IForm;
end;

class function CoNotesItem.Create: IItem2;
begin
  Result := CreateComObject(CLASS_NotesItem) as IItem2;
end;

class function CoNotesItem.CreateRemote(const MachineName: string): IItem2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesItem) as IItem2;
end;

class function CoNotesInternational.Create: IInternational;
begin
  Result := CreateComObject(CLASS_NotesInternational) as IInternational;
end;

class function CoNotesInternational.CreateRemote(const MachineName: string): IInternational;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesInternational) as IInternational;
end;

class function CoNotesLog.Create: ILog;
begin
  Result := CreateComObject(CLASS_NotesLog) as ILog;
end;

class function CoNotesLog.CreateRemote(const MachineName: string): ILog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesLog) as ILog;
end;

class function CoNotesName.Create: IName;
begin
  Result := CreateComObject(CLASS_NotesName) as IName;
end;

class function CoNotesName.CreateRemote(const MachineName: string): IName;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesName) as IName;
end;

class function CoNotesNewsletter.Create: INewsletter;
begin
  Result := CreateComObject(CLASS_NotesNewsletter) as INewsletter;
end;

class function CoNotesNewsletter.CreateRemote(const MachineName: string): INewsletter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesNewsletter) as INewsletter;
end;

class function CoNotesOutline.Create: IOutline;
begin
  Result := CreateComObject(CLASS_NotesOutline) as IOutline;
end;

class function CoNotesOutline.CreateRemote(const MachineName: string): IOutline;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesOutline) as IOutline;
end;

class function CoNotesOutlineEntry.Create: IOutlineEntry;
begin
  Result := CreateComObject(CLASS_NotesOutlineEntry) as IOutlineEntry;
end;

class function CoNotesOutlineEntry.CreateRemote(const MachineName: string): IOutlineEntry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesOutlineEntry) as IOutlineEntry;
end;

class function CoNotesRichTextItem.Create: IRichTextItem;
begin
  Result := CreateComObject(CLASS_NotesRichTextItem) as IRichTextItem;
end;

class function CoNotesRichTextItem.CreateRemote(const MachineName: string): IRichTextItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextItem) as IRichTextItem;
end;

class function CoNotesRichTextStyle.Create: IRichTextStyle;
begin
  Result := CreateComObject(CLASS_NotesRichTextStyle) as IRichTextStyle;
end;

class function CoNotesRichTextStyle.CreateRemote(const MachineName: string): IRichTextStyle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextStyle) as IRichTextStyle;
end;

class function CoNotesRichTextParagraphStyle.Create: IRichTextParagraphStyle;
begin
  Result := CreateComObject(CLASS_NotesRichTextParagraphStyle) as IRichTextParagraphStyle;
end;

class function CoNotesRichTextParagraphStyle.CreateRemote(const MachineName: string): IRichTextParagraphStyle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextParagraphStyle) as IRichTextParagraphStyle;
end;

class function CoNotesRichTextTab.Create: IRichTextTab;
begin
  Result := CreateComObject(CLASS_NotesRichTextTab) as IRichTextTab;
end;

class function CoNotesRichTextTab.CreateRemote(const MachineName: string): IRichTextTab;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextTab) as IRichTextTab;
end;

class function CoNotesRegistration.Create: IRegistration;
begin
  Result := CreateComObject(CLASS_NotesRegistration) as IRegistration;
end;

class function CoNotesRegistration.CreateRemote(const MachineName: string): IRegistration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRegistration) as IRegistration;
end;

class function CoNotesReplication.Create: IReplication;
begin
  Result := CreateComObject(CLASS_NotesReplication) as IReplication;
end;

class function CoNotesReplication.CreateRemote(const MachineName: string): IReplication;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesReplication) as IReplication;
end;

class function CoNotesSession.Create: ISession;
begin
  Result := CreateComObject(CLASS_NotesSession) as ISession;
end;

class function CoNotesSession.CreateRemote(const MachineName: string): ISession;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesSession) as ISession;
end;

class function CoNotesView.Create: IView;
begin
  Result := CreateComObject(CLASS_NotesView) as IView;
end;

class function CoNotesView.CreateRemote(const MachineName: string): IView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesView) as IView;
end;

class function CoNotesViewColumn.Create: IViewColumn;
begin
  Result := CreateComObject(CLASS_NotesViewColumn) as IViewColumn;
end;

class function CoNotesViewColumn.CreateRemote(const MachineName: string): IViewColumn;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesViewColumn) as IViewColumn;
end;

class function CoNotesViewEntry.Create: IViewEntry;
begin
  Result := CreateComObject(CLASS_NotesViewEntry) as IViewEntry;
end;

class function CoNotesViewEntry.CreateRemote(const MachineName: string): IViewEntry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesViewEntry) as IViewEntry;
end;

class function CoNotesViewEntryCollection.Create: IViewEntryCollection;
begin
  Result := CreateComObject(CLASS_NotesViewEntryCollection) as IViewEntryCollection;
end;

class function CoNotesViewEntryCollection.CreateRemote(const MachineName: string): IViewEntryCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesViewEntryCollection) as IViewEntryCollection;
end;

class function CoNotesViewNavigator.Create: IViewNavigator;
begin
  Result := CreateComObject(CLASS_NotesViewNavigator) as IViewNavigator;
end;

class function CoNotesViewNavigator.CreateRemote(const MachineName: string): IViewNavigator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesViewNavigator) as IViewNavigator;
end;

class function CoNotesMIMEEntity.Create: IMIMEEntity;
begin
  Result := CreateComObject(CLASS_NotesMIMEEntity) as IMIMEEntity;
end;

class function CoNotesMIMEEntity.CreateRemote(const MachineName: string): IMIMEEntity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesMIMEEntity) as IMIMEEntity;
end;

class function CoNotesMIMEHeader.Create: IMIMEHeader;
begin
  Result := CreateComObject(CLASS_NotesMIMEHeader) as IMIMEHeader;
end;

class function CoNotesMIMEHeader.CreateRemote(const MachineName: string): IMIMEHeader;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesMIMEHeader) as IMIMEHeader;
end;

class function CoNotesStream.Create: INotesStream;
begin
  Result := CreateComObject(CLASS_NotesStream) as INotesStream;
end;

class function CoNotesStream.CreateRemote(const MachineName: string): INotesStream;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesStream) as INotesStream;
end;

class function CoNotesAdministrationProcess.Create: IAdministrationProcess;
begin
  Result := CreateComObject(CLASS_NotesAdministrationProcess) as IAdministrationProcess;
end;

class function CoNotesAdministrationProcess.CreateRemote(const MachineName: string): IAdministrationProcess;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesAdministrationProcess) as IAdministrationProcess;
end;

class function CoNotesReplicationEntry.Create: IReplicationEntry;
begin
  Result := CreateComObject(CLASS_NotesReplicationEntry) as IReplicationEntry;
end;

class function CoNotesReplicationEntry.CreateRemote(const MachineName: string): IReplicationEntry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesReplicationEntry) as IReplicationEntry;
end;

class function CoNotesColorObject.Create: IColorObject;
begin
  Result := CreateComObject(CLASS_NotesColorObject) as IColorObject;
end;

class function CoNotesColorObject.CreateRemote(const MachineName: string): IColorObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesColorObject) as IColorObject;
end;

class function CoNotesRichTextNavigator.Create: IRichTextNavigator;
begin
  Result := CreateComObject(CLASS_NotesRichTextNavigator) as IRichTextNavigator;
end;

class function CoNotesRichTextNavigator.CreateRemote(const MachineName: string): IRichTextNavigator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextNavigator) as IRichTextNavigator;
end;

class function CoNotesRichTextRange.Create: IRichTextRange;
begin
  Result := CreateComObject(CLASS_NotesRichTextRange) as IRichTextRange;
end;

class function CoNotesRichTextRange.CreateRemote(const MachineName: string): IRichTextRange;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextRange) as IRichTextRange;
end;

class function CoNotesRichTextDoclink.Create: IRichTextDoclink;
begin
  Result := CreateComObject(CLASS_NotesRichTextDoclink) as IRichTextDoclink;
end;

class function CoNotesRichTextDoclink.CreateRemote(const MachineName: string): IRichTextDoclink;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextDoclink) as IRichTextDoclink;
end;

class function CoNotesRichTextSection.Create: IRichTextSection;
begin
  Result := CreateComObject(CLASS_NotesRichTextSection) as IRichTextSection;
end;

class function CoNotesRichTextSection.CreateRemote(const MachineName: string): IRichTextSection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextSection) as IRichTextSection;
end;

class function CoNotesRichTextTable.Create: IRichTextTable;
begin
  Result := CreateComObject(CLASS_NotesRichTextTable) as IRichTextTable;
end;

class function CoNotesRichTextTable.CreateRemote(const MachineName: string): IRichTextTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesRichTextTable) as IRichTextTable;
end;

class function CoNotesNoteCollection.Create: INoteCollection;
begin
  Result := CreateComObject(CLASS_NotesNoteCollection) as INoteCollection;
end;

class function CoNotesNoteCollection.CreateRemote(const MachineName: string): INoteCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesNoteCollection) as INoteCollection;
end;

class function CoNotesDXLExporter.Create: IDXLExporter;
begin
  Result := CreateComObject(CLASS_NotesDXLExporter) as IDXLExporter;
end;

class function CoNotesDXLExporter.CreateRemote(const MachineName: string): IDXLExporter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDXLExporter) as IDXLExporter;
end;

class function CoNotesDXLImporter.Create: IDXLImporter;
begin
  Result := CreateComObject(CLASS_NotesDXLImporter) as IDXLImporter;
end;

class function CoNotesDXLImporter.CreateRemote(const MachineName: string): IDXLImporter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NotesDXLImporter) as IDXLImporter;
end;

end.
